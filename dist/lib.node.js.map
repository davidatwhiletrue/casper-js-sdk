{"version":3,"file":"lib.node.js","mappings":"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","sources":["webpack://casper-js-sdk/webpack/universalModuleDefinition","webpack://casper-js-sdk/./src/@types/common.ts","webpack://casper-js-sdk/./src/@types/index.ts","webpack://casper-js-sdk/./src/index.ts","webpack://casper-js-sdk/./src/rpc/error.ts","webpack://casper-js-sdk/./src/rpc/http_handler.ts","webpack://casper-js-sdk/./src/rpc/id_value.ts","webpack://casper-js-sdk/./src/rpc/index.ts","webpack://casper-js-sdk/./src/rpc/request.ts","webpack://casper-js-sdk/./src/rpc/response.ts","webpack://casper-js-sdk/./src/rpc/rpc_client.ts","webpack://casper-js-sdk/./src/rpc/speculative_client.ts","webpack://casper-js-sdk/./src/sse/client.ts","webpack://casper-js-sdk/./src/sse/event.ts","webpack://casper-js-sdk/./src/sse/event_parser.ts","webpack://casper-js-sdk/./src/sse/index.ts","webpack://casper-js-sdk/./src/types/Account.ts","webpack://casper-js-sdk/./src/types/AddressableEntity.ts","webpack://casper-js-sdk/./src/types/Args.ts","webpack://casper-js-sdk/./src/types/AuctionState.ts","webpack://casper-js-sdk/./src/types/Bid.ts","webpack://casper-js-sdk/./src/types/BidKind.ts","webpack://casper-js-sdk/./src/types/Block.ts","webpack://casper-js-sdk/./src/types/BlockProposer.ts","webpack://casper-js-sdk/./src/types/ByteCode.ts","webpack://casper-js-sdk/./src/types/ByteConverters.ts","webpack://casper-js-sdk/./src/types/CalltableSerialization.ts","webpack://casper-js-sdk/./src/types/Contract.ts","webpack://casper-js-sdk/./src/types/ContractPackage.ts","webpack://casper-js-sdk/./src/types/ContractWasm.ts","webpack://casper-js-sdk/./src/types/Conversions.ts","webpack://casper-js-sdk/./src/types/Deploy.ts","webpack://casper-js-sdk/./src/types/DeployInfo.ts","webpack://casper-js-sdk/./src/types/EntryPoint.ts","webpack://casper-js-sdk/./src/types/EraEnd.ts","webpack://casper-js-sdk/./src/types/EraInfo.ts","webpack://casper-js-sdk/./src/types/EraSummary.ts","webpack://casper-js-sdk/./src/types/ExecutableDeployItem.ts","webpack://casper-js-sdk/./src/types/ExecutionResult.ts","webpack://casper-js-sdk/./src/types/HexBytes.ts","webpack://casper-js-sdk/./src/types/InitiatorAddr.ts","webpack://casper-js-sdk/./src/types/MessageTopic.ts","webpack://casper-js-sdk/./src/types/MinimalBlockInfo.ts","webpack://casper-js-sdk/./src/types/NamedKey.ts","webpack://casper-js-sdk/./src/types/Package.ts","webpack://casper-js-sdk/./src/types/Prepayment.ts","webpack://casper-js-sdk/./src/types/PricingMode.ts","webpack://casper-js-sdk/./src/types/SerializationUtils.ts","webpack://casper-js-sdk/./src/types/StoredValue.ts","webpack://casper-js-sdk/./src/types/Time.ts","webpack://casper-js-sdk/./src/types/Transaction.ts","webpack://casper-js-sdk/./src/types/TransactionBuilder.ts","webpack://casper-js-sdk/./src/types/TransactionEntryPoint.ts","webpack://casper-js-sdk/./src/types/TransactionScheduling.ts","webpack://casper-js-sdk/./src/types/TransactionTarget.ts","webpack://casper-js-sdk/./src/types/TransactionV1Payload.ts","webpack://casper-js-sdk/./src/types/Transfer.ts","webpack://casper-js-sdk/./src/types/Transform.ts","webpack://casper-js-sdk/./src/types/TransformRaw.ts","webpack://casper-js-sdk/./src/types/UnbondingPurse.ts","webpack://casper-js-sdk/./src/types/ValidatorWeight.ts","webpack://casper-js-sdk/./src/types/clvalue/Any.ts","webpack://casper-js-sdk/./src/types/clvalue/Bool.ts","webpack://casper-js-sdk/./src/types/clvalue/ByteArray.ts","webpack://casper-js-sdk/./src/types/clvalue/CLValue.ts","webpack://casper-js-sdk/./src/types/clvalue/List.ts","webpack://casper-js-sdk/./src/types/clvalue/Map.ts","webpack://casper-js-sdk/./src/types/clvalue/Numeric/Abstract.ts","webpack://casper-js-sdk/./src/types/clvalue/Numeric/Int32.ts","webpack://casper-js-sdk/./src/types/clvalue/Numeric/Int64.ts","webpack://casper-js-sdk/./src/types/clvalue/Numeric/Uint128.ts","webpack://casper-js-sdk/./src/types/clvalue/Numeric/Uint256.ts","webpack://casper-js-sdk/./src/types/clvalue/Numeric/Uint32.ts","webpack://casper-js-sdk/./src/types/clvalue/Numeric/Uint512.ts","webpack://casper-js-sdk/./src/types/clvalue/Numeric/Uint64.ts","webpack://casper-js-sdk/./src/types/clvalue/Numeric/Uint8.ts","webpack://casper-js-sdk/./src/types/clvalue/Numeric/index.ts","webpack://casper-js-sdk/./src/types/clvalue/Option.ts","webpack://casper-js-sdk/./src/types/clvalue/Parser.ts","webpack://casper-js-sdk/./src/types/clvalue/Result.ts","webpack://casper-js-sdk/./src/types/clvalue/String.ts","webpack://casper-js-sdk/./src/types/clvalue/Tuple1.ts","webpack://casper-js-sdk/./src/types/clvalue/Tuple2.ts","webpack://casper-js-sdk/./src/types/clvalue/Tuple3.ts","webpack://casper-js-sdk/./src/types/clvalue/UintBig.ts","webpack://casper-js-sdk/./src/types/clvalue/Unit.ts","webpack://casper-js-sdk/./src/types/clvalue/cltype/ByteArray.ts","webpack://casper-js-sdk/./src/types/clvalue/cltype/CLType.ts","webpack://casper-js-sdk/./src/types/clvalue/cltype/CLTypeRaw.ts","webpack://casper-js-sdk/./src/types/clvalue/cltype/Dynamic.ts","webpack://casper-js-sdk/./src/types/clvalue/cltype/List.ts","webpack://casper-js-sdk/./src/types/clvalue/cltype/Map.ts","webpack://casper-js-sdk/./src/types/clvalue/cltype/Option.ts","webpack://casper-js-sdk/./src/types/clvalue/cltype/Parser.ts","webpack://casper-js-sdk/./src/types/clvalue/cltype/Result.ts","webpack://casper-js-sdk/./src/types/clvalue/cltype/Tuple1.ts","webpack://casper-js-sdk/./src/types/clvalue/cltype/Tuple2.ts","webpack://casper-js-sdk/./src/types/clvalue/cltype/Tuple3.ts","webpack://casper-js-sdk/./src/types/clvalue/cltype/index.ts","webpack://casper-js-sdk/./src/types/clvalue/index.ts","webpack://casper-js-sdk/./src/types/index.ts","webpack://casper-js-sdk/./src/types/key/Account.ts","webpack://casper-js-sdk/./src/types/key/AddressableEntity.ts","webpack://casper-js-sdk/./src/types/key/BalanceHoldAddr.ts","webpack://casper-js-sdk/./src/types/key/BidAddr.ts","webpack://casper-js-sdk/./src/types/key/BlockGlobalAddr.ts","webpack://casper-js-sdk/./src/types/key/ByteCode.ts","webpack://casper-js-sdk/./src/types/key/Contract.ts","webpack://casper-js-sdk/./src/types/key/ContractPackage.ts","webpack://casper-js-sdk/./src/types/key/EntityAddr.ts","webpack://casper-js-sdk/./src/types/key/EntryPointAddr.ts","webpack://casper-js-sdk/./src/types/key/Era.ts","webpack://casper-js-sdk/./src/types/key/Hash.ts","webpack://casper-js-sdk/./src/types/key/Key.ts","webpack://casper-js-sdk/./src/types/key/MessageAddr.ts","webpack://casper-js-sdk/./src/types/key/NewNamedKeyAddr.ts","webpack://casper-js-sdk/./src/types/key/Transfer.ts","webpack://casper-js-sdk/./src/types/key/URef.ts","webpack://casper-js-sdk/./src/types/key/index.ts","webpack://casper-js-sdk/./src/types/keypair/Algorithm.ts","webpack://casper-js-sdk/./src/types/keypair/PrivateKey.ts","webpack://casper-js-sdk/./src/types/keypair/PublicKey.ts","webpack://casper-js-sdk/./src/types/keypair/ed25519/PrivateKey.ts","webpack://casper-js-sdk/./src/types/keypair/ed25519/PublicKey.ts","webpack://casper-js-sdk/./src/types/keypair/index.ts","webpack://casper-js-sdk/./src/types/keypair/secp256k1/PrivateKey.ts","webpack://casper-js-sdk/./src/types/keypair/secp256k1/PublicKey.ts","webpack://casper-js-sdk/./src/types/keypair/utils.ts","webpack://casper-js-sdk/./src/utils/auction-manager.ts","webpack://casper-js-sdk/./src/utils/casper-network.ts","webpack://casper-js-sdk/./src/utils/cep-18-transfer.ts","webpack://casper-js-sdk/./src/utils/cep-nft-transfer.ts","webpack://casper-js-sdk/./src/utils/common.ts","webpack://casper-js-sdk/./src/utils/constants.ts","webpack://casper-js-sdk/./src/utils/cspr-transfer.ts","webpack://casper-js-sdk/./src/utils/index.ts","webpack://casper-js-sdk/external commonjs \"@ethersproject/bignumber\"","webpack://casper-js-sdk/external commonjs \"@ethersproject/bytes\"","webpack://casper-js-sdk/external commonjs \"@ethersproject/constants\"","webpack://casper-js-sdk/external commonjs \"@noble/ed25519\"","webpack://casper-js-sdk/external commonjs \"@noble/hashes/blake2b\"","webpack://casper-js-sdk/external commonjs \"@noble/hashes/hmac\"","webpack://casper-js-sdk/external commonjs \"@noble/hashes/sha256\"","webpack://casper-js-sdk/external commonjs \"@noble/hashes/sha512\"","webpack://casper-js-sdk/external commonjs \"@noble/secp256k1\"","webpack://casper-js-sdk/external commonjs \"axios\"","webpack://casper-js-sdk/external commonjs \"eventsource\"","webpack://casper-js-sdk/external commonjs \"humanize-duration\"","webpack://casper-js-sdk/external commonjs \"key-encoder\"","webpack://casper-js-sdk/external commonjs \"lodash/isNull\"","webpack://casper-js-sdk/external commonjs \"ts-results\"","webpack://casper-js-sdk/external commonjs \"typedjson\"","webpack://casper-js-sdk/webpack/bootstrap","webpack://casper-js-sdk/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(global, () => {\nreturn ","export enum CasperNetworkName {\n  Mainnet = 'casper',\n  Testnet = 'casper-test',\n  Integration = 'integration-test',\n  DevNet = 'dev-net'\n}\n\nexport enum AuctionManagerEntryPoint {\n  delegate = 'delegate',\n  undelegate = 'undelegate',\n  redelegate = 'redelegate',\n  addBid = 'add_bid',\n  withdrawBid = 'withdraw_bid',\n  activateBid = 'activate_bid'\n}\n\nexport enum NFTTokenStandard {\n  CEP47 = 'CEP47',\n  CEP78 = 'CEP78'\n}\n","export * from './common'\n","export * from './types';\nexport * from './rpc';\nexport * from './sse';\nexport * from './utils';\nexport * from './@types';\n","import { jsonObject, jsonMember, AnyT } from 'typedjson';\n\n@jsonObject\nexport class RpcError extends Error {\n  @jsonMember({ constructor: Number })\n  code: number;\n\n  @jsonMember({ isRequired: false, constructor: AnyT })\n  data?: any;\n\n  constructor(code = 0, message = '', data?: any) {\n    super(message);\n    this.code = code;\n    this.data = data;\n  }\n\n  toString(): string {\n    return `key: ${this.message}, data: ${JSON.stringify(this.data)}`;\n  }\n}\n\n@jsonObject\nexport class HttpError<T extends Error = Error> extends Error {\n  @jsonMember({ constructor: Error })\n  sourceErr: T;\n\n  @jsonMember({ constructor: Number })\n  statusCode: number;\n\n  constructor(statusCode = 0, sourceErr: T) {\n    super(`Code: ${statusCode}, err: ${sourceErr.message}`);\n    this.sourceErr = sourceErr;\n    this.statusCode = statusCode;\n  }\n\n  unwrap(): T {\n    return this.sourceErr;\n  }\n\n  isNotFound(): boolean {\n    return this.statusCode === 404;\n  }\n\n  static isHttpError<E extends Error = Error>(\n    err: any | HttpError<E>\n  ): err is HttpError<E> {\n    return err?.statusCode && err.sourceErr;\n  }\n}\n","import { TypedJSON } from 'typedjson';\nimport axios, { AxiosInstance, AxiosRequestConfig } from 'axios';\n\nimport { HttpError } from './error';\nimport { RpcRequest } from './request';\nimport { RpcResponse } from './response';\nimport { IHandler } from './client';\n\nexport const ErrParamsJsonStringifyHandler = new Error(\n  \"failed to stringify json rpc request's params\"\n);\nexport const ErrProcessHttpRequest = new Error('failed to send http request');\nexport const ErrReadHttpResponseBody = new Error(\n  'failed to read http response body'\n);\nexport const ErrRpcResponseUnmarshal = new Error(\n  'failed to unmarshal rpc response'\n);\n\nexport class HttpHandler implements IHandler {\n  private endpoint: string;\n  private client: 'axios' | 'fetch';\n  private httpClient?: AxiosInstance;\n  private referrer?: string;\n  private customHeaders: Record<string, string> = {};\n\n  constructor(endpoint: string, client: 'axios' | 'fetch' = 'axios') {\n    this.endpoint = endpoint;\n    this.client = client;\n    if (client === 'axios') {\n      this.httpClient = axios.create();\n    }\n  }\n\n  setCustomHeaders(headers: Record<string, string>) {\n    this.customHeaders = headers;\n  }\n\n  setReferrer(url: string) {\n    this.referrer = url;\n  }\n\n  /** @throws {HttpError, Error} */\n  async processCall(params: RpcRequest): Promise<RpcResponse> {\n    const serializer = new TypedJSON(RpcRequest);\n    let body: string;\n\n    try {\n      body = serializer.stringify(params);\n    } catch (err) {\n      throw new Error(\n        `${ErrParamsJsonStringifyHandler.message}, details: ${err.message}`\n      );\n    }\n\n    if (this.client === 'axios') {\n      return this.processAxiosRequest(body);\n    } else {\n      return this.processFetchRequest(body);\n    }\n  }\n\n  private async processAxiosRequest(body: string): Promise<RpcResponse> {\n    const config: AxiosRequestConfig = {\n      method: 'POST',\n      url: this.endpoint,\n      headers: {\n        'Content-Type': 'application/json',\n        ...this.customHeaders\n      },\n      data: body\n    };\n\n    try {\n      const response = await this.httpClient!.request<RpcResponse>(config);\n      if (response.status < 200 || response.status >= 300) {\n        throw new HttpError(response.status, new Error(response.statusText));\n      }\n      return response.data;\n    } catch (err) {\n      if (axios.isAxiosError(err) && err.response) {\n        throw new HttpError(\n          err.response.status,\n          new Error(err.response.statusText)\n        );\n      }\n      throw new Error(\n        `${ErrProcessHttpRequest.message}, details: ${err.message}`\n      );\n    }\n  }\n\n  private async processFetchRequest(body: string): Promise<RpcResponse> {\n    try {\n      const response = await fetch(this.endpoint, {\n        method: 'POST',\n        ...(this.referrer ? { referrer: this.referrer } : {}),\n        headers: {\n          'Content-Type': 'application/json',\n          ...this.customHeaders\n        },\n        body\n      });\n\n      if (response.status < 200 || response.status >= 300) {\n        throw new HttpError(response.status, new Error(response.statusText));\n      }\n\n      return response.json();\n    } catch (err) {\n      throw new Error(\n        `${ErrProcessHttpRequest.message}, details: ${err.message}`\n      );\n    }\n  }\n}\n","import { jsonMember, jsonObject } from 'typedjson';\n\n@jsonObject\nexport class IDValue {\n  @jsonMember({ constructor: Number, isRequired: false, preserveNull: true })\n  intValue: number | null = null;\n\n  @jsonMember({ constructor: String, isRequired: false, preserveNull: true })\n  strValue: string | null = null;\n\n  @jsonMember({ constructor: Boolean })\n  isIntValue: boolean;\n\n  constructor(value: string | number) {\n    if (typeof value === 'number') {\n      this.intValue = value;\n      this.isIntValue = true;\n    } else {\n      this.strValue = value;\n      this.isIntValue = false;\n    }\n  }\n\n  static fromString(value: string): IDValue {\n    return new IDValue(value);\n  }\n\n  static fromInt(value: number): IDValue {\n    return new IDValue(value);\n  }\n\n  toString(): string {\n    if (this.isIntValue && this.intValue !== null) {\n      return this.intValue.toString();\n    }\n    return this.strValue || '';\n  }\n\n  toInt(): number {\n    if (this.isIntValue && this.intValue !== null) {\n      return this.intValue;\n    }\n\n    const val = parseInt(this.strValue || '0', 10);\n    return isNaN(val) ? 0 : val;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  static fromJSON(data: string | number): IDValue {\n    if (typeof data === 'number') {\n      return IDValue.fromInt(data);\n    } else if (typeof data === 'string') {\n      return IDValue.fromString(data);\n    }\n    throw new Error('IDValue should be an int or string');\n  }\n}\n","export * from './client'\nexport * from './error'\nexport * from './http_handler'\nexport * from './id_value'\nexport * from './request'\nexport * from './response'\nexport * from './rpc_client'\nexport * from './speculative_client'\n","import {\n  jsonObject,\n  jsonMember,\n  jsonArrayMember,\n  AnyT,\n  TypedJSON\n} from 'typedjson';\nimport { IDValue } from './id_value';\nimport {\n  TransactionHash,\n  TransactionWrapper,\n  Deploy,\n  URef,\n  EntityAddr,\n  AccountHash,\n  PublicKey\n} from '../types';\n\nexport const ApiVersion = '2.0';\n\nexport enum Method {\n  GetDeploy = 'info_get_deploy',\n  GetTransaction = 'info_get_transaction',\n  GetStateItem = 'state_get_item',\n  QueryGlobalState = 'query_global_state',\n  GetDictionaryItem = 'state_get_dictionary_item',\n  GetStateBalance = 'state_get_balance',\n  GetStateAccount = 'state_get_account_info',\n  GetStateEntity = 'state_get_entity',\n  GetEraInfo = 'chain_get_era_info_by_switch_block',\n  GetBlock = 'chain_get_block',\n  GetBlockTransfers = 'chain_get_block_transfers',\n  GetEraSummary = 'chain_get_era_summary',\n  GetAuctionInfo = 'state_get_auction_info',\n  GetAuctionInfoV2 = 'state_get_auction_info_v2',\n  GetValidatorChanges = 'info_get_validator_changes',\n  GetStateRootHash = 'chain_get_state_root_hash',\n  GetStatus = 'info_get_status',\n  GetReward = 'info_get_reward',\n  GetPeers = 'info_get_peers',\n  PutDeploy = 'account_put_deploy',\n  PutTransaction = 'account_put_transaction',\n  SpeculativeExec = 'speculative_exec',\n  QueryBalance = 'query_balance',\n  QueryBalanceDetails = 'query_balance_details',\n  InfoGetChainspec = 'info_get_chainspec'\n}\n\n@jsonObject\nexport class RpcRequest {\n  @jsonMember({ constructor: String, name: 'jsonrpc' })\n  version: string;\n\n  @jsonMember({\n    constructor: IDValue,\n    isRequired: false,\n    deserializer: (json: string) => {\n      return IDValue.fromJSON(json);\n    },\n    serializer: (value: IDValue) => {\n      if (!value) return undefined;\n      return value.toJSON();\n    }\n  })\n  id?: IDValue;\n\n  @jsonMember({ constructor: String })\n  method: Method;\n\n  @jsonMember({ constructor: AnyT })\n  params: any;\n\n  constructor(version: string, method: Method, params: any, id?: IDValue) {\n    this.version = version;\n    this.method = method;\n    this.params = params;\n    this.id = id;\n  }\n\n  static defaultRpcRequest(method: Method, params: any): RpcRequest {\n    return new RpcRequest(ApiVersion, method, params, IDValue.fromString('1'));\n  }\n}\n\n@jsonObject\nexport class ParamStateRootHash {\n  @jsonMember({ constructor: String, name: 'state_root_hash' })\n  stateRootHash: string;\n\n  @jsonMember({ constructor: String })\n  key: string;\n\n  @jsonArrayMember(String)\n  path?: string[];\n\n  constructor(stateRootHash: string, key: string, path?: string[]) {\n    this.stateRootHash = stateRootHash;\n    this.key = key;\n    this.path = path;\n  }\n}\n\n@jsonObject\nexport class BlockIdentifier {\n  @jsonMember({ isRequired: false, constructor: String, name: 'Hash' })\n  hash?: string;\n\n  @jsonMember({ isRequired: false, constructor: Number, name: 'Height' })\n  height?: number;\n\n  constructor(hash?: string, height?: number) {\n    this.hash = hash;\n    this.height = height;\n  }\n}\n\n@jsonObject\nexport class ParamQueryGlobalStateID {\n  @jsonMember({ isRequired: false, constructor: String, name: 'StateRootHash' })\n  stateRootHash?: string;\n\n  @jsonMember({ isRequired: false, constructor: String, name: 'BlockHash' })\n  blockHash?: string;\n\n  @jsonMember({ isRequired: false, constructor: Number, name: 'BlockHeight' })\n  blockHeight?: number;\n\n  constructor(\n    stateRootHash?: string,\n    blockHash?: string,\n    blockHeight?: number\n  ) {\n    this.stateRootHash = stateRootHash;\n    this.blockHash = blockHash;\n    this.blockHeight = blockHeight;\n  }\n}\n\n@jsonObject\nexport class ParamQueryGlobalState {\n  @jsonMember({\n    isRequired: false,\n    constructor: ParamQueryGlobalStateID,\n    name: 'state_identifier'\n  })\n  stateIdentifier?: ParamQueryGlobalStateID;\n\n  @jsonMember({ constructor: String })\n  key: string;\n\n  @jsonArrayMember(String)\n  path?: string[];\n\n  constructor(\n    stateIdentifier: ParamQueryGlobalStateID | undefined,\n    key: string,\n    path?: string[]\n  ) {\n    this.stateIdentifier = stateIdentifier;\n    this.key = key;\n    this.path = path;\n  }\n\n  static newQueryGlobalStateParam(\n    key: string,\n    path: string[],\n    id?: ParamQueryGlobalStateID\n  ): ParamQueryGlobalState {\n    return new ParamQueryGlobalState(id, key, path);\n  }\n}\n\n@jsonObject\nexport class ParamTransactionHash {\n  @jsonMember({\n    constructor: TransactionHash,\n    isRequired: false,\n    name: 'transaction_hash'\n  })\n  transactionHash?: TransactionHash;\n\n  @jsonMember({\n    isRequired: false,\n    constructor: Boolean,\n    name: 'finalized_approvals'\n  })\n  finalizedApprovals?: boolean;\n\n  constructor(transactionHash?: TransactionHash, finalizedApprovals?: boolean) {\n    this.transactionHash = transactionHash;\n    this.finalizedApprovals = finalizedApprovals;\n  }\n}\n\n@jsonObject\nexport class ParamDeployHash {\n  @jsonMember({ name: 'deploy_hash', constructor: String })\n  deployHash?: string;\n\n  @jsonMember({\n    isRequired: false,\n    constructor: Boolean,\n    name: 'finalized_approvals'\n  })\n  finalizedApprovals?: boolean;\n\n  constructor(deployHash?: string, finalizedApprovals?: boolean) {\n    this.deployHash = deployHash;\n    this.finalizedApprovals = finalizedApprovals;\n  }\n}\n\n@jsonObject\nexport class ParamBlockIdentifier {\n  @jsonMember({\n    isRequired: false,\n    constructor: BlockIdentifier,\n    name: 'block_identifier'\n  })\n  blockIdentifier?: BlockIdentifier;\n\n  constructor(blockIdentifier?: BlockIdentifier) {\n    this.blockIdentifier = blockIdentifier;\n  }\n\n  static byHeight(height: number): ParamBlockIdentifier {\n    return new ParamBlockIdentifier(new BlockIdentifier(undefined, height));\n  }\n\n  static byHash(hash: string): ParamBlockIdentifier {\n    return new ParamBlockIdentifier(new BlockIdentifier(hash));\n  }\n}\n\n@jsonObject\nexport class ParamGetAccountInfoBalance {\n  @jsonMember({ constructor: String, name: 'account_identifier' })\n  accountIdentifier: string;\n\n  @jsonMember({ constructor: ParamBlockIdentifier })\n  paramBlockIdentifier: ParamBlockIdentifier;\n\n  constructor(\n    accountIdentifier: string,\n    paramBlockIdentifier: ParamBlockIdentifier\n  ) {\n    this.accountIdentifier = accountIdentifier;\n    this.paramBlockIdentifier = paramBlockIdentifier;\n  }\n\n  toJSON(): any {\n    return Object.assign(\n      { account_identifier: this.accountIdentifier },\n      this.paramBlockIdentifier\n        ? new TypedJSON(ParamBlockIdentifier).toPlainJson(\n            this.paramBlockIdentifier\n          )\n        : {}\n    );\n  }\n}\n\n@jsonObject\nexport class EntityIdentifier {\n  @jsonMember({\n    constructor: AccountHash,\n    name: 'AccountHash',\n    isRequired: false,\n    deserializer: (json: string) => {\n      if (!json) return;\n      return AccountHash.fromJSON(json);\n    },\n    serializer: (value: AccountHash) => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  accountHash?: AccountHash;\n\n  @jsonMember({\n    constructor: PublicKey,\n    name: 'PublicKey',\n    isRequired: false,\n    deserializer: (json: string) => {\n      if (!json) return;\n      return PublicKey.fromJSON(json);\n    },\n    serializer: (value: PublicKey) => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  publicKey?: PublicKey;\n\n  @jsonMember({\n    constructor: EntityAddr,\n    name: 'EntityAddr',\n    isRequired: false,\n    deserializer: (json: string) => {\n      if (!json) return;\n      return EntityAddr.fromJSON(json);\n    },\n    serializer: (value: EntityAddr) => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  entityAddr?: EntityAddr;\n\n  constructor(\n    accountHash?: AccountHash,\n    publicKey?: PublicKey,\n    entityAddr?: EntityAddr\n  ) {\n    this.accountHash = accountHash;\n    this.publicKey = publicKey;\n    this.entityAddr = entityAddr;\n  }\n\n  static fromAccountHash(accountHash: AccountHash): EntityIdentifier {\n    return new EntityIdentifier(accountHash);\n  }\n\n  static fromPublicKey(pubKey: PublicKey): EntityIdentifier {\n    return new EntityIdentifier(undefined, pubKey);\n  }\n\n  static fromEntityAddr(entityAddr: EntityAddr): EntityIdentifier {\n    return new EntityIdentifier(undefined, undefined, entityAddr);\n  }\n}\n\n@jsonObject\nexport class ParamGetStateEntity {\n  @jsonMember({\n    constructor: EntityIdentifier,\n    name: 'entity_identifier'\n  })\n  entityIdentifier: EntityIdentifier;\n\n  @jsonMember({\n    isRequired: false,\n    constructor: BlockIdentifier,\n    name: 'block_identifier'\n  })\n  blockIdentifier?: BlockIdentifier;\n\n  constructor(\n    entityIdentifier: EntityIdentifier,\n    blockIdentifier?: BlockIdentifier\n  ) {\n    this.entityIdentifier = entityIdentifier;\n    this.blockIdentifier = blockIdentifier;\n  }\n}\n\n@jsonObject\nexport class AccountIdentifier {\n  @jsonMember({\n    constructor: AccountHash,\n    isRequired: false,\n    deserializer: (json: string) => {\n      if (!json) return;\n      return AccountHash.fromJSON(json);\n    },\n    serializer: (value: AccountHash) => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  accountHash?: AccountHash;\n\n  @jsonMember({\n    constructor: PublicKey,\n    isRequired: false,\n    deserializer: (json: string) => {\n      if (!json) return;\n      return PublicKey.fromJSON(json);\n    },\n    serializer: (value: PublicKey) => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  publicKey?: PublicKey;\n\n  constructor(accountHash?: AccountHash, publicKey?: PublicKey) {\n    this.accountHash = accountHash;\n    this.publicKey = publicKey;\n  }\n}\n\n@jsonObject\nexport class PutDeployRequest {\n  @jsonMember({ constructor: Deploy })\n  deploy: Deploy;\n\n  constructor(deploy: Deploy) {\n    this.deploy = deploy;\n  }\n}\n\n@jsonObject\nexport class PutTransactionRequest {\n  @jsonMember({\n    constructor: TransactionWrapper,\n    serializer: val => TransactionWrapper.toJSON(val)\n  })\n  transaction: TransactionWrapper;\n\n  constructor(transaction: TransactionWrapper) {\n    this.transaction = transaction;\n  }\n}\n\n@jsonObject\nexport class GlobalStateIdentifier {\n  @jsonMember({ isRequired: false, constructor: String, name: 'BlockHash' })\n  blockHash?: string;\n\n  @jsonMember({ isRequired: false, constructor: Number, name: 'BlockHeight' })\n  blockHeight?: number;\n\n  @jsonMember({ isRequired: false, constructor: String, name: 'StateRootHash' })\n  stateRoot?: string;\n\n  constructor(blockHash?: string, blockHeight?: number, stateRoot?: string) {\n    this.blockHash = blockHash;\n    this.blockHeight = blockHeight;\n    this.stateRoot = stateRoot;\n  }\n}\n\n@jsonObject\nexport class EraIdentifier {\n  @jsonMember({\n    isRequired: false,\n    constructor: BlockIdentifier,\n    name: 'Block'\n  })\n  block?: BlockIdentifier;\n\n  @jsonMember({ isRequired: false, constructor: Number, name: 'Era' })\n  era?: number;\n\n  constructor(block?: BlockIdentifier, era?: number) {\n    this.block = block;\n    this.era = era;\n  }\n}\n\n@jsonObject\nexport class ParamDictionaryIdentifierURef {\n  @jsonMember({ constructor: String, name: 'dictionary_item_key' })\n  dictionaryItemKey: string;\n\n  @jsonMember({ constructor: String, name: 'seed_uref' })\n  seedUref: string;\n\n  constructor(dictionaryItemKey: string, seedUref: string) {\n    this.dictionaryItemKey = dictionaryItemKey;\n    this.seedUref = seedUref;\n  }\n}\n\n@jsonObject\nexport class AccountNamedKey {\n  @jsonMember({ constructor: String })\n  key: string;\n\n  @jsonMember({ constructor: String, name: 'dictionary_name' })\n  dictionaryName: string;\n\n  @jsonMember({ constructor: String, name: 'dictionary_item_key' })\n  dictionaryItemKey: string;\n\n  constructor(key: string, dictionaryName: string, dictionaryItemKey: string) {\n    this.key = key;\n    this.dictionaryName = dictionaryName;\n    this.dictionaryItemKey = dictionaryItemKey;\n  }\n}\n\n@jsonObject\nexport class ParamDictionaryIdentifierContractNamedKey {\n  @jsonMember({ constructor: String })\n  key: string;\n\n  @jsonMember({ constructor: String, name: 'dictionary_name' })\n  dictionaryName: string;\n\n  @jsonMember({ constructor: String, name: 'dictionary_item_key' })\n  dictionaryItemKey: string;\n\n  constructor(key: string, dictionaryName: string, dictionaryItemKey: string) {\n    this.key = key;\n    this.dictionaryName = dictionaryName;\n    this.dictionaryItemKey = dictionaryItemKey;\n  }\n}\n\n@jsonObject\nexport class ParamDictionaryIdentifier {\n  @jsonMember({\n    isRequired: false,\n    constructor: AccountNamedKey,\n    name: 'AccountNamedKey'\n  })\n  accountNamedKey?: AccountNamedKey;\n\n  @jsonMember({\n    isRequired: false,\n    constructor: ParamDictionaryIdentifierContractNamedKey,\n    name: 'ContractNamedKey'\n  })\n  contractNamedKey?: ParamDictionaryIdentifierContractNamedKey;\n\n  @jsonMember({\n    isRequired: false,\n    constructor: ParamDictionaryIdentifierURef,\n    name: 'URef'\n  })\n  uRef?: ParamDictionaryIdentifierURef;\n\n  @jsonMember({ isRequired: false, constructor: String, name: 'Dictionary' })\n  dictionary?: string;\n\n  constructor(\n    accountNamedKey?: AccountNamedKey,\n    contractNamedKey?: ParamDictionaryIdentifierContractNamedKey,\n    uRef?: ParamDictionaryIdentifierURef,\n    dictionary?: string\n  ) {\n    this.accountNamedKey = accountNamedKey;\n    this.contractNamedKey = contractNamedKey;\n    this.uRef = uRef;\n    this.dictionary = dictionary;\n  }\n}\n\n@jsonObject\nexport class SpeculativeExecParams {\n  @jsonMember({ constructor: Deploy })\n  deploy: Deploy;\n\n  @jsonMember({\n    isRequired: false,\n    constructor: BlockIdentifier,\n    name: 'block_identifier'\n  })\n  blockIdentifier?: BlockIdentifier;\n\n  constructor(deploy: Deploy, blockIdentifier?: BlockIdentifier) {\n    this.deploy = deploy;\n    this.blockIdentifier = blockIdentifier;\n  }\n}\n\n@jsonObject\nexport class PurseIdentifier {\n  @jsonMember({\n    constructor: PublicKey,\n    name: 'main_purse_under_public_key',\n    isRequired: false,\n    deserializer: (json: string) => {\n      if (!json) return;\n      return PublicKey.fromJSON(json);\n    },\n    serializer: (value: PublicKey) => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  mainPurseUnderPublicKey?: PublicKey;\n\n  @jsonMember({\n    constructor: AccountHash,\n    name: 'main_purse_under_account_hash',\n    isRequired: false,\n    deserializer: (json: string) => {\n      if (!json) return;\n      return AccountHash.fromJSON(json);\n    },\n    serializer: (value: AccountHash) => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  mainPurseUnderAccountHash?: AccountHash;\n\n  @jsonMember({\n    constructor: EntityAddr,\n    name: 'main_purse_under_entity_addr',\n    isRequired: false,\n    deserializer: (json: string) => {\n      if (!json) return;\n      return EntityAddr.fromJSON(json);\n    },\n    serializer: (value: EntityAddr) => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  mainPurseUnderEntityAddr?: EntityAddr;\n\n  @jsonMember({\n    constructor: URef,\n    isRequired: false,\n    name: 'purse_uref',\n    deserializer: (json: string) => {\n      if (!json) return;\n      return URef.fromJSON(json);\n    },\n    serializer: (value: URef) => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  purseUref?: URef;\n\n  constructor(\n    mainPurseUnderPublicKey?: PublicKey,\n    mainPurseUnderAccountHash?: AccountHash,\n    mainPurseUnderEntityAddr?: EntityAddr,\n    purseUref?: URef\n  ) {\n    this.mainPurseUnderPublicKey = mainPurseUnderPublicKey;\n    this.mainPurseUnderAccountHash = mainPurseUnderAccountHash;\n    this.mainPurseUnderEntityAddr = mainPurseUnderEntityAddr;\n    this.purseUref = purseUref;\n  }\n\n  static fromPublicKey(pubKey: PublicKey): PurseIdentifier {\n    return new PurseIdentifier(pubKey);\n  }\n\n  static fromAccountHash(accountHash: AccountHash): PurseIdentifier {\n    return new PurseIdentifier(undefined, accountHash);\n  }\n\n  static fromEntityAddr(entityAddr: EntityAddr): PurseIdentifier {\n    return new PurseIdentifier(undefined, undefined, entityAddr);\n  }\n\n  static fromUref(uref: URef): PurseIdentifier {\n    return new PurseIdentifier(undefined, undefined, undefined, uref);\n  }\n}\n\n@jsonObject\nexport class QueryBalanceRequest {\n  @jsonMember({ constructor: PurseIdentifier, name: 'purse_identifier' })\n  purseIdentifier: PurseIdentifier;\n\n  @jsonMember({\n    isRequired: false,\n    constructor: GlobalStateIdentifier,\n    name: 'state_identifier'\n  })\n  stateIdentifier?: GlobalStateIdentifier;\n\n  constructor(\n    purseIdentifier: PurseIdentifier,\n    stateIdentifier?: GlobalStateIdentifier\n  ) {\n    this.purseIdentifier = purseIdentifier;\n    this.stateIdentifier = stateIdentifier;\n  }\n}\n\n@jsonObject\nexport class QueryBalanceDetailsRequest {\n  @jsonMember({ constructor: PurseIdentifier, name: 'purse_identifier' })\n  purseIdentifier: PurseIdentifier;\n\n  @jsonMember({\n    isRequired: false,\n    constructor: GlobalStateIdentifier,\n    name: 'state_identifier'\n  })\n  stateIdentifier?: GlobalStateIdentifier;\n\n  constructor(\n    purseIdentifier: PurseIdentifier,\n    stateIdentifier?: GlobalStateIdentifier\n  ) {\n    this.purseIdentifier = purseIdentifier;\n    this.stateIdentifier = stateIdentifier;\n  }\n}\n\n@jsonObject\nexport class InfoGetRewardRequest {\n  @jsonMember({\n    constructor: PublicKey,\n    isRequired: false,\n    deserializer: (json: string) => PublicKey.fromJSON(json),\n    serializer: (value: PublicKey) => value.toJSON()\n  })\n  validator: PublicKey;\n\n  @jsonMember({\n    isRequired: false,\n    constructor: PublicKey,\n    deserializer: (json: string) => {\n      if (!json) return;\n      return PublicKey.fromJSON(json);\n    },\n    serializer: (value: PublicKey) => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  delegator?: PublicKey;\n\n  @jsonMember({\n    isRequired: false,\n    constructor: EraIdentifier,\n    name: 'era_identifier'\n  })\n  eraIdentifier?: EraIdentifier;\n\n  constructor(\n    validator: PublicKey,\n    delegator?: PublicKey,\n    eraIdentifier?: EraIdentifier\n  ) {\n    this.validator = validator;\n    this.delegator = delegator;\n    this.eraIdentifier = eraIdentifier;\n  }\n}\n\n@jsonObject\nexport class StateGetBalanceRequest {\n  @jsonMember({ name: 'state_root_hash', constructor: String })\n  stateRootHash: string;\n\n  @jsonMember({ name: 'purse_uref', constructor: String })\n  purseURef?: string;\n\n  constructor(stateRootHash: string, purseURef: string) {\n    this.stateRootHash = stateRootHash;\n    this.purseURef = purseURef;\n  }\n}\n\n@jsonObject\nexport class StateGetDictionaryRequest {\n  @jsonMember({ name: 'state_root_hash', constructor: String })\n  stateRootHash: string;\n\n  @jsonMember({\n    name: 'dictionary_identifier',\n    constructor: ParamDictionaryIdentifier\n  })\n  dictionaryIdentifier?: ParamDictionaryIdentifier;\n\n  constructor(\n    stateRootHash: string,\n    dictionaryIdentifier?: ParamDictionaryIdentifier\n  ) {\n    this.stateRootHash = stateRootHash;\n    this.dictionaryIdentifier = dictionaryIdentifier;\n  }\n}\n","import {\n  AnyT,\n  jsonArrayMember,\n  jsonMember,\n  jsonObject,\n  TypedJSON\n} from 'typedjson';\nimport { IDValue } from './id_value';\nimport { RpcError } from './error';\nimport {\n  AuctionState,\n  Account,\n  EntryPointValue,\n  Block,\n  BlockHeader,\n  BlockHeaderV1,\n  BlockV1,\n  BlockWithSignatures,\n  Transfer,\n  EraSummary,\n  Deploy,\n  DeployExecutionInfo,\n  DeployExecutionResult,\n  ExecutionInfo,\n  ExecutionResult,\n  Transaction,\n  TransactionHash,\n  TransactionWrapper,\n  InitiatorAddr,\n  Timestamp,\n  MinimalBlockInfo,\n  NamedKey,\n  StoredValue,\n  Hash,\n  PublicKey,\n  CLValueUInt512,\n  AuctionStateV1,\n  AuctionStateV2,\n  AddressableEntity\n} from '../types';\n\n@jsonObject\nexport class RpcResponse {\n  @jsonMember({ name: 'jsonrpc', constructor: String })\n  version: string;\n\n  @jsonMember({ constructor: IDValue, name: 'id' })\n  id?: IDValue;\n\n  @jsonMember({ name: 'result', constructor: AnyT })\n  result: any;\n\n  @jsonMember({ name: 'error', constructor: RpcError })\n  error?: RpcError;\n}\n\n@jsonObject\nexport class StateGetAuctionInfoResult {\n  @jsonMember({ name: 'api_version', constructor: String })\n  version: string;\n\n  @jsonMember({ name: 'auction_state', constructor: AuctionState })\n  auctionState: AuctionState;\n\n  rawJSON?: any;\n}\n\n@jsonObject\nexport class StateGetAuctionInfoV1Result {\n  @jsonMember({ name: 'api_version', constructor: String })\n  version: string;\n\n  @jsonMember({ name: 'auction_state', constructor: AuctionStateV1 })\n  auctionState: AuctionStateV1;\n\n  rawJSON?: any;\n}\n\n@jsonObject\nexport class StateGetAuctionInfoV2Result {\n  @jsonMember({ name: 'api_version', constructor: String })\n  version: string;\n\n  @jsonMember({ name: 'auction_state', constructor: AuctionStateV2 })\n  auctionState: AuctionStateV2;\n\n  rawJSON?: any;\n}\n\n@jsonObject\nexport class StateGetBalanceResult {\n  @jsonMember({ name: 'api_version', constructor: String })\n  apiVersion: string;\n\n  @jsonMember({\n    name: 'balance_value',\n    constructor: CLValueUInt512,\n    deserializer: (json: string) => CLValueUInt512.fromJSON(json),\n    serializer: (value: CLValueUInt512) => value.toJSON()\n  })\n  balanceValue: CLValueUInt512;\n\n  public rawJSON: any;\n}\n\n@jsonObject\nexport class StateGetAccountInfo {\n  @jsonMember({ name: 'api_version', constructor: String })\n  apiVersion: string;\n\n  @jsonMember({ name: 'account', constructor: Account })\n  account: Account;\n\n  public rawJSON: any;\n}\n\n@jsonObject\nexport class RpcAddressableEntity {\n  @jsonMember({ name: 'entity', constructor: AddressableEntity })\n  entity: AddressableEntity;\n\n  @jsonArrayMember(NamedKey, { name: 'named_keys' })\n  namedKeys: NamedKey[];\n\n  @jsonArrayMember(EntryPointValue, { name: 'entry_points' })\n  entryPoints?: EntryPointValue[];\n}\n\n@jsonObject\nexport class EntityOrAccount {\n  @jsonMember({\n    name: 'AddressableEntity',\n    constructor: RpcAddressableEntity\n  })\n  addressableEntity?: RpcAddressableEntity;\n\n  @jsonMember({\n    name: 'LegacyAccount',\n    constructor: Account\n  })\n  legacyAccount?: Account;\n}\n\n@jsonObject\nexport class StateGetEntityResult {\n  @jsonMember({ name: 'api_version', constructor: String })\n  apiVersion: string;\n\n  @jsonMember({ name: 'entity', constructor: EntityOrAccount })\n  entity: EntityOrAccount;\n\n  @jsonMember({ name: 'merkle_proof', constructor: AnyT })\n  merkleProof: any;\n\n  public rawJSON: any;\n}\n\n@jsonObject\nexport class ChainGetBlockResultV1Compatible {\n  @jsonMember({ name: 'api_version', constructor: String })\n  apiVersion: string;\n\n  @jsonMember({\n    name: 'block_with_signatures',\n    constructor: BlockWithSignatures\n  })\n  blockWithSignatures?: BlockWithSignatures;\n\n  @jsonMember({ name: 'block', constructor: BlockV1 })\n  blockV1?: BlockV1;\n\n  public rawJSON?: any;\n}\n\n@jsonObject\nexport class ChainGetBlockResult {\n  @jsonMember({ name: 'api_version', constructor: String })\n  public apiVersion: string;\n\n  @jsonMember({ constructor: Block })\n  public block: Block;\n\n  public rawJSON?: any;\n\n  public static fromJSON(data: any): ChainGetBlockResult {\n    const serializer = new TypedJSON(ChainGetBlockResult);\n    const parsedResult = serializer.parse(data);\n\n    if (!parsedResult) throw new Error('Failed to parse ChainGetBlockResult');\n\n    parsedResult.rawJSON = data;\n\n    return parsedResult;\n  }\n\n  public static newChainGetBlockResultFromV1Compatible(\n    result: ChainGetBlockResultV1Compatible,\n    rawJSON: any\n  ): ChainGetBlockResult {\n    const chainGetBlockResult = new ChainGetBlockResult();\n    chainGetBlockResult.apiVersion = result.apiVersion;\n    chainGetBlockResult.rawJSON = rawJSON;\n\n    if (result.blockV1) {\n      chainGetBlockResult.block = Block.newBlockFromBlockV1(result.blockV1);\n    } else if (result.blockWithSignatures) {\n      chainGetBlockResult.block = Block.newBlockFromBlockWrapper(\n        result.blockWithSignatures.block,\n        result.blockWithSignatures.proofs\n      );\n    } else {\n      throw new Error('Incorrect RPC response structure');\n    }\n\n    return chainGetBlockResult;\n  }\n}\n\n@jsonObject\nexport class ChainGetBlockTransfersResult {\n  @jsonMember({ name: 'api_version', constructor: String })\n  public version: string;\n\n  @jsonMember({ name: 'block_hash', constructor: String })\n  public blockHash: string;\n\n  @jsonArrayMember(Transfer, {\n    name: 'transfers',\n    deserializer: (json: any) => json.map((it: string) => Transfer.fromJSON(it))\n  })\n  public transfers: Transfer[];\n\n  public rawJSON?: any;\n}\n\n@jsonObject\nexport class ChainGetEraSummaryResult {\n  @jsonMember({ name: 'api_version', constructor: String })\n  public version: string;\n\n  @jsonMember({ name: 'era_summary', constructor: EraSummary })\n  public eraSummary: EraSummary;\n\n  public rawJSON?: any;\n}\n\n@jsonObject\nexport class InfoGetDeployResult {\n  @jsonMember({ name: 'api_version', constructor: String })\n  apiVersion: string;\n\n  @jsonMember({ name: 'deploy', constructor: Deploy })\n  deploy: Deploy;\n\n  @jsonMember({ name: 'execution_info', constructor: DeployExecutionInfo })\n  executionInfo?: DeployExecutionInfo;\n\n  // Legacy execution results V1\n  @jsonArrayMember(DeployExecutionResult, { name: 'execution_results' })\n  executionResultsV1?: DeployExecutionResult[];\n\n  rawJSON: any;\n\n  /**\n   * Converts the deployment result into a transaction result.\n   * It prefers the newer executionInfo format if available,\n   * otherwise falls back to legacy execution results.\n   */\n  toInfoGetTransactionResult(): InfoGetTransactionResult {\n    let executionInfo: ExecutionInfo;\n\n    if (this.executionInfo) {\n      executionInfo = new ExecutionInfo(\n        this.executionInfo.blockHash,\n        this.executionInfo.blockHeight,\n        this.executionInfo.executionResult\n      );\n    } else if (this.executionResultsV1 && this.executionResultsV1.length > 0) {\n      executionInfo = ExecutionInfo.fromV1(this.executionResultsV1);\n    } else {\n      throw new Error('Invalid Execution Info');\n    }\n\n    return new InfoGetTransactionResult(\n      this.apiVersion,\n      Deploy.newTransactionFromDeploy(this.deploy),\n      executionInfo,\n      this.rawJSON\n    );\n  }\n}\n\n@jsonObject\nexport class InfoGetTransactionResult {\n  @jsonMember({ name: 'api_version', constructor: String })\n  apiVersion: string;\n\n  @jsonMember({\n    constructor: Transaction,\n    deserializer: json => {\n      if (!json) return;\n      return Transaction.fromJSON(json);\n    }\n  })\n  transaction: Transaction;\n\n  @jsonMember({ name: 'execution_info', constructor: ExecutionInfo })\n  executionInfo?: ExecutionInfo;\n\n  public rawJSON: any;\n\n  constructor(\n    apiVersion: string,\n    transaction: Transaction,\n    executionInfo?: ExecutionInfo,\n    rawJSON = ''\n  ) {\n    this.apiVersion = apiVersion;\n    this.transaction = transaction;\n    this.executionInfo = executionInfo;\n    this.rawJSON = rawJSON;\n  }\n\n  static fromJSON(json: any): InfoGetTransactionResult | null {\n    const serializer = new TypedJSON(InfoGetTransactionResultV1Compatible);\n    const temp = serializer.parse(json);\n\n    if (temp) {\n      const result = InfoGetTransactionResultV1Compatible.newInfoGetTransactionResultFromV1Compatible(\n        temp,\n        json\n      );\n      return result;\n    }\n\n    const transactionResultSerializer = new TypedJSON(InfoGetTransactionResult);\n    return transactionResultSerializer.parse(json) ?? null;\n  }\n}\n\n@jsonObject\nexport class InfoGetDeployResultV1Compatible {\n  @jsonMember({ name: 'api_version', constructor: String })\n  apiVersion: string;\n\n  @jsonMember({ constructor: Deploy })\n  deploy: Deploy;\n\n  @jsonArrayMember(DeployExecutionResult, { name: 'execution_results' })\n  executionResults: DeployExecutionResult[];\n\n  @jsonMember({\n    name: 'block_hash',\n    constructor: Hash,\n    deserializer: json => {\n      if (!json) return;\n      return Hash.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  blockHash?: Hash;\n\n  @jsonMember({ name: 'block_height', constructor: Number })\n  blockHeight?: number;\n\n  public rawJSON: any;\n\n  public static fromJSON(\n    json: any\n  ): InfoGetDeployResultV1Compatible | undefined {\n    const serializer = new TypedJSON(InfoGetDeployResultV1Compatible);\n    return serializer.parse(json);\n  }\n}\n\n@jsonObject\nexport class InfoGetTransactionResultV1Compatible {\n  @jsonMember({ name: 'api_version', constructor: String })\n  apiVersion: string;\n\n  @jsonMember({ constructor: TransactionWrapper })\n  transaction?: TransactionWrapper;\n\n  @jsonMember({ constructor: Deploy })\n  deploy?: Deploy;\n\n  @jsonMember({ constructor: ExecutionInfo, name: 'execution_info' })\n  executionInfo?: ExecutionInfo;\n\n  @jsonArrayMember(DeployExecutionResult, { name: 'execution_results' })\n  executionResults: DeployExecutionResult[] = [];\n\n  @jsonMember({\n    constructor: Hash,\n    name: 'block_hash',\n    deserializer: json => {\n      if (!json) return;\n      return Hash.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  blockHash?: Hash;\n\n  @jsonMember({ constructor: Number, name: 'block_height' })\n  blockHeight?: number;\n\n  rawJSON?: any;\n\n  public static newInfoGetTransactionResultFromV1Compatible(\n    parsedResult: InfoGetTransactionResultV1Compatible,\n    rawJSON: any\n  ): InfoGetTransactionResult {\n    if (parsedResult.transaction) {\n      if (parsedResult.transaction.transactionV1) {\n        return new InfoGetTransactionResult(\n          parsedResult.apiVersion,\n          Transaction.fromTransactionV1(parsedResult.transaction.transactionV1),\n          parsedResult.executionInfo,\n          rawJSON\n        );\n      }\n\n      if (parsedResult.transaction.deploy) {\n        const transaction = Deploy.newTransactionFromDeploy(\n          parsedResult.transaction.deploy\n        );\n        const info = new InfoGetTransactionResult(\n          parsedResult.apiVersion,\n          transaction,\n          parsedResult.executionInfo,\n          rawJSON\n        );\n\n        if (parsedResult.executionResults.length > 0) {\n          const executionInfo = ExecutionInfo.fromV1(\n            parsedResult.executionResults,\n            parsedResult.blockHeight\n          );\n          executionInfo.executionResult.initiator = new InitiatorAddr(\n            parsedResult.deploy!.header.account\n          );\n          info.executionInfo = executionInfo;\n        }\n        return info;\n      }\n    }\n\n    if (parsedResult.deploy) {\n      const transaction = Deploy.newTransactionFromDeploy(parsedResult.deploy);\n      const info = new InfoGetTransactionResult(\n        parsedResult.apiVersion,\n        transaction,\n        parsedResult.executionInfo,\n        rawJSON\n      );\n\n      if (parsedResult.executionResults.length > 0) {\n        const executionInfo = ExecutionInfo.fromV1(\n          parsedResult.executionResults,\n          parsedResult.blockHeight\n        );\n        executionInfo.executionResult.initiator = new InitiatorAddr(\n          parsedResult.deploy.header.account\n        );\n        info.executionInfo = executionInfo;\n      }\n      return info;\n    }\n    throw new Error('Incorrect RPC response structure');\n  }\n\n  public static fromJSON(\n    json: any\n  ): InfoGetTransactionResultV1Compatible | undefined {\n    const serializer = new TypedJSON(InfoGetTransactionResultV1Compatible);\n    return serializer.parse(json);\n  }\n}\n\n@jsonObject\nexport class ChainGetEraInfoResult {\n  @jsonMember({ name: 'api_version', constructor: String })\n  version: string;\n\n  @jsonMember({ name: 'era_summary', constructor: EraSummary })\n  eraSummary: EraSummary;\n\n  public rawJSON: any;\n}\n\n@jsonObject\nexport class StateGetItemResult {\n  @jsonMember({ name: 'stored_value', constructor: StoredValue })\n  storedValue: StoredValue;\n\n  @jsonMember({ name: 'merkle_proof', constructor: String })\n  merkleProof: string;\n\n  public rawJSON: any;\n}\n\n@jsonObject\nexport class StateGetDictionaryResult {\n  @jsonMember({ name: 'api_version', constructor: String })\n  apiVersion: string;\n\n  @jsonMember({ name: 'dictionary_key', constructor: String })\n  dictionaryKey: string;\n\n  @jsonMember({ name: 'stored_value', constructor: StoredValue })\n  storedValue: StoredValue;\n\n  @jsonMember({ name: 'merkle_proof', constructor: String })\n  merkleProof: string;\n\n  public rawJSON: any;\n}\n\n@jsonObject\nexport class QueryGlobalStateResult {\n  @jsonMember({ name: 'api_version', constructor: String })\n  apiVersion: string;\n\n  @jsonMember({ name: 'block_header', constructor: BlockHeader })\n  blockHeader?: BlockHeader;\n\n  @jsonMember({ name: 'stored_value', constructor: StoredValue })\n  storedValue: StoredValue;\n\n  @jsonMember({ name: 'merkle_proof', constructor: String })\n  merkleProof: string;\n\n  public rawJSON?: any;\n}\n\n@jsonObject\nexport class InfoGetPeerResult {\n  @jsonMember({ name: 'api_version', constructor: String })\n  apiVersion: string;\n\n  @jsonArrayMember(() => NodePeer, { name: 'peers' })\n  peers: NodePeer[];\n\n  rawJSON?: any;\n}\n\n@jsonObject\nexport class NodePeer {\n  @jsonMember({ name: 'node_id', constructor: String })\n  nodeId: string;\n\n  @jsonMember({ name: 'address', constructor: String })\n  address: string;\n}\n\n@jsonObject\nexport class ChainGetStateRootHashResult {\n  @jsonMember({ name: 'api_version', constructor: String })\n  version: string;\n\n  @jsonMember({\n    name: 'state_root_hash',\n    constructor: Hash,\n    deserializer: json => {\n      if (!json) return;\n      return Hash.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  stateRootHash: Hash;\n\n  rawJSON?: any;\n}\n\nexport enum ValidatorState {\n  Added = 'Added',\n  Removed = 'Removed',\n  Banned = 'Banned',\n  CannotPropose = 'CannotPropose',\n  SeenAsFaulty = 'SeenAsFaulty'\n}\n\n@jsonObject\nexport class StatusChanges {\n  @jsonMember({ name: 'era_id', constructor: Number })\n  eraID: number;\n\n  @jsonMember({ name: 'validator_change', constructor: String })\n  validatorState: ValidatorState;\n\n  rawJSON: any;\n}\n\n@jsonObject\nexport class ValidatorChanges {\n  @jsonMember({\n    name: 'public_key',\n    constructor: PublicKey,\n    deserializer: json => {\n      if (!json) return;\n      return PublicKey.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  publicKey: PublicKey;\n\n  @jsonArrayMember(StatusChanges, { name: 'status_changes' })\n  statusChanges: StatusChanges[];\n\n  rawJSON: any;\n}\n\n@jsonObject\nexport class InfoGetValidatorChangesResult {\n  @jsonMember({ name: 'api_version', constructor: String })\n  apiVersion: string;\n\n  @jsonArrayMember(ValidatorChanges, { name: 'changes' })\n  changes: ValidatorChanges[];\n\n  rawJSON: any;\n}\n\n@jsonObject\nexport class NodeNextUpgrade {\n  @jsonMember({ name: 'activation_point', constructor: Number })\n  activationPoint: number;\n\n  @jsonMember({ name: 'protocol_version', constructor: String })\n  protocolVersion: string;\n}\n\n@jsonObject\nexport class BlockSyncStatus {\n  @jsonMember({\n    name: 'block_hash',\n    constructor: Hash,\n    deserializer: json => {\n      if (!json) return;\n      return Hash.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    },\n    preserveNull: true\n  })\n  blockHash?: Hash;\n\n  @jsonMember({ name: 'block_height', constructor: Number, preserveNull: true })\n  blockHeight?: number;\n\n  @jsonMember({ name: 'acquisition_state', constructor: String })\n  acquisitionState?: string;\n}\n\n@jsonObject\nexport class BlockSynchronizerStatus {\n  @jsonMember({ name: 'historical', constructor: BlockSyncStatus })\n  historical?: BlockSyncStatus;\n\n  @jsonMember({ name: 'forward', constructor: BlockSyncStatus })\n  forward?: BlockSyncStatus;\n}\n\n@jsonObject\nexport class InfoGetStatusResult {\n  @jsonMember({ name: 'api_version', constructor: String })\n  apiVersion: string;\n\n  @jsonMember({ name: 'protocol_version', constructor: String })\n  protocolVersion: string;\n\n  @jsonMember({ name: 'build_version', constructor: String })\n  buildVersion: string;\n\n  @jsonMember({ name: 'chainspec_name', constructor: String })\n  chainSpecName: string;\n\n  @jsonMember({ name: 'last_added_block_info', constructor: MinimalBlockInfo })\n  lastAddedBlockInfo: MinimalBlockInfo;\n\n  @jsonMember({ name: 'next_upgrade', constructor: NodeNextUpgrade })\n  nextUpgrade?: NodeNextUpgrade;\n\n  @jsonMember({ name: 'our_public_signing_key', constructor: String })\n  ourPublicSigningKey: string;\n\n  @jsonArrayMember(NodePeer, { name: 'peers' })\n  peers: NodePeer[];\n\n  @jsonMember({ name: 'round_length', constructor: String })\n  roundLength: string;\n\n  @jsonMember({ name: 'starting_state_root_hash', constructor: String })\n  startingStateRootHash: string;\n\n  @jsonMember({ name: 'uptime', constructor: String })\n  uptime: string;\n\n  @jsonMember({ name: 'reactor_state', constructor: String })\n  reactorState: string;\n\n  @jsonMember({\n    name: 'last_progress',\n    constructor: Timestamp,\n    deserializer: json => {\n      if (!json) return;\n      return Timestamp.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  lastProgress: Timestamp;\n\n  @jsonMember({\n    name: 'latest_switch_block_hash',\n    constructor: Hash,\n    deserializer: json => {\n      if (!json) return;\n      return Hash.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  latestSwitchBlockHash: Hash;\n\n  @jsonMember({\n    name: 'available_block_range',\n    constructor: () => ({\n      low: jsonMember({ name: 'low', constructor: Number }),\n      high: jsonMember({ name: 'high', constructor: Number })\n    })\n  })\n  availableBlockRange: { low: number; high: number };\n\n  @jsonMember({\n    name: 'block_sync',\n    constructor: BlockSynchronizerStatus\n  })\n  blockSync: BlockSynchronizerStatus;\n\n  rawJSON: any;\n}\n\n@jsonObject\nexport class PutDeployResult {\n  @jsonMember({ name: 'api_version', constructor: String })\n  apiVersion: string;\n\n  @jsonMember({\n    name: 'deploy_hash',\n    constructor: Hash,\n    deserializer: json => {\n      if (!json) return;\n      return Hash.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  deployHash: Hash;\n\n  rawJSON?: any;\n}\n\n@jsonObject\nexport class PutTransactionResult {\n  @jsonMember({ name: 'api_version', constructor: String })\n  apiVersion: string;\n\n  @jsonMember({ name: 'transaction_hash', constructor: TransactionHash })\n  transactionHash: TransactionHash;\n\n  rawJSON?: any;\n}\n\n@jsonObject\nexport class SpeculativeExecResult {\n  @jsonMember({ name: 'api_version', constructor: String })\n  apiVersion: string;\n\n  @jsonMember({\n    name: 'block_hash',\n    constructor: Hash,\n    deserializer: json => {\n      if (!json) return;\n      return Hash.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  blockHash: Hash;\n\n  @jsonMember({ name: 'execution_result', constructor: ExecutionResult })\n  executionResult: ExecutionResult;\n\n  rawJSON?: any;\n}\n\n@jsonObject\nexport class QueryBalanceResult {\n  @jsonMember({ name: 'api_version', constructor: String })\n  apiVersion: string;\n\n  @jsonMember({\n    name: 'balance',\n    constructor: CLValueUInt512,\n    deserializer: json => {\n      if (!json) return;\n      return CLValueUInt512.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  balance: CLValueUInt512;\n\n  rawJSON?: any;\n}\n\n@jsonObject\nexport class QueryBalanceDetailsResult {\n  @jsonMember({ name: 'api_version', constructor: String })\n  apiVersion: string;\n\n  @jsonMember({\n    name: 'total_balance',\n    constructor: CLValueUInt512,\n    deserializer: json => {\n      if (!json) return;\n      return CLValueUInt512.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  totalBalance: CLValueUInt512;\n\n  @jsonMember({\n    name: 'available_balance',\n    constructor: CLValueUInt512,\n    deserializer: json => {\n      if (!json) return;\n      return CLValueUInt512.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  availableBalance: CLValueUInt512;\n\n  @jsonMember({ name: 'total_balance_proof', constructor: String })\n  totalBalanceProof: string;\n\n  @jsonArrayMember(() => BalanceHoldWithProof, { name: 'holds' })\n  holds: BalanceHoldWithProof[];\n\n  rawJSON?: any;\n}\n\n@jsonObject\nexport class InfoGetRewardResult {\n  @jsonMember({ name: 'api_version', constructor: String })\n  apiVersion: string;\n\n  @jsonMember({ name: 'delegation_rate', constructor: Number })\n  delegationRate: number;\n\n  @jsonMember({ name: 'era_id', constructor: Number })\n  eraID: number;\n\n  @jsonMember({\n    name: 'reward_amount',\n    constructor: CLValueUInt512,\n    deserializer: json => {\n      if (!json) return;\n      return CLValueUInt512.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  rewardAmount: CLValueUInt512;\n\n  @jsonMember({\n    name: 'switch_block_hash',\n    constructor: Hash,\n    deserializer: json => {\n      if (!json) return;\n      return Hash.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  switchBlockHash: Hash;\n\n  rawJSON?: any;\n}\n\n@jsonObject\nexport class BalanceHoldWithProof {\n  @jsonMember({\n    name: 'amount',\n    constructor: CLValueUInt512,\n    deserializer: json => {\n      if (!json) return;\n      return CLValueUInt512.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  amount: CLValueUInt512;\n\n  @jsonMember({ name: 'proof', constructor: String })\n  proof: string;\n}\n\n@jsonObject\nclass ChainspecBytes {\n  @jsonMember({ name: 'chainspec_bytes', constructor: String })\n  chainspecBytes?: string;\n\n  @jsonMember({ name: 'maybe_genesis_accounts_bytes', constructor: String })\n  maybeGenesisAccountsBytes?: string;\n\n  @jsonMember({ name: 'maybe_global_state_bytes', constructor: String })\n  maybeGlobalStateBytes?: string;\n}\n\n@jsonObject\nexport class InfoGetChainspecResult {\n  @jsonMember({ name: 'api_version', constructor: String })\n  apiVersion: string;\n\n  @jsonMember({ name: 'chainspec_bytes', constructor: ChainspecBytes })\n  chainspecBytes: ChainspecBytes;\n\n  rawJSON?: any;\n}\n\n@jsonObject\nexport class QueryGlobalStateResultV1Compatible {\n  @jsonMember({ name: 'api_version', constructor: String })\n  apiVersion: string;\n\n  @jsonMember({ name: 'block_header', constructor: BlockHeaderV1 })\n  blockHeader?: BlockHeaderV1;\n\n  @jsonMember({ name: 'stored_value', constructor: StoredValue })\n  storedValue: StoredValue;\n\n  @jsonMember({ name: 'merkle_proof', constructor: String })\n  merkleProof: string;\n}\n","import { TypedJSON } from 'typedjson';\n\nimport { IClient, IHandler } from './client';\nimport {\n  ChainGetBlockResult,\n  ChainGetBlockResultV1Compatible,\n  ChainGetBlockTransfersResult,\n  ChainGetEraInfoResult,\n  ChainGetEraSummaryResult,\n  ChainGetStateRootHashResult,\n  InfoGetChainspecResult,\n  InfoGetDeployResult,\n  InfoGetPeerResult,\n  InfoGetRewardResult,\n  InfoGetStatusResult,\n  InfoGetTransactionResult,\n  InfoGetTransactionResultV1Compatible,\n  InfoGetValidatorChangesResult,\n  PutDeployResult,\n  PutTransactionResult,\n  QueryBalanceDetailsResult,\n  QueryBalanceResult,\n  QueryGlobalStateResult,\n  RpcResponse,\n  StateGetAccountInfo,\n  StateGetAuctionInfoResult,\n  StateGetAuctionInfoV1Result,\n  StateGetAuctionInfoV2Result,\n  StateGetBalanceResult,\n  StateGetDictionaryResult,\n  StateGetEntityResult,\n  StateGetItemResult\n} from './response';\nimport {\n  AccountIdentifier,\n  BlockIdentifier,\n  EntityIdentifier,\n  EraIdentifier,\n  GlobalStateIdentifier,\n  InfoGetRewardRequest,\n  Method,\n  ParamBlockIdentifier,\n  ParamDeployHash,\n  ParamDictionaryIdentifier,\n  ParamDictionaryIdentifierURef,\n  ParamGetAccountInfoBalance,\n  ParamGetStateEntity,\n  ParamQueryGlobalState,\n  ParamStateRootHash,\n  ParamTransactionHash,\n  PurseIdentifier,\n  PutDeployRequest,\n  PutTransactionRequest,\n  QueryBalanceDetailsRequest,\n  QueryBalanceRequest,\n  RpcRequest,\n  StateGetBalanceRequest,\n  StateGetDictionaryRequest\n} from './request';\nimport { IDValue } from './id_value';\nimport {\n  TransactionHash,\n  Deploy,\n  PublicKey,\n  Hash,\n  Transaction,\n  AuctionState\n} from '../types';\nimport { HttpError } from './error';\nimport { sleep } from '../utils';\n\nexport class RpcClient implements IClient {\n  private handler: IHandler;\n\n  constructor(handler: IHandler) {\n    this.handler = handler;\n  }\n\n  async getDeploy(hash: string): Promise<InfoGetDeployResult> {\n    const serializer = new TypedJSON(ParamDeployHash);\n    const paramDeployHash = new ParamDeployHash(hash);\n\n    const resp = await this.processRequest(\n      Method.GetDeploy,\n      serializer.toPlainJson(paramDeployHash)\n    );\n\n    const result = this.parseResponse(InfoGetDeployResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getDeployFinalizedApproval(hash: string): Promise<InfoGetDeployResult> {\n    const serializer = new TypedJSON(ParamDeployHash);\n    const paramDeployHash = new ParamDeployHash(hash, true);\n\n    const resp = await this.processRequest(\n      Method.GetDeploy,\n      serializer.toPlainJson(paramDeployHash)\n    );\n\n    const result = this.parseResponse(InfoGetDeployResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getTransactionByTransactionHash(\n    transactionHash: string\n  ): Promise<InfoGetTransactionResult> {\n    const serializer = new TypedJSON(ParamTransactionHash);\n    const hash = Hash.fromHex(transactionHash);\n    const transactionHashParam = new ParamTransactionHash(\n      new TransactionHash(undefined, hash)\n    );\n\n    const resp = await this.processRequest<ParamTransactionHash>(\n      Method.GetTransaction,\n      serializer.toPlainJson(transactionHashParam) as ParamTransactionHash\n    );\n\n    const result = this.parseResponse(\n      InfoGetTransactionResultV1Compatible,\n      resp.result\n    );\n    result.rawJSON = resp.result;\n\n    const txResult = InfoGetTransactionResultV1Compatible.newInfoGetTransactionResultFromV1Compatible(\n      result,\n      result.rawJSON\n    );\n    txResult.rawJSON = resp.result;\n\n    return txResult;\n  }\n\n  async getTransactionByDeployHash(\n    deployHash: string\n  ): Promise<InfoGetTransactionResult> {\n    const serializer = new TypedJSON(ParamTransactionHash);\n    const hash = Hash.fromHex(deployHash);\n    const transactionHashParam = new ParamTransactionHash(\n      new TransactionHash(hash)\n    );\n\n    const resp = await this.processRequest<ParamTransactionHash>(\n      Method.GetTransaction,\n      serializer.toPlainJson(transactionHashParam) as ParamTransactionHash\n    );\n\n    const result = this.parseResponse(\n      InfoGetTransactionResultV1Compatible,\n      resp.result\n    );\n    result.rawJSON = resp.result;\n\n    const txResult = InfoGetTransactionResultV1Compatible.newInfoGetTransactionResultFromV1Compatible(\n      result,\n      result.rawJSON\n    );\n    txResult.rawJSON = resp.result;\n\n    return txResult;\n  }\n\n  async getTransactionFinalizedApprovalByTransactionHash(\n    transactionHash: string\n  ): Promise<InfoGetTransactionResult> {\n    const serializer = new TypedJSON(ParamTransactionHash);\n    const hash = Hash.fromHex(transactionHash);\n    const transactionHashParam = new ParamTransactionHash(\n      new TransactionHash(undefined, hash),\n      true\n    );\n\n    const resp = await this.processRequest<ParamTransactionHash>(\n      Method.GetTransaction,\n      serializer.toPlainJson(transactionHashParam) as ParamTransactionHash\n    );\n\n    const result = this.parseResponse(\n      InfoGetTransactionResultV1Compatible,\n      resp.result\n    );\n    result.rawJSON = resp.result;\n\n    const txResult = InfoGetTransactionResultV1Compatible.newInfoGetTransactionResultFromV1Compatible(\n      result,\n      result.rawJSON\n    );\n    txResult.rawJSON = resp.result;\n\n    return txResult;\n  }\n\n  async getTransactionFinalizedApprovalByDeployHash(\n    deployHash: string\n  ): Promise<InfoGetTransactionResult> {\n    const serializer = new TypedJSON(ParamTransactionHash);\n    const hash = Hash.fromHex(deployHash);\n    const transactionHashParam = new ParamTransactionHash(\n      new TransactionHash(hash),\n      true\n    );\n\n    const resp = await this.processRequest<ParamTransactionHash>(\n      Method.GetTransaction,\n      serializer.toPlainJson(transactionHashParam) as ParamTransactionHash\n    );\n\n    const result = this.parseResponse(\n      InfoGetTransactionResultV1Compatible,\n      resp.result\n    );\n    result.rawJSON = resp.result;\n\n    const txResult = InfoGetTransactionResultV1Compatible.newInfoGetTransactionResultFromV1Compatible(\n      result,\n      result.rawJSON\n    );\n    txResult.rawJSON = resp.result;\n\n    return txResult;\n  }\n\n  async getStateItem(\n    stateRootHash: string | null,\n    key: string,\n    path: string[]\n  ): Promise<StateGetItemResult> {\n    let rootHash = stateRootHash;\n\n    if (!rootHash) {\n      const latestHashResult = await this.getStateRootHashLatest();\n      rootHash = latestHashResult.stateRootHash.toHex();\n    }\n\n    const serializer = new TypedJSON(ParamStateRootHash);\n    const stateRootHashParam = new ParamStateRootHash(rootHash, key, path);\n\n    const resp = await this.processRequest<ParamStateRootHash>(\n      Method.GetStateItem,\n      serializer.toPlainJson(stateRootHashParam) as ParamStateRootHash\n    );\n\n    const result = this.parseResponse(StateGetItemResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async queryLatestGlobalState(\n    key: string,\n    path: string[]\n  ): Promise<QueryGlobalStateResult> {\n    const serializer = new TypedJSON(ParamQueryGlobalState);\n    const queryGlobalStateParam = ParamQueryGlobalState.newQueryGlobalStateParam(\n      key,\n      path\n    );\n\n    const resp = await this.processRequest(\n      Method.QueryGlobalState,\n      serializer.toPlainJson(queryGlobalStateParam) as ParamQueryGlobalState\n    );\n\n    const result = this.parseResponse(QueryGlobalStateResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async queryGlobalStateByBlockHash(\n    blockHash: string,\n    key: string,\n    path: string[]\n  ): Promise<QueryGlobalStateResult> {\n    const serializer = new TypedJSON(ParamQueryGlobalState);\n    const queryGlobalStateParam = ParamQueryGlobalState.newQueryGlobalStateParam(\n      key,\n      path,\n      { blockHash }\n    );\n\n    const resp = await this.processRequest(\n      Method.QueryGlobalState,\n      serializer.toPlainJson(queryGlobalStateParam) as ParamQueryGlobalState\n    );\n\n    const result = this.parseResponse(QueryGlobalStateResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async queryGlobalStateByBlockHeight(\n    blockHeight: number,\n    key: string,\n    path: string[]\n  ): Promise<QueryGlobalStateResult> {\n    const serializer = new TypedJSON(ParamQueryGlobalState);\n    const queryGlobalStateParam = ParamQueryGlobalState.newQueryGlobalStateParam(\n      key,\n      path,\n      { blockHeight }\n    );\n\n    const resp = await this.processRequest(\n      Method.QueryGlobalState,\n      serializer.toPlainJson(queryGlobalStateParam) as ParamQueryGlobalState\n    );\n\n    const result = this.parseResponse(QueryGlobalStateResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async queryGlobalStateByStateHash(\n    stateRootHash: string | null,\n    key: string,\n    path: string[]\n  ): Promise<QueryGlobalStateResult> {\n    const serializer = new TypedJSON(ParamQueryGlobalState);\n    let resp: RpcResponse;\n\n    if (!stateRootHash) {\n      const queryGlobalStateParamWithoutRootHash = ParamQueryGlobalState.newQueryGlobalStateParam(\n        key,\n        path\n      );\n      resp = await this.processRequest(\n        Method.QueryGlobalState,\n        serializer.toPlainJson(\n          queryGlobalStateParamWithoutRootHash\n        ) as ParamQueryGlobalState\n      );\n    } else {\n      const queryGlobalState = ParamQueryGlobalState.newQueryGlobalStateParam(\n        key,\n        path,\n        {\n          stateRootHash\n        }\n      );\n      resp = await this.processRequest(\n        Method.QueryGlobalState,\n        serializer.toPlainJson(queryGlobalState) as ParamQueryGlobalState\n      );\n    }\n\n    const result = this.parseResponse(QueryGlobalStateResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getLatestEntity(\n    entityIdentifier: EntityIdentifier\n  ): Promise<StateGetEntityResult> {\n    const serializer = new TypedJSON(ParamGetStateEntity);\n    const getStateEntityParam = new ParamGetStateEntity(entityIdentifier);\n\n    const resp = await this.processRequest<ParamGetStateEntity>(\n      Method.GetStateEntity,\n      serializer.toPlainJson(getStateEntityParam) as ParamGetStateEntity\n    );\n\n    const result = this.parseResponse(StateGetEntityResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getEntityByBlockHash(\n    entityIdentifier: EntityIdentifier,\n    hash: string\n  ): Promise<StateGetEntityResult> {\n    const serializer = new TypedJSON(ParamGetStateEntity);\n    const getStateEntityParam = new ParamGetStateEntity(\n      entityIdentifier,\n      new BlockIdentifier(hash)\n    );\n\n    const resp = await this.processRequest<ParamGetStateEntity>(\n      Method.GetStateEntity,\n      serializer.toPlainJson(getStateEntityParam) as ParamGetStateEntity\n    );\n\n    const result = this.parseResponse(StateGetEntityResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getEntityByBlockHeight(\n    entityIdentifier: EntityIdentifier,\n    height: number\n  ): Promise<StateGetEntityResult> {\n    const serializer = new TypedJSON(ParamGetStateEntity);\n    const getStateEntityParam = new ParamGetStateEntity(\n      entityIdentifier,\n      new BlockIdentifier(undefined, height)\n    );\n\n    const resp = await this.processRequest<ParamGetStateEntity>(\n      Method.GetStateEntity,\n      serializer.toPlainJson(getStateEntityParam) as ParamGetStateEntity\n    );\n\n    const result = this.parseResponse(StateGetEntityResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getAccountInfoByBlockHash(\n    blockHash: string,\n    pub: PublicKey\n  ): Promise<StateGetAccountInfo> {\n    const accountInfoBalance = new ParamGetAccountInfoBalance(\n      pub.toHex(),\n      ParamBlockIdentifier.byHash(blockHash)\n    );\n\n    const resp = await this.processRequest<ParamGetAccountInfoBalance>(\n      Method.GetStateAccount,\n      accountInfoBalance.toJSON() as ParamGetAccountInfoBalance\n    );\n\n    const result = this.parseResponse(StateGetAccountInfo, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getAccountInfoByBlockHeight(\n    blockHeight: number,\n    pub: PublicKey\n  ): Promise<StateGetAccountInfo> {\n    const accountInfoBalance = new ParamGetAccountInfoBalance(\n      pub.toHex(),\n      ParamBlockIdentifier.byHeight(blockHeight)\n    );\n\n    const resp = await this.processRequest<ParamGetAccountInfoBalance>(\n      Method.GetStateAccount,\n      accountInfoBalance.toJSON() as ParamGetAccountInfoBalance\n    );\n\n    const result = this.parseResponse(StateGetAccountInfo, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getAccountInfo(\n    blockIdentifier: ParamBlockIdentifier | null,\n    accountIdentifier: AccountIdentifier\n  ): Promise<StateGetAccountInfo> {\n    let identifier = blockIdentifier;\n\n    if (!identifier) {\n      identifier = new ParamBlockIdentifier();\n    }\n\n    let accountParam: string;\n\n    if (accountIdentifier.accountHash) {\n      accountParam = accountIdentifier.accountHash.toPrefixedString();\n    } else if (accountIdentifier.publicKey) {\n      accountParam = accountIdentifier.publicKey.toHex();\n    } else {\n      throw new Error('account identifier is empty');\n    }\n\n    const accountInfoBalance = new ParamGetAccountInfoBalance(\n      accountParam,\n      identifier\n    );\n\n    const resp = await this.processRequest<ParamGetAccountInfoBalance>(\n      Method.GetStateAccount,\n      accountInfoBalance.toJSON() as ParamGetAccountInfoBalance\n    );\n\n    const result = this.parseResponse(StateGetAccountInfo, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getDictionaryItem(\n    stateRootHash: string | null,\n    uref: string,\n    key: string\n  ): Promise<StateGetDictionaryResult> {\n    return this.getDictionaryItemByIdentifier(\n      stateRootHash,\n      new ParamDictionaryIdentifier(\n        undefined,\n        undefined,\n        new ParamDictionaryIdentifierURef(key, uref)\n      )\n    );\n  }\n\n  async getDictionaryItemByIdentifier(\n    stateRootHash: string | null,\n    identifier: ParamDictionaryIdentifier\n  ): Promise<StateGetDictionaryResult> {\n    const serializer = new TypedJSON(StateGetDictionaryRequest);\n    let rootHash = stateRootHash;\n\n    if (!rootHash) {\n      const latestHashResult = await this.getStateRootHashLatest();\n\n      rootHash = latestHashResult.stateRootHash.toHex();\n    }\n\n    const stateDictionaryParam = new StateGetDictionaryRequest(\n      rootHash,\n      identifier\n    );\n    const resp = await this.processRequest<StateGetDictionaryRequest>(\n      Method.GetDictionaryItem,\n      serializer.toPlainJson(stateDictionaryParam) as StateGetDictionaryRequest\n    );\n\n    const result = this.parseResponse(StateGetDictionaryResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getLatestBalance(purseURef: string): Promise<StateGetBalanceResult> {\n    const serializer = new TypedJSON(StateGetBalanceRequest);\n    const latestHashResult = await this.getStateRootHashLatest();\n    const stateBalance = new StateGetBalanceRequest(\n      latestHashResult.stateRootHash.toHex(),\n      purseURef\n    );\n\n    const resp = await this.processRequest<StateGetBalanceRequest>(\n      Method.GetStateBalance,\n      serializer.toPlainJson(stateBalance) as StateGetBalanceRequest\n    );\n\n    const result = this.parseResponse(StateGetBalanceResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getBalanceByStateRootHash(\n    purseURef: string,\n    stateRootHash: string\n  ): Promise<StateGetBalanceResult> {\n    const serializer = new TypedJSON(StateGetBalanceRequest);\n    const stateBalance = new StateGetBalanceRequest(stateRootHash, purseURef);\n\n    const resp = await this.processRequest<StateGetBalanceRequest>(\n      Method.GetStateBalance,\n      serializer.toPlainJson(stateBalance) as StateGetBalanceRequest\n    );\n\n    const result = this.parseResponse(StateGetBalanceResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getEraInfoLatest(): Promise<ChainGetEraInfoResult> {\n    const resp = await this.processRequest(Method.GetEraInfo, null);\n\n    const result = this.parseResponse(ChainGetEraInfoResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getEraInfoByBlockHeight(\n    height: number\n  ): Promise<ChainGetEraInfoResult> {\n    const serializer = new TypedJSON(ParamBlockIdentifier);\n    const blockIdentifierParam = ParamBlockIdentifier.byHeight(height);\n\n    const resp = await this.processRequest(\n      Method.GetEraInfo,\n      serializer.toPlainJson(blockIdentifierParam) as ParamBlockIdentifier\n    );\n\n    const result = this.parseResponse(ChainGetEraInfoResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getEraInfoByBlockHash(hash: string): Promise<ChainGetEraInfoResult> {\n    const serializer = new TypedJSON(ParamBlockIdentifier);\n    const blockIdentifierParam = ParamBlockIdentifier.byHash(hash);\n\n    const resp = await this.processRequest(\n      Method.GetEraInfo,\n      serializer.toPlainJson(blockIdentifierParam) as ParamBlockIdentifier\n    );\n\n    const result = this.parseResponse(ChainGetEraInfoResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getLatestBlock(): Promise<ChainGetBlockResult> {\n    const resp = await this.processRequest(Method.GetBlock, null);\n\n    const result = this.parseResponse(\n      ChainGetBlockResultV1Compatible,\n      resp.result\n    );\n    result.rawJSON = resp.result;\n\n    const blockResult = ChainGetBlockResult.newChainGetBlockResultFromV1Compatible(\n      result,\n      result.rawJSON\n    );\n    blockResult.rawJSON = result.rawJSON;\n\n    return blockResult;\n  }\n\n  async getBlockByHash(hash: string): Promise<ChainGetBlockResult> {\n    const serializer = new TypedJSON(ParamBlockIdentifier);\n    const blockIdentifierParam = ParamBlockIdentifier.byHash(hash);\n\n    const resp = await this.processRequest(\n      Method.GetBlock,\n      serializer.toPlainJson(blockIdentifierParam) as ParamBlockIdentifier\n    );\n\n    const result = this.parseResponse(\n      ChainGetBlockResultV1Compatible,\n      resp.result\n    );\n    result.rawJSON = resp.result;\n\n    const blockResult = ChainGetBlockResult.newChainGetBlockResultFromV1Compatible(\n      result,\n      result.rawJSON\n    );\n    blockResult.rawJSON = resp.result;\n\n    return blockResult;\n  }\n\n  async getBlockByHeight(height: number): Promise<ChainGetBlockResult> {\n    const serializer = new TypedJSON(ParamBlockIdentifier);\n    const blockIdentifierParam = ParamBlockIdentifier.byHeight(height);\n\n    const resp = await this.processRequest(\n      Method.GetBlock,\n      serializer.toPlainJson(blockIdentifierParam) as ParamBlockIdentifier\n    );\n\n    const result = this.parseResponse(\n      ChainGetBlockResultV1Compatible,\n      resp.result\n    );\n    result.rawJSON = resp.result;\n\n    const blockResult = ChainGetBlockResult.newChainGetBlockResultFromV1Compatible(\n      result,\n      result.rawJSON\n    );\n    blockResult.rawJSON = resp.result;\n\n    return blockResult;\n  }\n\n  async getLatestBlockTransfers(): Promise<ChainGetBlockTransfersResult> {\n    const resp = await this.processRequest(Method.GetBlockTransfers, null);\n\n    const result = this.parseResponse(\n      ChainGetBlockTransfersResult,\n      resp.result\n    );\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getBlockTransfersByHash(\n    blockHash: string\n  ): Promise<ChainGetBlockTransfersResult> {\n    const serializer = new TypedJSON(ParamBlockIdentifier);\n    const blockIdentifierParam = ParamBlockIdentifier.byHash(blockHash);\n\n    const resp = await this.processRequest(\n      Method.GetBlockTransfers,\n      serializer.toPlainJson(blockIdentifierParam) as ParamBlockIdentifier\n    );\n\n    const result = this.parseResponse(\n      ChainGetBlockTransfersResult,\n      resp.result\n    );\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getBlockTransfersByHeight(\n    height: number\n  ): Promise<ChainGetBlockTransfersResult> {\n    const serializer = new TypedJSON(ParamBlockIdentifier);\n    const blockIdentifierParam = ParamBlockIdentifier.byHeight(height);\n\n    const resp = await this.processRequest(\n      Method.GetBlockTransfers,\n      serializer.toPlainJson(blockIdentifierParam) as ParamBlockIdentifier\n    );\n\n    const result = this.parseResponse(\n      ChainGetBlockTransfersResult,\n      resp.result\n    );\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getEraSummaryLatest(): Promise<ChainGetEraSummaryResult> {\n    const resp = await this.processRequest(Method.GetEraSummary, null);\n\n    const result = this.parseResponse(ChainGetEraSummaryResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getEraSummaryByHash(\n    blockHash: string\n  ): Promise<ChainGetEraSummaryResult> {\n    const serializer = new TypedJSON(ParamBlockIdentifier);\n    const blockIdentifierParam = ParamBlockIdentifier.byHash(blockHash);\n\n    const resp = await this.processRequest(\n      Method.GetEraSummary,\n      serializer.toPlainJson(blockIdentifierParam) as ParamBlockIdentifier\n    );\n\n    const result = this.parseResponse(ChainGetEraSummaryResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getEraSummaryByHeight(\n    height: number\n  ): Promise<ChainGetEraSummaryResult> {\n    const serializer = new TypedJSON(ParamBlockIdentifier);\n    const blockIdentifierParam = ParamBlockIdentifier.byHeight(height);\n\n    const resp = await this.processRequest(\n      Method.GetEraSummary,\n      serializer.toPlainJson(blockIdentifierParam) as ParamBlockIdentifier\n    );\n\n    const result = this.parseResponse(ChainGetEraSummaryResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getLatestAuctionInfo(): Promise<StateGetAuctionInfoResult> {\n    try {\n      const auctionInfoV2 = await this.getLatestAuctionInfoV2();\n      const auctionInfoResult = new StateGetAuctionInfoResult();\n      auctionInfoResult.auctionState = AuctionState.fromV2(\n        auctionInfoV2.auctionState\n      );\n      auctionInfoResult.version = auctionInfoV2.version;\n      auctionInfoResult.rawJSON = auctionInfoV2.rawJSON;\n      return auctionInfoResult;\n    } catch (err) {\n      const errorMessage = err?.message || '';\n      if (!errorMessage.includes('Method not found')) {\n        throw err;\n      }\n\n      const auctionInfoV1 = await this.getLatestAuctionInfoV1();\n      const auctionInfoResult = new StateGetAuctionInfoResult();\n      auctionInfoResult.auctionState = AuctionState.fromV1(\n        auctionInfoV1.auctionState\n      );\n      auctionInfoResult.version = auctionInfoV1.version;\n      auctionInfoResult.rawJSON = auctionInfoV1.rawJSON;\n      return auctionInfoResult;\n    }\n  }\n\n  async getLatestAuctionInfoV1(): Promise<StateGetAuctionInfoV1Result> {\n    const resp = await this.processRequest(Method.GetAuctionInfo, null);\n\n    const result = this.parseResponse(StateGetAuctionInfoV1Result, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getLatestAuctionInfoV2(): Promise<StateGetAuctionInfoV2Result> {\n    const resp = await this.processRequest(Method.GetAuctionInfoV2, null);\n\n    const result = this.parseResponse(StateGetAuctionInfoV2Result, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getAuctionInfoByHash(\n    blockHash: string\n  ): Promise<StateGetAuctionInfoResult> {\n    try {\n      const resV2 = await this.getAuctionInfoV2ByHash(blockHash);\n      const result = new StateGetAuctionInfoResult();\n      result.auctionState = AuctionState.fromV2(resV2.auctionState);\n      result.version = resV2.version;\n      result.rawJSON = resV2.rawJSON;\n      return result;\n    } catch (err) {\n      const errorMessage = err?.message || '';\n      if (!errorMessage.includes('Method not found')) {\n        throw err;\n      }\n\n      const resV1 = await this.getAuctionInfoV1ByHash(blockHash);\n      const result = new StateGetAuctionInfoResult();\n      result.auctionState = AuctionState.fromV1(resV1.auctionState);\n      result.version = resV1.version;\n      result.rawJSON = resV1.rawJSON;\n      return result;\n    }\n  }\n\n  async getAuctionInfoV1ByHash(\n    blockHash: string\n  ): Promise<StateGetAuctionInfoV1Result> {\n    const serializer = new TypedJSON(ParamBlockIdentifier);\n    const blockIdentifierParam = ParamBlockIdentifier.byHash(blockHash);\n\n    const resp = await this.processRequest(\n      Method.GetAuctionInfo,\n      serializer.toPlainJson(blockIdentifierParam) as ParamBlockIdentifier\n    );\n\n    const result = this.parseResponse(StateGetAuctionInfoV1Result, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getAuctionInfoV2ByHash(\n    blockHash: string\n  ): Promise<StateGetAuctionInfoV2Result> {\n    const serializer = new TypedJSON(ParamBlockIdentifier);\n    const blockIdentifierParam = ParamBlockIdentifier.byHash(blockHash);\n\n    const resp = await this.processRequest(\n      Method.GetAuctionInfoV2,\n      serializer.toPlainJson(blockIdentifierParam) as ParamBlockIdentifier\n    );\n\n    const result = this.parseResponse(StateGetAuctionInfoV2Result, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getAuctionInfoByHeight(\n    height: number\n  ): Promise<StateGetAuctionInfoResult> {\n    try {\n      const resV2 = await this.getAuctionInfoV2ByHeight(height);\n      const result = new StateGetAuctionInfoResult();\n      result.auctionState = AuctionState.fromV2(resV2.auctionState);\n      result.version = resV2.version;\n      result.rawJSON = resV2.rawJSON;\n      return result;\n    } catch (err) {\n      const errorMessage = err?.message || '';\n      if (!errorMessage.includes('Method not found')) {\n        throw err;\n      }\n\n      const resV1 = await this.getAuctionInfoV1ByHeight(height);\n      const result = new StateGetAuctionInfoResult();\n      result.auctionState = AuctionState.fromV1(resV1.auctionState);\n      result.version = resV1.version;\n      result.rawJSON = resV1.rawJSON;\n      return result;\n    }\n  }\n\n  async getAuctionInfoV1ByHeight(\n    height: number\n  ): Promise<StateGetAuctionInfoV1Result> {\n    const serializer = new TypedJSON(ParamBlockIdentifier);\n    const blockIdentifierParam = ParamBlockIdentifier.byHeight(height);\n\n    const resp = await this.processRequest(\n      Method.GetAuctionInfo,\n      serializer.toPlainJson(blockIdentifierParam) as ParamBlockIdentifier\n    );\n\n    const result = this.parseResponse(StateGetAuctionInfoV1Result, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getAuctionInfoV2ByHeight(\n    height: number\n  ): Promise<StateGetAuctionInfoV2Result> {\n    const serializer = new TypedJSON(ParamBlockIdentifier);\n    const blockIdentifierParam = ParamBlockIdentifier.byHeight(height);\n\n    const resp = await this.processRequest(\n      Method.GetAuctionInfoV2,\n      serializer.toPlainJson(blockIdentifierParam) as ParamBlockIdentifier\n    );\n\n    const result = this.parseResponse(StateGetAuctionInfoV2Result, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getStateRootHashLatest(): Promise<ChainGetStateRootHashResult> {\n    const resp = await this.processRequest(Method.GetStateRootHash, null);\n\n    const result = this.parseResponse(ChainGetStateRootHashResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getStateRootHashByHash(\n    blockHash: string\n  ): Promise<ChainGetStateRootHashResult> {\n    const serializer = new TypedJSON(ParamBlockIdentifier);\n    const blockIdentifierParam = ParamBlockIdentifier.byHash(blockHash);\n\n    const resp = await this.processRequest(\n      Method.GetStateRootHash,\n      serializer.toPlainJson(blockIdentifierParam) as ParamBlockIdentifier\n    );\n\n    const result = this.parseResponse(ChainGetStateRootHashResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getStateRootHashByHeight(\n    height: number\n  ): Promise<ChainGetStateRootHashResult> {\n    const serializer = new TypedJSON(ParamBlockIdentifier);\n    const blockIdentifierParam = ParamBlockIdentifier.byHeight(height);\n\n    const resp = await this.processRequest(\n      Method.GetStateRootHash,\n      serializer.toPlainJson(blockIdentifierParam) as ParamBlockIdentifier\n    );\n\n    const result = this.parseResponse(ChainGetStateRootHashResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getValidatorChangesInfo(): Promise<InfoGetValidatorChangesResult> {\n    const resp = await this.processRequest(Method.GetValidatorChanges, null);\n\n    const result = this.parseResponse(\n      InfoGetValidatorChangesResult,\n      resp.result\n    );\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getStatus(): Promise<InfoGetStatusResult> {\n    const resp = await this.processRequest(Method.GetStatus, null);\n\n    const result = this.parseResponse(InfoGetStatusResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getPeers(): Promise<InfoGetPeerResult> {\n    const resp = await this.processRequest(Method.GetPeers, null);\n\n    const result = this.parseResponse(InfoGetPeerResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async putDeploy(deploy: Deploy): Promise<PutDeployResult> {\n    const serializer = new TypedJSON(PutDeployRequest);\n    const deployRequestParam = new PutDeployRequest(deploy);\n\n    const resp = await this.processRequest<PutDeployRequest>(\n      Method.PutDeploy,\n      serializer.toPlainJson(deployRequestParam) as PutDeployRequest\n    );\n\n    const result = this.parseResponse(PutDeployResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async putTransaction(\n    transaction: Transaction\n  ): Promise<PutTransactionResult> {\n    const serializer = new TypedJSON(PutTransactionRequest);\n    const transactionRequestParam = new PutTransactionRequest(\n      transaction.getTransactionWrapper()\n    );\n\n    const resp = await this.processRequest<PutTransactionRequest>(\n      Method.PutTransaction,\n      serializer.toPlainJson(transactionRequestParam) as PutTransactionRequest\n    );\n\n    const result = this.parseResponse(PutTransactionResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async queryLatestBalance(\n    identifier: PurseIdentifier\n  ): Promise<QueryBalanceResult> {\n    const serializer = new TypedJSON(QueryBalanceRequest);\n    const queryBalanceParam = new QueryBalanceRequest(identifier);\n\n    const resp = await this.processRequest<QueryBalanceRequest>(\n      Method.QueryBalance,\n      serializer.toPlainJson(queryBalanceParam) as QueryBalanceRequest\n    );\n\n    const result = this.parseResponse(QueryBalanceResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async queryBalanceByBlockHeight(\n    purseIdentifier: PurseIdentifier,\n    height: number\n  ): Promise<QueryBalanceResult> {\n    const serializer = new TypedJSON(QueryBalanceRequest);\n    const queryBalanceParam = new QueryBalanceRequest(\n      purseIdentifier,\n      new GlobalStateIdentifier(undefined, height)\n    );\n\n    const resp = await this.processRequest<QueryBalanceRequest>(\n      Method.QueryBalance,\n      serializer.toPlainJson(queryBalanceParam) as QueryBalanceRequest\n    );\n\n    const result = this.parseResponse(QueryBalanceResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async queryBalanceByBlockHash(\n    purseIdentifier: PurseIdentifier,\n    blockHash: string\n  ): Promise<QueryBalanceResult> {\n    const serializer = new TypedJSON(QueryBalanceRequest);\n    const queryBalanceParam = new QueryBalanceRequest(\n      purseIdentifier,\n      new GlobalStateIdentifier(blockHash)\n    );\n\n    const resp = await this.processRequest<QueryBalanceRequest>(\n      Method.QueryBalance,\n      serializer.toPlainJson(queryBalanceParam) as QueryBalanceRequest\n    );\n\n    const result = this.parseResponse(QueryBalanceResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async queryBalanceByStateRootHash(\n    purseIdentifier: PurseIdentifier,\n    stateRootHash: string\n  ): Promise<QueryBalanceResult> {\n    const serializer = new TypedJSON(QueryBalanceRequest);\n    const queryBalanceParam = new QueryBalanceRequest(\n      purseIdentifier,\n      new GlobalStateIdentifier(undefined, undefined, stateRootHash)\n    );\n\n    const resp = await this.processRequest<QueryBalanceRequest>(\n      Method.QueryBalance,\n      serializer.toPlainJson(queryBalanceParam) as QueryBalanceRequest\n    );\n\n    const result = this.parseResponse(QueryBalanceResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async queryLatestBalanceDetails(\n    purseIdentifier: PurseIdentifier\n  ): Promise<QueryBalanceDetailsResult> {\n    const serializer = new TypedJSON(QueryBalanceDetailsRequest);\n    const queryBalanceParam = new QueryBalanceDetailsRequest(purseIdentifier);\n\n    const resp = await this.processRequest<QueryBalanceDetailsRequest>(\n      Method.QueryBalanceDetails,\n      serializer.toPlainJson(queryBalanceParam) as QueryBalanceDetailsRequest\n    );\n\n    const result = this.parseResponse(QueryBalanceDetailsResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async queryBalanceDetailsByStateRootHash(\n    purseIdentifier: PurseIdentifier,\n    stateRootHash: string\n  ): Promise<QueryBalanceDetailsResult> {\n    const serializer = new TypedJSON(QueryBalanceDetailsRequest);\n    const queryBalanceParam = new QueryBalanceDetailsRequest(\n      purseIdentifier,\n      new GlobalStateIdentifier(undefined, undefined, stateRootHash)\n    );\n\n    const resp = await this.processRequest<QueryBalanceDetailsRequest>(\n      Method.QueryBalanceDetails,\n      serializer.toPlainJson(queryBalanceParam) as QueryBalanceDetailsRequest\n    );\n\n    const result = this.parseResponse(QueryBalanceDetailsResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async queryBalanceDetailsByBlockHeight(\n    purseIdentifier: PurseIdentifier,\n    height: number\n  ): Promise<QueryBalanceDetailsResult> {\n    const serializer = new TypedJSON(QueryBalanceDetailsRequest);\n    const queryBalanceParam = new QueryBalanceDetailsRequest(\n      purseIdentifier,\n      new GlobalStateIdentifier(undefined, height)\n    );\n\n    const resp = await this.processRequest<QueryBalanceDetailsRequest>(\n      Method.QueryBalanceDetails,\n      serializer.toPlainJson(queryBalanceParam) as QueryBalanceDetailsRequest\n    );\n\n    const result = this.parseResponse(QueryBalanceDetailsResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async queryBalanceDetailsByBlockHash(\n    purseIdentifier: PurseIdentifier,\n    blockHash: string\n  ): Promise<QueryBalanceDetailsResult> {\n    const serializer = new TypedJSON(QueryBalanceDetailsRequest);\n    const queryBalanceParam = new QueryBalanceDetailsRequest(\n      purseIdentifier,\n      new GlobalStateIdentifier(blockHash)\n    );\n\n    const resp = await this.processRequest<QueryBalanceDetailsRequest>(\n      Method.QueryBalanceDetails,\n      serializer.toPlainJson(queryBalanceParam) as QueryBalanceDetailsRequest\n    );\n\n    const result = this.parseResponse(QueryBalanceDetailsResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getChainspec(): Promise<InfoGetChainspecResult> {\n    const resp = await this.processRequest(Method.InfoGetChainspec, null);\n\n    const result = this.parseResponse(InfoGetChainspecResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getValidatorRewardByEraID(\n    validator: PublicKey,\n    eraID: number\n  ): Promise<InfoGetRewardResult> {\n    const serializer = new TypedJSON(InfoGetRewardRequest);\n    const rewardParam = new InfoGetRewardRequest(\n      validator,\n      undefined,\n      new EraIdentifier(undefined, eraID)\n    );\n\n    const resp = await this.processRequest<InfoGetRewardRequest>(\n      Method.GetReward,\n      serializer.toPlainJson(rewardParam) as InfoGetRewardRequest\n    );\n\n    const result = this.parseResponse(InfoGetRewardResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getValidatorRewardByBlockHash(\n    validator: PublicKey,\n    blockHash: string\n  ): Promise<InfoGetRewardResult> {\n    const serializer = new TypedJSON(InfoGetRewardRequest);\n    const rewardParam = new InfoGetRewardRequest(\n      validator,\n      undefined,\n      new EraIdentifier(new BlockIdentifier(blockHash))\n    );\n\n    const resp = await this.processRequest<InfoGetRewardRequest>(\n      Method.GetReward,\n      serializer.toPlainJson(rewardParam) as InfoGetRewardRequest\n    );\n\n    const result = this.parseResponse(InfoGetRewardResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getValidatorRewardByBlockHeight(\n    validator: PublicKey,\n    height: number\n  ): Promise<InfoGetRewardResult> {\n    const serializer = new TypedJSON(InfoGetRewardRequest);\n    const rewardParam = new InfoGetRewardRequest(\n      validator,\n      undefined,\n      new EraIdentifier(new BlockIdentifier(undefined, height))\n    );\n\n    const resp = await this.processRequest<InfoGetRewardRequest>(\n      Method.GetReward,\n      serializer.toPlainJson(rewardParam) as InfoGetRewardRequest\n    );\n\n    const result = this.parseResponse(InfoGetRewardResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getDelegatorRewardByEraID(\n    validator: PublicKey,\n    delegator: PublicKey,\n    eraID: number\n  ): Promise<InfoGetRewardResult> {\n    const serializer = new TypedJSON(InfoGetRewardRequest);\n    const rewardParam = new InfoGetRewardRequest(\n      validator,\n      delegator,\n      new EraIdentifier(undefined, eraID)\n    );\n\n    const resp = await this.processRequest<InfoGetRewardRequest>(\n      Method.GetReward,\n      serializer.toPlainJson(rewardParam) as InfoGetRewardRequest\n    );\n\n    const result = this.parseResponse(InfoGetRewardResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getDelegatorRewardByBlockHash(\n    validator: PublicKey,\n    delegator: PublicKey,\n    blockHash: string\n  ): Promise<InfoGetRewardResult> {\n    const serializer = new TypedJSON(InfoGetRewardRequest);\n    const rewardParam = new InfoGetRewardRequest(\n      validator,\n      delegator,\n      new EraIdentifier(new BlockIdentifier(blockHash))\n    );\n\n    const resp = await this.processRequest<InfoGetRewardRequest>(\n      Method.GetReward,\n      serializer.toPlainJson(rewardParam) as InfoGetRewardRequest\n    );\n\n    const result = this.parseResponse(InfoGetRewardResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getDelegatorRewardByBlockHeight(\n    validator: PublicKey,\n    delegator: PublicKey,\n    height: number\n  ): Promise<InfoGetRewardResult> {\n    const serializer = new TypedJSON(InfoGetRewardRequest);\n    const rewardParam = new InfoGetRewardRequest(\n      validator,\n      delegator,\n      new EraIdentifier(new BlockIdentifier(undefined, height))\n    );\n\n    const resp = await this.processRequest<InfoGetRewardRequest>(\n      Method.GetReward,\n      serializer.toPlainJson(rewardParam) as InfoGetRewardRequest\n    );\n\n    const result = this.parseResponse(InfoGetRewardResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getLatestValidatorReward(\n    validator: PublicKey\n  ): Promise<InfoGetRewardResult> {\n    const serializer = new TypedJSON(InfoGetRewardRequest);\n    const rewardParam = new InfoGetRewardRequest(validator);\n\n    const resp = await this.processRequest(\n      Method.GetReward,\n      serializer.toPlainJson(rewardParam) as InfoGetRewardRequest\n    );\n\n    const result = this.parseResponse(InfoGetRewardResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  async getLatestDelegatorReward(\n    validator: PublicKey,\n    delegator: PublicKey\n  ): Promise<InfoGetRewardResult> {\n    const serializer = new TypedJSON(InfoGetRewardRequest);\n    const rewardParam = new InfoGetRewardRequest(validator, delegator);\n\n    const resp = await this.processRequest<InfoGetRewardRequest>(\n      Method.GetReward,\n      serializer.toPlainJson(rewardParam) as InfoGetRewardRequest\n    );\n\n    const result = this.parseResponse(InfoGetRewardResult, resp.result);\n    result.rawJSON = resp.result;\n\n    return result;\n  }\n\n  /**\n   * Waits for a transaction to be confirmed within a given timeout period.\n   * Implements a retry mechanism to handle transient errors from the getInfo function.\n   *\n   * @template T - The expected return type of the transaction info.\n   * @param getInfo - A function that fetches transaction info based on its hash.\n   * @param hash - The transaction hash to monitor.\n   * @param timeout - The maximum time (in milliseconds) to wait for confirmation.\n   * @param maxRetries - The maximum number of retries for transient errors.\n   * @param retryDelay - The delay (in milliseconds) between retry attempts.\n   * @returns A promise that resolves with the transaction info if confirmed, otherwise rejects on timeout or persistent errors.\n   * @throws {Error} If the timeout is reached before confirmation or if getInfo fails consistently beyond the allowed retries.\n   */\n  private async waitForConfirmation<T>(\n    getInfo: (hash: string) => Promise<T>,\n    hash: string,\n    timeout: number,\n    maxRetries = 3,\n    retryDelay = 500\n  ): Promise<T> {\n    const timer = setTimeout(() => {\n      throw new Error('Timeout');\n    }, timeout);\n\n    let attempts = 0;\n\n    while (true) {\n      try {\n        const info = await getInfo(hash);\n        if ((info as any)?.executionInfo?.executionResult) {\n          clearTimeout(timer);\n          return info;\n        }\n      } catch (error) {\n        if (attempts >= maxRetries) {\n          clearTimeout(timer);\n          throw new Error(\n            `Failed after ${maxRetries} retries: ${error.message}`\n          );\n        }\n        attempts++;\n        console.warn(\n          `Attempt ${attempts} failed: ${error.message}. Retrying in ${retryDelay}ms...`\n        );\n        await sleep(retryDelay);\n        continue;\n      }\n      await sleep(400);\n    }\n  }\n\n  /**\n   * Waits for a transaction to be confirmed on-chain.\n   * @param transaction - The transaction instance.\n   * @param timeout - Optional timeout in milliseconds (default: 6000ms).\n   * @returns A promise that resolves to `InfoGetTransactionResult` if successful.\n   * @throws An error if the transaction times out.\n   */\n  public async waitForTransaction(\n    transaction: Transaction,\n    timeout = 6000\n  ): Promise<InfoGetTransactionResult> {\n    return this.waitForConfirmation(\n      this.getTransactionByTransactionHash.bind(this),\n      transaction?.hash?.toHex(),\n      timeout\n    );\n  }\n\n  /**\n   * Waits for a deploy to be confirmed on-chain.\n   * @param deploy - The deploy instance.\n   * @param timeout - Optional timeout in milliseconds (default: 60000ms).\n   * @returns A promise that resolves to `InfoGetDeployResult` if successful.\n   * @throws An error if the deploy times out.\n   */\n  public async waitForDeploy(\n    deploy: Deploy,\n    timeout = 60000\n  ): Promise<InfoGetDeployResult> {\n    return this.waitForConfirmation(\n      this.getDeploy.bind(this),\n      deploy?.hash?.toHex(),\n      timeout\n    );\n  }\n\n  private parseResponse<T>(type: new (params: any) => T, response: any): T {\n    const serializer = new TypedJSON(type);\n    const parsed = serializer.parse(response);\n\n    if (!parsed) throw new Error(`Error parsing ${type.name} response data`);\n\n    return parsed as T;\n  }\n\n  private async processRequest<Request>(\n    method: Method,\n    params: Request,\n    reqID = '0'\n  ): Promise<RpcResponse> {\n    const request = RpcRequest.defaultRpcRequest(method, params);\n\n    if (reqID !== '0') {\n      request.id = IDValue.fromString(reqID);\n    }\n\n    const resp = await this.handler.processCall(request);\n\n    if (resp.error) {\n      throw new HttpError(resp.error.code, resp.error);\n    }\n\n    return resp;\n  }\n}\n","import { TypedJSON } from 'typedjson';\n\nimport {\n  BlockIdentifier,\n  Method,\n  RpcRequest,\n  SpeculativeExecParams\n} from './request';\nimport { RpcResponse, SpeculativeExecResult } from './response';\nimport { IHandler } from './client';\nimport { IDValue } from './id_value';\nimport { ExecutionResult, Deploy, Hash } from '../types';\n\nexport class SpeculativeClient {\n  private handler: IHandler;\n\n  constructor(handler: IHandler) {\n    this.handler = handler;\n  }\n\n  static newSpeculativeClient(handler: IHandler): SpeculativeClient {\n    return new SpeculativeClient(handler);\n  }\n\n  async speculativeExec(\n    reqID: string,\n    deploy: Deploy,\n    identifier?: BlockIdentifier\n  ): Promise<SpeculativeExecResult> {\n    const serializer = new TypedJSON(SpeculativeExecParams);\n    const speculativeParams = new SpeculativeExecParams(deploy, identifier);\n\n    const request = RpcRequest.defaultRpcRequest(\n      Method.SpeculativeExec,\n      serializer.toPlainJson(speculativeParams)\n    );\n\n    if (reqID && reqID !== '0') {\n      request.id = new IDValue(reqID);\n    }\n\n    const resp = await this.handler.processCall(request);\n\n    if (!resp) {\n      throw new Error('Handler response is empty');\n    }\n\n    if (resp.error) {\n      throw new Error(`RPC call failed, details: ${resp.error}`);\n    }\n\n    try {\n      const serializer = new TypedJSON(RpcResponse);\n      const data = serializer.parse(resp);\n\n      if (!data) {\n        throw new Error(`Error parsing JSON`);\n      }\n\n      const result = new SpeculativeExecResult();\n      result.apiVersion = data.version;\n      result.executionResult = ExecutionResult.fromJSON(resp.result);\n      result.blockHash = Hash.fromHex(identifier?.hash ?? '');\n      return result;\n    } catch (error) {\n      throw new Error(`Error parsing JSON, details: ${error}`);\n    }\n  }\n}\n","import EventSource from 'eventsource';\nimport { Result, Ok, Err } from 'ts-results';\n\nimport { EventName, RawEvent } from './event';\nimport { EventParser } from './event_parser';\n\n/**\n * Type definition for an event handler function.\n *\n * @param result - A RawEvent instance representing the event.\n */\nexport type EventHandlerFn = (result: RawEvent) => void;\n\n/**\n * Interface representing an event subscription.\n */\nexport interface EventSubscription {\n  /**\n   * The name of the event to subscribe to.\n   */\n  eventName: EventName;\n  /**\n   * The event handler function to invoke when the event occurs.\n   */\n  eventHandlerFn: EventHandlerFn;\n}\n\n/**\n * Client for managing Server-Sent Events (SSE) connections.\n */\nexport class SseClient {\n  private subscribedTo: EventSubscription[] = [];\n  private eventSource?: EventSource;\n  private parser: EventParser;\n\n  /**\n   * Creates an instance of SseClient.\n   *\n   * @param eventStreamUrl - The URL of the event stream.\n   */\n  constructor(private eventStreamUrl: string) {\n    this.parser = new EventParser();\n  }\n\n  /**\n   * Subscribes to a specified event.\n   *\n   * @param eventName - The name of the event to subscribe to.\n   * @param eventHandlerFn - The function to handle the event when it occurs.\n   * @returns A Result indicating success (Ok(true)) or failure (Err with an error message).\n   */\n  public subscribe(\n    eventName: EventName,\n    eventHandlerFn: EventHandlerFn\n  ): Result<boolean, string> {\n    if (this.subscribedTo.some(e => e.eventName === eventName)) {\n      return Err('Already subscribed to this event');\n    }\n    this.subscribedTo.push({ eventName, eventHandlerFn });\n    return Ok(true);\n  }\n\n  /**\n   * Unsubscribes from a specified event.\n   *\n   * @param eventName - The name of the event to unsubscribe from.\n   * @returns A Result indicating success (Ok(true)) or failure (Err with an error message).\n   */\n  public unsubscribe(eventName: EventName): Result<boolean, string> {\n    if (!this.subscribedTo.some(e => e.eventName === eventName)) {\n      return Err('Cannot find provided subscription');\n    }\n    this.subscribedTo = this.subscribedTo.filter(\n      e => e.eventName !== eventName\n    );\n    return Ok(true);\n  }\n\n  /**\n   * Processes incoming messages from the event source and dispatches them to the appropriate handlers.\n   *\n   * @param event - The message event containing the event data.\n   */\n  private runEventsLoop(event: MessageEvent<string>): void {\n    this.subscribedTo.forEach(sub => {\n      if (this.parser.shouldHandleEvent(event.data, sub.eventName)) {\n        const rawEvent = this.parser.parseEvent(\n          event.data,\n          event.type,\n          event.lastEventId\n        );\n        sub.eventHandlerFn(rawEvent);\n      }\n    });\n  }\n\n  /**\n   * Starts the SSE connection.\n   *\n   * @param eventId - (Optional) The event ID to start streaming from.\n   */\n  public start(eventId?: number): void {\n    const separator = this.eventStreamUrl.includes('?') ? '&' : '?';\n    let requestUrl = `${this.eventStreamUrl}${separator}`;\n    if (eventId !== undefined) {\n      requestUrl += `start_from=${eventId}`;\n    }\n    this.eventSource = new EventSource(requestUrl);\n\n    this.eventSource.onmessage = e => this.runEventsLoop(e);\n    this.eventSource.onerror = err => {\n      throw err;\n    };\n  }\n\n  /**\n   * Stops the SSE connection.\n   */\n  public stop(): void {\n    if (this.eventSource) {\n      this.eventSource.close();\n    }\n  }\n}\n","import { jsonObject, jsonMember, jsonArrayMember, TypedJSON } from 'typedjson';\n\nimport {\n  Effect,\n  ExecutionResult,\n  ExecutionResultV1,\n  Deploy,\n  Transaction,\n  TransactionHash,\n  TransactionWrapper,\n  Block,\n  BlockV1,\n  BlockWrapper,\n  InitiatorAddr,\n  Message,\n  HexBytes,\n  Timestamp,\n  PublicKey,\n  Hash,\n  Transform\n} from '../types';\n\nexport enum EventName {\n  APIVersionEventType = 'ApiVersion',\n  BlockAddedEventType = 'BlockAdded',\n  DeployProcessedEventType = 'DeployProcessed',\n  DeployAcceptedEventType = 'DeployAccepted',\n  DeployExpiredEventType = 'DeployExpired',\n  TransactionProcessedEventType = 'TransactionProcessed',\n  TransactionAcceptedEventType = 'TransactionAccepted',\n  TransactionExpiredEventType = 'TransactionExpired',\n  EventIDEventType = 'EventID',\n  FinalitySignatureType = 'FinalitySignature',\n  StepEventType = 'Step',\n  FaultEventType = 'Fault',\n  ShutdownType = 'Shutdown'\n}\n\n@jsonObject\nexport class RawEvent {\n  @jsonMember({ name: 'type', constructor: String })\n  eventType: string;\n\n  @jsonMember({ name: 'data', constructor: String })\n  data: string;\n\n  @jsonMember({ name: 'lastEventId', constructor: String })\n  lastEventId: string;\n\n  constructor(eventType: string, data: string, lastEventId: string) {\n    this.eventType = eventType;\n    this.data = data;\n    this.lastEventId = lastEventId;\n  }\n\n  private parseEvent<T>(\n    type: new (params: any) => T,\n    parser?: (data: any) => T | Error\n  ): T {\n    const serializer = new TypedJSON(type);\n    const parsed = parser ? parser(this.data) : serializer.parse(this.data);\n    if (!parsed) throw new Error('Error parsing event data');\n    return parsed;\n  }\n\n  parseAsAPIVersionEvent(): APIVersionEvent {\n    return this.parseEvent(APIVersionEvent);\n  }\n\n  parseAsDeployProcessedEvent(): DeployProcessedEvent {\n    return this.parseEvent(DeployProcessedEvent);\n  }\n\n  parseAsBlockAddedEvent(): BlockAddedEvent {\n    return this.parseEvent(BlockAddedEvent, BlockAddedEvent.fromJSON);\n  }\n\n  parseAsDeployAcceptedEvent(): DeployAcceptedEvent {\n    return this.parseEvent(DeployAcceptedEvent);\n  }\n\n  parseAsFinalitySignatureEvent(): FinalitySignatureEvent {\n    return this.parseEvent(\n      FinalitySignatureEvent,\n      FinalitySignatureEvent.fromJSON\n    );\n  }\n\n  parseAsTransactionExpiredEvent(): TransactionExpiredEvent {\n    return this.parseEvent(\n      TransactionExpiredEvent,\n      TransactionExpiredEvent.fromJSON\n    );\n  }\n\n  parseAsTransactionProcessedEvent(): TransactionProcessedEvent {\n    return this.parseEvent(\n      TransactionProcessedEvent,\n      TransactionProcessedEvent.fromJSON\n    );\n  }\n\n  parseAsTransactionAcceptedEvent(): TransactionAcceptedEvent {\n    return this.parseEvent(\n      TransactionAcceptedEvent,\n      TransactionAcceptedEvent.fromJSON\n    );\n  }\n\n  parseAsFaultEvent(): FaultEvent {\n    return this.parseEvent(FaultEvent);\n  }\n\n  parseAsStepEvent(): StepEvent {\n    return this.parseEvent(StepEvent);\n  }\n}\n\n@jsonObject\nexport class APIVersionEvent {\n  @jsonMember(String, { name: 'ApiVersion' })\n  apiVersion: string;\n\n  constructor(apiVersion: string) {\n    this.apiVersion = apiVersion;\n  }\n}\n\n@jsonObject\nexport class BlockAdded {\n  @jsonMember({ name: 'block_hash', constructor: String })\n  blockHash: string;\n\n  @jsonMember({ name: 'block', constructor: Block })\n  block: Block;\n\n  constructor(blockHash: string, block: Block) {\n    this.blockHash = blockHash;\n    this.block = block;\n  }\n}\n\n@jsonObject\nexport class BlockAddedEvent {\n  @jsonMember({ name: 'BlockAdded', constructor: BlockAdded })\n  BlockAdded: BlockAdded;\n\n  constructor(blockAdded: BlockAdded) {\n    this.BlockAdded = blockAdded;\n  }\n\n  static fromJSON(data: any): BlockAddedEvent {\n    if (!data) {\n      throw new Error('Parse JSON on null or undefined data');\n    }\n\n    const parsedData = JSON.parse(data);\n\n    if (parsedData.BlockAdded && parsedData.BlockAdded.block) {\n      const serializer = new TypedJSON(BlockAddedWrapper);\n      const blockWrapper = serializer.parse(parsedData.BlockAdded);\n\n      if (blockWrapper?.block.blockV1 || blockWrapper?.block.blockV2) {\n        return new BlockAddedEvent({\n          blockHash: blockWrapper.blockHash,\n          block: Block.newBlockFromBlockWrapper(blockWrapper.block, [])\n        });\n      }\n    }\n\n    const v1EventSerializer = new TypedJSON(BlockAddedV1);\n    const parsedV1Event = v1EventSerializer.parse(parsedData.BlockAdded);\n\n    if (parsedV1Event) {\n      return new BlockAddedEvent({\n        blockHash: parsedV1Event.blockHash,\n        block: Block.newBlockFromBlockV1(parsedV1Event.block)\n      });\n    }\n\n    throw new Error('Invalid JSON structure for BlockAddedEvent');\n  }\n}\n\n@jsonObject\nexport class BlockAddedV1 {\n  @jsonMember({ name: 'block_hash', constructor: String })\n  blockHash: string;\n\n  @jsonMember({ name: 'block', constructor: BlockV1 })\n  block: BlockV1;\n\n  constructor(blockHash: string, block: BlockV1) {\n    this.blockHash = blockHash;\n    this.block = block;\n  }\n}\n\n@jsonObject\nexport class BlockAddedEventV1 {\n  @jsonMember({ name: 'BlockAdded', constructor: BlockAddedV1 })\n  BlockAdded: BlockAddedV1;\n\n  constructor(blockAdded: BlockAddedV1) {\n    this.BlockAdded = blockAdded;\n  }\n}\n\n@jsonObject\nexport class BlockAddedWrapper {\n  @jsonMember({ name: 'block_hash', constructor: String })\n  blockHash: string;\n\n  @jsonMember({ name: 'block', constructor: BlockWrapper })\n  block: BlockWrapper;\n\n  constructor(blockHash: string, block: BlockWrapper) {\n    this.blockHash = blockHash;\n    this.block = block;\n  }\n}\n\n@jsonObject\nexport class BlockAddedEventWrapper {\n  @jsonMember({ name: 'BlockAdded', constructor: BlockAddedWrapper })\n  BlockAdded: BlockAddedWrapper;\n\n  constructor(blockAdded: BlockAddedWrapper) {\n    this.BlockAdded = blockAdded;\n  }\n}\n\n@jsonObject\nexport class DeployProcessedPayload {\n  @jsonMember({\n    name: 'deploy_hash',\n    constructor: Hash,\n    deserializer: json => {\n      if (!json) return;\n      return Hash.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  deployHash: Hash;\n\n  @jsonMember({\n    name: 'account',\n    constructor: PublicKey,\n    deserializer: json => {\n      if (!json) return;\n      return PublicKey.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  account: PublicKey;\n\n  @jsonMember({\n    name: 'timestamp',\n    constructor: Timestamp,\n    deserializer: json => {\n      if (!json) return;\n      return Timestamp.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  timestamp: Timestamp;\n\n  @jsonMember({ name: 'ttl', constructor: String })\n  ttl: string;\n\n  @jsonMember({\n    name: 'block_hash',\n    constructor: Hash,\n    deserializer: json => {\n      if (!json) return;\n      return Hash.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  blockHash: Hash;\n\n  @jsonMember({ name: 'execution_result', constructor: ExecutionResultV1 })\n  executionResult: ExecutionResultV1;\n}\n\n@jsonObject\nexport class DeployProcessedEvent {\n  @jsonMember({\n    name: 'DeployProcessed',\n    constructor: DeployProcessedPayload\n  })\n  deployProcessed: DeployProcessedPayload;\n}\n\n@jsonObject\nexport class DeployAcceptedEvent {\n  @jsonMember({ name: 'DeployAccepted', constructor: Deploy })\n  deployAccepted: Deploy;\n}\n\n@jsonObject\nexport class DeployExpiredPayload {\n  @jsonMember({\n    name: 'deploy_hash',\n    constructor: Hash,\n    deserializer: json => {\n      if (!json) return;\n      return Hash.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  deployHash: Hash;\n}\n\n@jsonObject\nexport class DeployExpiredEvent {\n  @jsonMember({\n    constructor: DeployExpiredPayload,\n    name: 'DeployExpired'\n  })\n  deployExpired: DeployExpiredPayload;\n}\n\n@jsonObject\nexport class TransactionAcceptedPayload {\n  @jsonMember({\n    name: 'transaction',\n    constructor: Transaction,\n    deserializer: json => {\n      if (!json) return;\n      return Transaction.fromJSON(json);\n    }\n  })\n  transaction: Transaction;\n}\n\n@jsonObject\nexport class TransactionAcceptedEvent {\n  @jsonMember({\n    constructor: TransactionAcceptedPayload,\n    name: 'TransactionAccepted'\n  })\n  transactionAcceptedPayload: TransactionAcceptedPayload;\n\n  public static fromJSON(data: any): TransactionAcceptedEvent | Error {\n    if (!data || data.TransactionAccepted) {\n      throw new Error(\n        'Parse JSON on null or undefined data for TransactionAcceptedEvent'\n      );\n    }\n\n    try {\n      const parsed = JSON.parse(data);\n      const transactionEvent = new TransactionAcceptedEvent();\n\n      const wrapper = TypedJSON.parse(\n        parsed.TransactionAccepted,\n        TransactionWrapper\n      );\n\n      if (wrapper?.deploy) {\n        transactionEvent.transactionAcceptedPayload = {\n          transaction: Deploy.newTransactionFromDeploy(wrapper.deploy)\n        };\n        return transactionEvent;\n      }\n\n      if (wrapper?.transactionV1) {\n        transactionEvent.transactionAcceptedPayload = {\n          transaction: Transaction.fromTransactionV1(wrapper.transactionV1)\n        };\n        return transactionEvent;\n      }\n\n      const deployEvent = TypedJSON.parse(\n        parsed.TransactionAccepted,\n        DeployAcceptedEvent\n      );\n      if (deployEvent?.deployAccepted) {\n        transactionEvent.transactionAcceptedPayload = {\n          transaction: Deploy.newTransactionFromDeploy(\n            deployEvent.deployAccepted\n          )\n        };\n        return transactionEvent;\n      }\n\n      throw new Error('Failed to match any transaction structure');\n    } catch (error) {\n      return new Error(\n        `Error deserializing TransactionAcceptedEvent: ${error}`\n      );\n    }\n  }\n}\n\n@jsonObject\nexport class TransactionExpiredPayload {\n  @jsonMember({ name: 'transaction_hash', constructor: TransactionHash })\n  transactionHash: TransactionHash;\n}\n\n@jsonObject\nexport class TransactionExpiredEvent {\n  @jsonMember({\n    name: 'TransactionExpired',\n    constructor: TransactionExpiredPayload\n  })\n  transactionExpiredPayload: TransactionExpiredPayload;\n\n  public static fromJSON(data: any): TransactionExpiredEvent | Error {\n    if (!data) {\n      throw new Error(\n        'Parse JSON on null or undefined data for TransactionExpiredEvent'\n      );\n    }\n\n    try {\n      const parsedData = JSON.parse(data);\n\n      const transactionEvent = new TransactionExpiredEvent();\n      const transactionExpiredPayload = TypedJSON.parse(\n        parsedData.TransactionExpired,\n        TransactionExpiredPayload\n      );\n      if (!transactionExpiredPayload)\n        throw new Error('transactionExpiredPayload is nil');\n\n      if (transactionExpiredPayload) {\n        transactionEvent.transactionExpiredPayload = transactionExpiredPayload;\n      }\n\n      const payload = transactionEvent?.transactionExpiredPayload;\n\n      if (\n        payload?.transactionHash?.transactionV1 ||\n        payload?.transactionHash?.deploy\n      ) {\n        return transactionEvent;\n      }\n\n      const deployEvent = TypedJSON.parse(\n        parsedData.TransactionExpired,\n        DeployExpiredEvent\n      );\n      if (deployEvent?.deployExpired) {\n        transactionEvent.transactionExpiredPayload = {\n          transactionHash: new TransactionHash(\n            deployEvent.deployExpired.deployHash\n          )\n        };\n        return transactionEvent;\n      }\n\n      throw new Error('Failed to match any transaction structure');\n    } catch (error) {\n      return new Error(`Error deserializing TransactionExpiredEvent: ${error}`);\n    }\n  }\n}\n\n@jsonObject\nexport class TransactionProcessedPayload {\n  @jsonMember({\n    name: 'block_hash',\n    constructor: Hash,\n    deserializer: json => {\n      if (!json) return;\n      return Hash.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  blockHash: Hash;\n\n  @jsonMember({ name: 'transaction_hash', constructor: TransactionHash })\n  transactionHash: TransactionHash;\n\n  @jsonMember({\n    name: 'initiator_addr',\n    constructor: InitiatorAddr,\n    deserializer: json => {\n      if (!json) return;\n      return InitiatorAddr.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  initiatorAddr: InitiatorAddr;\n\n  @jsonMember({\n    name: 'timestamp',\n    constructor: Timestamp,\n    deserializer: json => {\n      if (!json) return;\n      return Timestamp.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  timestamp: Timestamp;\n\n  @jsonMember({ name: 'ttl', constructor: String })\n  ttl: string;\n\n  @jsonMember({\n    name: 'execution_result',\n    constructor: ExecutionResult,\n    deserializer: json => {\n      if (!json) return;\n      return ExecutionResult.fromJSON(json);\n    }\n  })\n  executionResult: ExecutionResult;\n\n  @jsonArrayMember(Message, { name: 'messages' })\n  messages: Message[];\n}\n\n@jsonObject\nexport class TransactionProcessedEvent {\n  @jsonMember({\n    name: 'TransactionProcessed',\n    constructor: TransactionProcessedPayload\n  })\n  transactionProcessedPayload: TransactionProcessedPayload;\n\n  public static fromJSON(data: any): TransactionProcessedEvent | Error {\n    if (!data || data.TransactionProcessed) {\n      throw new Error(\n        'Parse JSON on null or undefined data for TransactionExpiredEvent'\n      );\n    }\n\n    try {\n      const parsedData = JSON.parse(data);\n      const transactionEvent = new TransactionProcessedEvent();\n      const parsedTransactionPayload = TypedJSON.parse(\n        parsedData.TransactionProcessed,\n        TransactionProcessedPayload\n      );\n\n      if (parsedTransactionPayload) {\n        transactionEvent.transactionProcessedPayload = parsedTransactionPayload;\n      }\n\n      const payload = transactionEvent.transactionProcessedPayload;\n\n      if (\n        payload.transactionHash?.transactionV1 ||\n        payload.transactionHash?.deploy\n      ) {\n        return transactionEvent;\n      }\n\n      const deployEvent = TypedJSON.parse(\n        parsedData.TransactionProcessed,\n        DeployProcessedEvent\n      );\n      if (deployEvent?.deployProcessed) {\n        transactionEvent.transactionProcessedPayload = {\n          blockHash: deployEvent.deployProcessed.blockHash,\n          transactionHash: new TransactionHash(\n            deployEvent.deployProcessed.deployHash\n          ),\n          initiatorAddr: new InitiatorAddr(deployEvent.deployProcessed.account),\n          timestamp: deployEvent.deployProcessed.timestamp,\n          ttl: deployEvent.deployProcessed.ttl,\n          executionResult: ExecutionResult.fromV1(\n            deployEvent.deployProcessed.executionResult\n          ),\n          messages: []\n        };\n        return transactionEvent;\n      }\n\n      throw new Error('Failed to match any transaction structure');\n    } catch (error) {\n      return new Error(\n        `Error deserializing TransactionProcessedEvent: ${error}`\n      );\n    }\n  }\n}\n\n@jsonObject\nexport class FinalitySignatureV1 {\n  @jsonMember({\n    name: 'block_hash',\n    constructor: Hash,\n    deserializer: json => {\n      if (!json) return;\n      return Hash.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  blockHash: Hash;\n\n  @jsonMember({ name: 'era_id', constructor: Number })\n  eraID: number;\n\n  @jsonMember({\n    name: 'signature',\n    constructor: HexBytes,\n    deserializer: json => {\n      if (!json) return;\n      return HexBytes.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  signature: HexBytes;\n\n  @jsonMember({\n    name: 'public_key',\n    constructor: PublicKey,\n    deserializer: json => {\n      if (!json) return;\n      return PublicKey.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  publicKey: PublicKey;\n}\n\n@jsonObject\nexport class FinalitySignatureV2 {\n  @jsonMember({\n    name: 'block_hash',\n    constructor: Hash,\n    deserializer: json => {\n      if (!json) return;\n      return Hash.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  blockHash: Hash;\n\n  @jsonMember({ isRequired: false, name: 'block_height', constructor: Number })\n  blockHeight?: number;\n\n  @jsonMember({\n    isRequired: false,\n    name: 'chain_name_hash',\n    constructor: Hash,\n    deserializer: json => {\n      if (!json) return;\n      return Hash.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  chainNameHash?: Hash;\n\n  @jsonMember({ name: 'era_id', constructor: Number })\n  eraID: number;\n\n  @jsonMember({\n    name: 'signature',\n    constructor: HexBytes,\n    deserializer: json => {\n      if (!json) return;\n      return HexBytes.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  signature: HexBytes;\n\n  @jsonMember({\n    name: 'public_key',\n    constructor: PublicKey,\n    deserializer: json => {\n      if (!json) return;\n      return PublicKey.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  publicKey: PublicKey;\n}\n\n@jsonObject\nexport class FinalitySignatureWrapper {\n  @jsonMember({\n    isRequired: false,\n    name: 'V1',\n    constructor: FinalitySignatureV1\n  })\n  v1?: FinalitySignatureV1;\n\n  @jsonMember({\n    isRequired: false,\n    name: 'V2',\n    constructor: FinalitySignatureV2\n  })\n  v2?: FinalitySignatureV2;\n}\n\n@jsonObject\nexport class FinalitySignature {\n  @jsonMember({\n    name: 'block_hash',\n    constructor: Hash,\n    deserializer: json => {\n      if (!json) return;\n      return Hash.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  blockHash: Hash;\n\n  @jsonMember({\n    constructor: Number,\n    isRequired: false,\n    name: 'block_height'\n  })\n  blockHeight?: number;\n\n  @jsonMember({\n    isRequired: false,\n    name: 'chain_name_hash',\n    constructor: Hash,\n    deserializer: json => {\n      if (!json) return;\n      return Hash.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  chainNameHash?: Hash;\n\n  @jsonMember({ name: 'era_id', constructor: Number })\n  eraID: number;\n\n  @jsonMember({\n    name: 'signature',\n    constructor: HexBytes,\n    deserializer: json => {\n      if (!json) return;\n      return HexBytes.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  signature: HexBytes;\n\n  @jsonMember({\n    name: 'public_key',\n    constructor: PublicKey,\n    deserializer: json => {\n      if (!json) return;\n      return PublicKey.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  publicKey: PublicKey;\n\n  @jsonMember(FinalitySignatureV1, {\n    isRequired: false\n  })\n  originFinalitySignatureV1?: FinalitySignatureV1;\n}\n\n@jsonObject\nexport class FinalitySignatureEvent {\n  @jsonMember({ name: 'FinalitySignature', constructor: FinalitySignature })\n  finalitySignature: FinalitySignature;\n\n  public static fromJSON(data: any): FinalitySignatureEvent | Error {\n    if (!data || data.FinalitySignature) {\n      throw new Error(\n        'Parse JSON on null or undefined data for FinalitySignatureEvent'\n      );\n    }\n\n    try {\n      const parsed = JSON.parse(data);\n      const wrapped = TypedJSON.parse(\n        parsed.FinalitySignature,\n        FinalitySignatureWrapper\n      );\n      if (!wrapped) throw new Error('FinalitySignatureWrapper is nil');\n\n      let finalitySignature: FinalitySignature;\n      if (wrapped.v1) {\n        finalitySignature = {\n          blockHash: wrapped.v1.blockHash,\n          eraID: wrapped.v1.eraID,\n          signature: wrapped.v1.signature,\n          publicKey: wrapped.v1.publicKey,\n          originFinalitySignatureV1: wrapped.v1\n        };\n      } else if (wrapped.v2) {\n        finalitySignature = {\n          blockHash: wrapped.v2.blockHash,\n          blockHeight: wrapped.v2.blockHeight,\n          chainNameHash: wrapped.v2.chainNameHash,\n          eraID: wrapped.v2.eraID,\n          signature: wrapped.v2.signature,\n          publicKey: wrapped.v2.publicKey\n        };\n      } else {\n        const v1Event = TypedJSON.parse(\n          parsed.FinalitySignature,\n          FinalitySignatureV1\n        );\n        if (!v1Event) throw new Error('Failed to parse FinalitySignatureV1');\n\n        finalitySignature = {\n          blockHash: v1Event.blockHash,\n          eraID: v1Event.eraID,\n          signature: v1Event.signature,\n          publicKey: v1Event.publicKey,\n          originFinalitySignatureV1: v1Event\n        };\n      }\n\n      return new FinalitySignatureEvent(finalitySignature);\n    } catch (error) {\n      return new Error(`Error deserializing FinalitySignatureEvent: ${error}`);\n    }\n  }\n\n  constructor(finalitySignature: FinalitySignature) {\n    this.finalitySignature = finalitySignature;\n  }\n}\n\n@jsonObject\nexport class FaultPayload {\n  @jsonMember({ name: 'era_id', constructor: Number })\n  eraID: number;\n\n  @jsonMember({\n    name: 'public_key',\n    constructor: PublicKey,\n    deserializer: json => {\n      if (!json) return;\n      return PublicKey.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  publicKey: PublicKey;\n\n  @jsonMember({\n    name: 'timestamp',\n    constructor: Timestamp,\n    deserializer: json => {\n      if (!json) return;\n      return Timestamp.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  timestamp: Timestamp;\n}\n\n@jsonObject\nexport class FaultEvent {\n  @jsonMember({ name: 'Fault', constructor: FaultPayload })\n  fault: FaultPayload;\n}\n\n@jsonObject\nexport class StepPayload {\n  @jsonMember({ name: 'era_id', constructor: Number })\n  eraID: number;\n\n  @jsonMember({ name: 'execution_effect', constructor: Effect })\n  executionEffect: Effect;\n\n  @jsonArrayMember(() => Transform, { name: 'execution_effects' })\n  executionEffects: Transform[];\n}\n\n@jsonObject\nexport class StepEvent {\n  @jsonMember({ name: 'step', constructor: StepPayload })\n  step: StepPayload;\n}\n","import { RawEvent } from './event';\n\n/**\n * A parser for handling and converting raw event data.\n */\nexport class EventParser {\n  /**\n   * Determines whether the provided JSON data contains the specified event property.\n   *\n   * @param data - The raw JSON string representing the event data.\n   * @param eventName - The name of the event property to look for.\n   * @returns True if the parsed data contains the specified event property; otherwise, false.\n   */\n  public shouldHandleEvent(data: string, eventName: string): boolean {\n    try {\n      const parsed = JSON.parse(data);\n      return parsed && Object.prototype.hasOwnProperty.call(parsed, eventName);\n    } catch (error) {\n      console.error('Error parsing JSON:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Parses the raw event data and returns a new RawEvent instance.\n   *\n   * @param data - The raw JSON string representing the event data.\n   * @param type - The type of the event.\n   * @param lastEventId - The identifier of the last event processed.\n   * @returns A new instance of RawEvent containing the event details.\n   */\n  public parseEvent(data: string, type: string, lastEventId: string): RawEvent {\n    return new RawEvent(type, data, lastEventId);\n  }\n}\n","export * from './client';\nexport * from './event';\nexport * from './event_parser';\n","import { jsonObject, jsonMember, jsonArrayMember } from 'typedjson';\nimport { AccountHash, URef } from './key';\nimport { NamedKeys } from './NamedKey';\n\n/**\n * Represents an associated key for an account, linking an `AccountHash`\n * with a weight that determines its permission level.\n */\n@jsonObject\nexport class AssociatedKey {\n  /**\n   * The account hash associated with this key, uniquely identifying the account.\n   */\n  @jsonMember({\n    name: 'account_hash',\n    constructor: AccountHash,\n    deserializer: json => AccountHash.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  accountHash: AccountHash;\n\n  /**\n   * The weight assigned to this key, which determines the key’s authority level.\n   */\n  @jsonMember({\n    name: 'weight',\n    constructor: Number\n  })\n  weight: number;\n}\n\n/**\n * Represents action thresholds for an account, specifying minimum weights\n * required for deployment and key management actions.\n */\n@jsonObject\nexport class ActionThresholds {\n  /**\n   * The threshold for performing deployment actions, represented as a weight.\n   */\n  @jsonMember({\n    name: 'deployment',\n    constructor: Number\n  })\n  deployment: number;\n\n  /**\n   * The threshold for performing key management actions, represented as a weight.\n   */\n  @jsonMember({\n    name: 'key_management',\n    constructor: Number\n  })\n  keyManagement: number;\n}\n\n/**\n * Represents an account in the blockchain, containing account details such as\n * associated keys, named keys, main purse, and action thresholds.\n */\n@jsonObject\nexport class Account {\n  /**\n   * The account hash for this account, which serves as a unique identifier.\n   */\n  @jsonMember({\n    name: 'account_hash',\n    deserializer: json => AccountHash.fromJSON(json),\n    serializer: value => value.toJSON(),\n    constructor: AccountHash\n  })\n  accountHash: AccountHash;\n\n  /**\n   * The named keys associated with this account, mapping key names to `URef` values.\n   * TODO: Is it could be any type of keys or certain types?\n   */\n  @jsonMember({\n    name: 'named_keys',\n    constructor: NamedKeys\n  })\n  namedKeys: NamedKeys;\n\n  /**\n   * The main purse associated with this account, represented as a `URef`.\n   */\n  @jsonMember({\n    name: 'main_purse',\n    constructor: URef,\n    deserializer: json => URef.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  mainPurse: URef;\n\n  /**\n   * The list of associated keys for this account, each with an `AccountHash` and weight.\n   */\n  @jsonArrayMember(AssociatedKey, { name: 'associated_keys' })\n  associatedKeys: AssociatedKey[];\n\n  /**\n   * The action thresholds for this account, setting required weights for specific actions.\n   */\n  @jsonMember({ name: 'action_thresholds', constructor: ActionThresholds })\n  actionThresholds: ActionThresholds;\n}\n","import { jsonObject, jsonMember, jsonArrayMember, TypedJSON } from 'typedjson';\nimport { AssociatedKey } from './Account';\nimport { EntryPointV1 } from './EntryPoint';\nimport { AccountHash, URef } from './key';\nimport { TransactionRuntime } from './TransactionTarget';\n\n/**\n * Defines different kinds of entities within the system, such as system entities,\n * accounts, and smart contracts. Provides details on each entity type.\n */\n@jsonObject\nexport class EntityKind {\n  /**\n   * Represents a system entity type, allowing flexible naming of system-specific entities.\n   */\n  @jsonMember({ name: 'System', constructor: String })\n  system?: string;\n\n  /**\n   * Represents an account entity, identified by an `AccountHash`.\n   */\n  @jsonMember({\n    name: 'Account',\n    constructor: AccountHash,\n    deserializer: json => (json ? AccountHash.fromJSON(json) : undefined),\n    serializer: value => (value ? value.toJSON() : undefined)\n  })\n  account?: AccountHash;\n\n  /**\n   * Represents a smart contract entity, specified by its transaction runtime version.\n   */\n  @jsonMember({\n    name: 'SmartContract',\n    constructor: TransactionRuntime,\n    deserializer: json => {\n      if (!json) return;\n      return TransactionRuntime.fromJSON(json);\n    },\n    serializer: (value: TransactionRuntime) => value.toJSON()\n  })\n  smartContract?: TransactionRuntime;\n}\n\n/**\n * Defines thresholds for various actions that an entity can perform,\n * with each threshold represented as a weight.\n */\n@jsonObject\nexport class EntityActionThresholds {\n  /**\n   * The weight required to authorize deployment actions.\n   */\n  @jsonMember({ name: 'deployment', constructor: Number })\n  deployment: number;\n\n  /**\n   * The weight required to authorize upgrade management actions.\n   */\n  @jsonMember({ name: 'upgrade_management', constructor: Number })\n  upgradeManagement: number;\n\n  /**\n   * The weight required to authorize key management actions.\n   */\n  @jsonMember({ name: 'key_management', constructor: Number })\n  keyManagement: number;\n}\n\n/**\n * Represents an addressable entity, which can be a smart contract, account, or system entity.\n * Each entity contains various properties such as action thresholds, associated keys,\n * and message topics.\n */\n@jsonObject\nexport class AddressableEntity {\n  /**\n   * Specifies the kind of the entity, such as system entity, account, or smart contract.\n   */\n  @jsonMember({\n    name: 'entity_kind',\n    constructor: EntityKind\n  })\n  entityKind: EntityKind;\n\n  /**\n   * The unique package hash associated with this entity.\n   */\n  @jsonMember({ name: 'package_hash', constructor: String })\n  packageHash: string;\n\n  /**\n   * The bytecode hash associated with this entity, representing its executable code.\n   */\n  @jsonMember({ name: 'byte_code_hash', constructor: String })\n  byteCodeHash: string;\n\n  /**\n   * The associated keys for this entity, each with an `AccountHash` and a weight.\n   */\n  @jsonArrayMember(AssociatedKey, { name: 'associated_keys' })\n  associatedKeys: AssociatedKey[];\n\n  /**\n   * The action thresholds required for different operations, such as deployment or key management.\n   */\n  @jsonMember({\n    name: 'action_thresholds',\n    constructor: EntityActionThresholds\n  })\n  actionThresholds: EntityActionThresholds;\n\n  /**\n   * The main purse associated with this entity, used for managing funds.\n   */\n  @jsonMember({\n    name: 'main_purse',\n    constructor: URef,\n    deserializer: json => URef.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  mainPurse: URef;\n\n  /**\n   * The protocol version in use by this entity.\n   */\n  @jsonMember({ name: 'protocol_version', constructor: String })\n  protocolVersion: string;\n}\n\n/**\n * Represents an entry point in a smart contract, with a specific name and configuration.\n */\n@jsonObject\nexport class NamedEntryPoint {\n  /**\n   * The entry point configuration, specifying the method and parameters.\n   */\n  @jsonMember({\n    name: 'entry_point',\n    constructor: EntryPointV1\n  })\n  entryPoint: EntryPointV1;\n\n  /**\n   * Creates a new NamedEntryPoint instance from JSON.\n   *\n   * This method supports both JSON variants:\n   *  - 1.x: { name, args, ret, access, entry_point_type, ... }\n   *  - 2.x: { entry_point: { name, args, ret, access, entry_point_type, ... } }\n   *\n   * @param json The raw JSON to parse.\n   * @returns A new instance of NamedEntryPoint.\n   */\n  public static fromJSON(json: any): NamedEntryPoint {\n    if (!json) {\n      throw new Error('Invalid JSON provided for NamedEntryPoint');\n    }\n\n    const normalizedJSON = json.entry_point ? json : { entry_point: json };\n    const typedJSON = new TypedJSON(NamedEntryPoint);\n\n    const parsed = typedJSON.parse(normalizedJSON);\n\n    if (!parsed) {\n      throw new Error('Failed to parse NamedEntryPoint JSON');\n    }\n\n    return parsed;\n  }\n}\n","import { concat } from '@ethersproject/bytes';\nimport { jsonMapMember, jsonObject } from 'typedjson';\n\nimport { CLValue, CLValueParser } from './clvalue';\nimport {\n  expandBuffer,\n  toBytesString,\n  toBytesU32,\n  writeInteger\n} from './ByteConverters';\n\n/**\n * Represents a named argument with a name and associated `CLValue`, which can be serialized to bytes.\n */\nexport class NamedArg {\n  /**\n   * Creates an instance of NamedArg.\n   * @param name - The name of the argument.\n   * @param value - The `CLValue` associated with this argument.\n   */\n  constructor(public name: string, public value: CLValue) {}\n\n  /**\n   * Converts the named argument to a byte array representation.\n   * @returns A `Uint8Array` containing the serialized argument name and value.\n   */\n  public toBytes(): Uint8Array {\n    const name = toBytesString(this.name);\n    const value = CLValueParser.toBytesWithType(this.value);\n    return concat([name, value]);\n  }\n\n  /**\n   * Converts a `NamedArg` object to a `Uint8Array` for serialization.\n   *\n   * The method encodes the name of the argument as a UTF-8 string, followed by the serialized\n   * bytes of its value. The resulting `Uint8Array` can be used for further processing, such as\n   * storage or transmission.\n   *\n   * @param source - The `NamedArg` object to serialize. It contains a name and a value.\n   * @returns A `Uint8Array` representing the serialized `NamedArg`.\n   *\n   * @example\n   * ```typescript\n   * const namedArg = new NamedArg(\"arg1\", CLValue.u32(42));\n   * const serializedBytes = YourClass.toBytesWithNamedArg(namedArg);\n   * console.log(serializedBytes); // Logs the serialized bytes.\n   * ```\n   */\n  public static toBytesWithNamedArg(source: NamedArg): Uint8Array {\n    const bufferSize = 1024;\n    let buffer = new ArrayBuffer(bufferSize);\n    let view = new DataView(buffer);\n    let offset = 0;\n\n    const nameBytes = new TextEncoder().encode(source.name);\n    if (offset + 4 + nameBytes.length > buffer.byteLength) {\n      buffer = expandBuffer(buffer, offset + 4 + nameBytes.length);\n      view = new DataView(buffer);\n    }\n    offset = writeInteger(view, offset, nameBytes.length);\n    new Uint8Array(buffer, offset).set(nameBytes);\n    offset += nameBytes.length;\n\n    const valueBytes = CLValueParser.toBytesWithType(source.value);\n    if (offset + valueBytes.length > buffer.byteLength) {\n      buffer = expandBuffer(buffer, offset + valueBytes.length);\n      view = new DataView(buffer);\n    }\n    new Uint8Array(buffer, offset).set(valueBytes);\n    offset += valueBytes.length;\n\n    return new Uint8Array(buffer, 0, offset);\n  }\n\n  /**\n   * Creates a `NamedArg` instance from a byte array.\n   * @param bytes - The byte array to parse.\n   * @returns A `NamedArg` instance.\n   */\n  public static fromBytes(bytes: Uint8Array): NamedArg {\n    let offset = 0;\n\n    const nameLength = new DataView(bytes.buffer).getUint32(offset, true);\n    offset += 4;\n    const nameBytes = bytes.slice(offset, offset + nameLength);\n    offset += nameLength;\n    const name = new TextDecoder().decode(nameBytes);\n\n    const valueBytes = bytes.slice(offset);\n    const value = CLValueParser.fromBytesWithType(valueBytes);\n\n    return new NamedArg(name, value.result);\n  }\n}\n\n/**\n * Serializes a map of arguments to an array format for JSON.\n * @param map - The map of arguments to serialize.\n * @returns An array where each entry is a key-value pair in JSON format.\n */\nconst serRA = (map: Map<string, CLValue>) => {\n  return Array.from(map, ([key, value]) => [key, CLValueParser.toJSON(value)]);\n};\n\n/**\n * Deserializes an array format to a map of arguments.\n * @param _arr - The array of key-value pairs to deserialize.\n * @returns A map containing each key-value pair.\n * @throws Error if a duplicate key is detected.\n */\nconst desRA = (_arr: any) => {\n  const parsed = new Map(\n    Array.from(_arr, ([key, value]) => {\n      const val = CLValueParser.fromJSON(value);\n      return [key, val];\n    })\n  );\n\n  if (parsed.size !== Array.from(_arr).length)\n    throw Error(`Duplicate key exists.`);\n\n  return parsed;\n};\n\n/**\n * Represents a set of named arguments (`NamedArg`) for a contract call.\n * Provides methods to serialize, deserialize, and manipulate argument entries.\n */\n@jsonObject\nexport class Args {\n  /**\n   * The map of argument names to `CLValue` values.\n   */\n  @jsonMapMember(String, CLValue, {\n    serializer: (map: Map<string, CLValue>) => serRA(map),\n    deserializer: desRA\n  })\n  public args: Map<string, CLValue>;\n\n  public getByName(argName: string): CLValue | undefined {\n    return this.args.get(argName);\n  }\n\n  /**\n   * Creates an instance of `Args` from a map of arguments.\n   * @param args - A map containing argument names as keys and `CLValue` instances as values.\n   */\n  constructor(args: Map<string, CLValue>) {\n    this.args = args;\n  }\n\n  /**\n   * Creates an `Args` instance from an object.\n   * @param args - An object containing argument names as keys and `CLValue` instances as values.\n   * @returns A new `Args` instance.\n   */\n  public static fromMap(args: Record<string, CLValue>): Args {\n    const map: Map<string, CLValue> = new Map(\n      Object.keys(args).map(k => [k, args[k]])\n    );\n    return new Args(map);\n  }\n\n  /**\n   * Creates an `Args` instance from an array of `NamedArg` instances.\n   * @param namedArgs - An array of `NamedArg` instances.\n   * @returns A new `Args` instance.\n   */\n  public static fromNamedArgs(namedArgs: NamedArg[]): Args {\n    const args = namedArgs.reduce<Record<string, CLValue>>((pre, cur) => {\n      pre[cur.name] = cur.value;\n      return pre;\n    }, {});\n    return this.fromMap(args);\n  }\n\n  /**\n   * Inserts a new argument into the map.\n   * @param key - The argument name.\n   * @param value - The `CLValue` for the argument.\n   */\n  public insert(key: string, value: CLValue) {\n    this.args.set(key, value);\n  }\n\n  /**\n   * Converts the arguments to a byte array.\n   * The format includes the number of arguments followed by each argument in bytes.\n   * @returns A `Uint8Array` containing the serialized arguments.\n   */\n  public toBytes(): Uint8Array {\n    const vec = Array.from(this.args.entries()).map((a: [string, CLValue]) => {\n      return new NamedArg(a[0], a[1]);\n    });\n    const valueByteList = vec.map(e => e.toBytes());\n    valueByteList.splice(0, 0, toBytesU32(vec.length));\n\n    return concat(valueByteList);\n  }\n\n  /**\n   * Creates an `Args` instance from a byte array.\n   * @param bytes - The byte array to parse.\n   * @returns An `Args` instance.\n   */\n  public static fromBytes(bytes: Uint8Array): Args {\n    let offset = 0;\n\n    const numArgs = new DataView(bytes.buffer).getUint32(offset, true);\n    offset += 4;\n\n    const args = new Map<string, CLValue>();\n\n    for (let i = 0; i < numArgs; i++) {\n      const namedArgBytes = bytes.slice(offset);\n      const namedArg = NamedArg.fromBytes(namedArgBytes);\n\n      const nameLength = new DataView(namedArgBytes.buffer).getUint32(0, true);\n      const valueBytes = CLValueParser.toBytesWithType(namedArg.value);\n      const consumedBytes = 4 + nameLength + valueBytes.length;\n\n      offset += consumedBytes;\n\n      args.set(namedArg.name, namedArg.value);\n    }\n\n    return new Args(args);\n  }\n}\n","import { jsonObject, jsonMember, jsonArrayMember } from 'typedjson';\n\nimport { Bid, Delegator, ValidatorBid } from './Bid';\nimport { ValidatorWeightAuction } from './ValidatorWeight';\nimport { PublicKey } from './keypair';\nimport { BidKind } from './BidKind';\nimport {\n  DEFAULT_MAXIMUM_DELEGATION_AMOUNT,\n  DEFAULT_MINIMUM_DELEGATION_AMOUNT\n} from '../utils';\n\n/**\n * Represents a public key and its corresponding bid in the auction state.\n */\n@jsonObject\nexport class PublicKeyAndBid {\n  /**\n   * The public key associated with this bid.\n   */\n  @jsonMember({\n    name: 'public_key',\n    constructor: PublicKey,\n    deserializer: json => PublicKey.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  publicKey: PublicKey;\n\n  /**\n   * The bid associated with the public key.\n   */\n  @jsonMember({ name: 'bid', constructor: Bid })\n  bid: Bid;\n}\n\n/**\n * Represents validators for a specific era, including the era ID and validator weights.\n */\n@jsonObject\nexport class EraValidators {\n  /**\n   * The unique identifier for the era.\n   */\n  @jsonMember({ name: 'era_id', constructor: Number })\n  eraID: number;\n\n  /**\n   * The weights of the validators for this era.\n   */\n  @jsonArrayMember(ValidatorWeightAuction, { name: 'validator_weights' })\n  validatorWeights: ValidatorWeightAuction[];\n}\n\n@jsonObject\nexport class BidKindWrapper {\n  @jsonMember({\n    name: 'public_key',\n    constructor: PublicKey,\n    deserializer: json => PublicKey.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  publicKey: PublicKey;\n\n  @jsonMember({\n    name: 'bid',\n    constructor: BidKind\n  })\n  bid: BidKind;\n\n  constructor(publicKey?: PublicKey, bid?: BidKind) {\n    if (publicKey) {\n      this.publicKey = publicKey;\n    }\n    if (bid) {\n      this.bid = bid;\n    }\n  }\n}\n\n@jsonObject\nexport class AuctionStateV1 {\n  @jsonArrayMember(PublicKeyAndBid, { name: 'bids' })\n  bids: PublicKeyAndBid[];\n\n  @jsonMember({ name: 'block_height', constructor: Number })\n  blockHeight: number;\n\n  @jsonArrayMember(EraValidators, { name: 'era_validators' })\n  eraValidators: EraValidators[];\n\n  @jsonMember({ name: 'state_root_hash', constructor: String })\n  stateRootHash: string;\n}\n\n@jsonObject\nexport class AuctionStateV2 {\n  @jsonArrayMember(BidKindWrapper, { name: 'bids' })\n  bids: BidKindWrapper[];\n\n  @jsonMember({ name: 'block_height', constructor: Number })\n  blockHeight: number;\n\n  @jsonArrayMember(EraValidators, { name: 'era_validators' })\n  eraValidators: EraValidators[];\n\n  @jsonMember({ name: 'state_root_hash', constructor: String })\n  stateRootHash: string;\n}\n\n/**\n * Represents the current auction state, including bids, era validators, and other state information.\n */\n@jsonObject\nexport class AuctionState {\n  /**\n   * The list of bids in the auction.\n   */\n  @jsonArrayMember(BidKindWrapper, { name: 'bids' })\n  bids: BidKindWrapper[];\n\n  /**\n   * The block height at which this auction state was recorded.\n   */\n  @jsonMember({ name: 'block_height', constructor: Number })\n  blockHeight: number;\n\n  /**\n   * The validators and their weights for each era in the auction state.\n   */\n  @jsonArrayMember(EraValidators, { name: 'era_validators' })\n  eraValidators: EraValidators[];\n\n  /**\n   * The root hash of the state at the time of this auction state.\n   */\n  @jsonMember({ name: 'state_root_hash', constructor: String })\n  stateRootHash: string;\n\n  /**\n   * Creates an AuctionState from an AuctionStateV1.\n   * For each bid, a BidKindWrapper is created for the validator bid,\n   * and additional wrappers are created for each delegator bid.\n   *\n   * @param v1 An instance of AuctionStateV1.\n   * @returns An AuctionState instance.\n   */\n  static fromV1(v1: AuctionStateV1): AuctionState {\n    const bids: BidKindWrapper[] = [];\n\n    for (const pkAndBid of v1.bids) {\n      const validator = new ValidatorBid();\n      validator.bondingPurse = pkAndBid?.bid?.bondingPurse;\n      validator.delegationRate = pkAndBid?.bid?.delegationRate;\n      validator.inactive = pkAndBid?.bid?.inactive;\n      validator.stakedAmount = pkAndBid?.bid?.stakedAmount;\n      validator.vestingSchedule = pkAndBid?.bid?.vestingSchedule;\n      validator.reservedSlots = 0;\n      validator.validatorPublicKey = pkAndBid?.bid?.validatorPublicKey;\n      validator.maximumDelegationAmount = DEFAULT_MAXIMUM_DELEGATION_AMOUNT;\n      validator.minimumDelegationAmount = DEFAULT_MINIMUM_DELEGATION_AMOUNT;\n\n      const bidKind = new BidKind();\n      bidKind.validator = validator;\n\n      bids.push(new BidKindWrapper(pkAndBid.publicKey, bidKind));\n\n      for (const delegatorBid of pkAndBid.bid.delegators) {\n        bids.push(\n          new BidKindWrapper(\n            pkAndBid.publicKey,\n            new BidKind(\n              undefined,\n              undefined,\n              new Delegator(\n                delegatorBid.bondingPurse,\n                delegatorBid.stakedAmount,\n                delegatorBid.delegatorKind,\n                delegatorBid.validatorPublicKey,\n                delegatorBid.vestingSchedule\n              )\n            )\n          )\n        );\n      }\n    }\n\n    const state = new AuctionState();\n    state.bids = bids;\n    state.blockHeight = v1.blockHeight;\n    state.eraValidators = v1.eraValidators;\n    state.stateRootHash = v1.stateRootHash;\n    return state;\n  }\n\n  /**\n   * Creates an AuctionState from an AuctionStateV2.\n   *\n   * @param v2 An instance of AuctionStateV2.\n   * @returns An AuctionState instance.\n   */\n  static fromV2(v2: AuctionStateV2): AuctionState {\n    const bids: BidKindWrapper[] = v2?.bids.map(bidWrapper => {\n      return new BidKindWrapper(bidWrapper?.publicKey, bidWrapper?.bid);\n    });\n    const state = new AuctionState();\n    state.bids = bids;\n    state.blockHeight = v2?.blockHeight;\n    state.eraValidators = v2?.eraValidators;\n    state.stateRootHash = v2?.stateRootHash;\n    return state;\n  }\n}\n","import { jsonArrayMember, jsonMember, jsonObject, TypedJSON } from 'typedjson';\nimport { PublicKey } from './keypair';\nimport { CLValueUInt512 } from './clvalue';\nimport { URef } from './key';\nimport { HexBytes } from './HexBytes';\n\n/**\n * Represents the details of an era where an unbonding request was initiated.\n */\n@jsonObject\nexport class UnbondEra {\n  /**\n   * The amount of tokens to be unbonded during this era.\n   */\n  @jsonMember({\n    name: 'amount',\n    constructor: CLValueUInt512,\n    deserializer: json => {\n      if (!json) return;\n      return CLValueUInt512.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  amount: CLValueUInt512;\n\n  /**\n   * The era in which the unbonding request was created.\n   */\n  @jsonMember({ name: 'era_of_creation', constructor: Number })\n  eraOfCreation: number;\n\n  /**\n   * The bonding purse associated with the unbonding request.\n   */\n  @jsonMember({\n    name: 'bonding_purse',\n    constructor: URef,\n    deserializer: json => {\n      if (!json) return;\n      return URef.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  bondingPurse: URef;\n\n  /**\n   * The validator public key to re-delegate to.\n   */\n  @jsonMember({\n    name: 'new_validator',\n    constructor: PublicKey,\n    deserializer: json => {\n      if (!json) return;\n      return PublicKey.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  newValidator: PublicKey;\n}\n\n/**\n * Represents the kind of unbonding request, including information about the validator,\n * delegated public key, and delegated purse.\n */\n@jsonObject\nexport class UnbondKind {\n  /**\n   * The public key of the validator who the tokens are being unbonded from.\n   */\n  @jsonMember({\n    name: 'Validator',\n    constructor: PublicKey,\n    deserializer: json => {\n      if (!json) return;\n      return PublicKey.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  validator: PublicKey;\n\n  /**\n   * The public key of the delegated account involved in the unbonding.\n   */\n  @jsonMember({\n    name: 'DelegatedPublicKey',\n    constructor: PublicKey,\n    deserializer: json => {\n      if (!json) return;\n      return PublicKey.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  delegatedPublicKey: PublicKey;\n\n  /**\n   * The purse associated with the delegation from which tokens will be unbonded.\n   */\n  @jsonMember({\n    name: 'DelegatedPurse',\n    constructor: String\n  })\n  delegatedPurse: string;\n}\n\n/**\n * Represents a request to unbond tokens, specifying the validator, unbond kind, and eras.\n */\n@jsonObject\nexport class Unbond {\n  /**\n   * The public key of the validator from which tokens are being unbonded.\n   */\n  @jsonMember({\n    name: 'validator_public_key',\n    constructor: PublicKey,\n    deserializer: json => {\n      if (!json) return;\n      return PublicKey.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  validatorPublicKey: PublicKey;\n\n  /**\n   * The kind of unbonding request, detailing whether it's from a validator, delegated public key, or delegated purse.\n   */\n  @jsonMember({\n    name: 'unbond_kind',\n    constructor: UnbondKind\n  })\n  unbondKind: UnbondKind;\n\n  /**\n   * A list of eras during which unbonding occurred.\n   */\n  @jsonArrayMember(UnbondEra, { name: 'eras' })\n  eras: UnbondEra[];\n}\n\n/**\n * Represents a delegation bid, which can be made from either a public key or a purse.\n */\n@jsonObject\nexport class DelegationKind {\n  /**\n   * A delegation bid made using a public key.\n   */\n  @jsonMember({\n    name: 'PublicKey',\n    constructor: PublicKey\n  })\n  publicKey?: PublicKey;\n\n  /**\n   * A delegation bid made using a purse.\n   */\n  @jsonMember({\n    name: 'Purse',\n    constructor: URef\n  })\n  purse?: URef;\n\n  /**\n   * Converts the DelegationKind into a hexadecimal string.\n   *\n   * The method ensures that exactly one of the fields is set. If both or neither\n   * are provided, it throws an error.\n   *\n   *\n   * @returns The hexadecimal string representation of the delegation.\n   * @throws {Error} If neither or both delegation fields are set.\n   */\n  toHex(): string {\n    const hasPublicKey =\n      this.publicKey !== undefined && this.publicKey !== null;\n    const hasPurse = this.purse !== undefined && this.purse !== null;\n\n    if (!hasPublicKey && !hasPurse) {\n      throw new Error(\n        \"Invalid DelegationKind: Neither 'publicKey' nor 'purse' is set. One must be provided.\"\n      );\n    }\n\n    if (hasPublicKey) {\n      return this.publicKey!.toHex();\n    } else {\n      return this.purse!.toPrefixedString();\n    }\n  }\n\n  /**\n   * Deserializes a JSON object into a DelegationKind instance.\n   *\n   * This method examines the input JSON. If it contains a `PublicKey` field,\n   * it will use that to populate the `publicKey` property. Otherwise, if it\n   * contains a `Purse` field, it will decode the hex string, append the default\n   * access byte (`7`), and create a URef instance.\n   *\n   * @param json - The JSON object to deserialize.\n   * @returns A new DelegationKind instance reflecting the given JSON.\n   * @throws {Error} If the input JSON is null or undefined, or if it does not\n   *                 conform to the expected format.\n   */\n  public static fromJSON(json: any): DelegationKind {\n    if (!json) {\n      throw new Error(`Invalid JSON for DelegationKind: ${json}`);\n    }\n\n    const delegatorKind = new DelegationKind();\n\n    if (json.PublicKey !== undefined && json.PublicKey !== null) {\n      delegatorKind.publicKey = PublicKey.fromJSON(json.PublicKey);\n    } else if (json.Purse !== undefined && json.Purse !== null) {\n      /**\n       * Purse is represented not in format at uref-{uref-bytes}-{access}\n       * but just a hex bytes\n       */\n      const urefBytes = HexBytes.fromHex(json.Purse);\n      const bytesWithAccess = new Uint8Array(urefBytes.bytes.length + 1);\n      bytesWithAccess.set(urefBytes.bytes, 0);\n      bytesWithAccess[urefBytes.bytes.length] = 7;\n      delegatorKind.purse = URef.fromBytes(bytesWithAccess).result;\n    } else {\n      throw new Error('unexpected DelegatorKind format');\n    }\n\n    return delegatorKind;\n  }\n}\n\n/**\n * Represents a vesting schedule for staked amounts, including an initial release timestamp and locked amounts.\n */\n@jsonObject\nexport class VestingSchedule {\n  /**\n   * The initial release timestamp in milliseconds.\n   */\n  @jsonMember({ name: 'initial_release_timestamp_millis', constructor: Number })\n  initialReleaseTimestampMillis: number;\n\n  /**\n   * The list of locked amounts associated with this vesting schedule.\n   */\n  @jsonArrayMember(CLValueUInt512, {\n    name: 'locked_amounts',\n    serializer: (value: CLValueUInt512[]) => value.map(it => it.toJSON()),\n    deserializer: (json: any) =>\n      json.map((it: string) => CLValueUInt512.fromJSON(it))\n  })\n  lockedAmounts: CLValueUInt512[];\n}\n\n/**\n * Represents a bid by a validator, including details about the bonding purse, delegation rate, stake, and vesting schedule.\n */\n@jsonObject\nexport class ValidatorBid {\n  /**\n   * The public key associated with the validator.\n   */\n  @jsonMember({\n    name: 'validator_public_key',\n    constructor: PublicKey,\n    deserializer: json => {\n      if (!json) return;\n      return PublicKey.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  validatorPublicKey: PublicKey;\n\n  /**\n   * The bonding purse associated with the validator.\n   */\n  @jsonMember({\n    name: 'bonding_purse',\n    constructor: URef,\n    deserializer: json => {\n      if (!json) return;\n      return URef.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  bondingPurse: URef;\n\n  /**\n   * The rate at which delegations to this validator are taxed.\n   */\n  @jsonMember({ name: 'delegation_rate', constructor: Number })\n  delegationRate: number;\n\n  /**\n   * Indicates whether the validator is currently inactive.\n   */\n  @jsonMember({ name: 'inactive', constructor: Boolean })\n  inactive: boolean;\n\n  /**\n   * The total amount staked by this validator.\n   */\n  @jsonMember({\n    name: 'staked_amount',\n    constructor: CLValueUInt512,\n    deserializer: json => {\n      if (!json) return;\n      return CLValueUInt512.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  stakedAmount: CLValueUInt512;\n\n  /**\n   * Minimum and maximum amounts that can be delegated to this validator.\n   */\n  @jsonMember({\n    name: 'minimum_delegation_amount',\n    constructor: BigInt,\n    deserializer: json => {\n      if (!json) return;\n      try {\n        return BigInt(json);\n      } catch (e) {\n        throw new Error(`Could not convert minimum_delegation_amount: ${json}`);\n      }\n    },\n    serializer: value => value?.toString()\n  })\n  minimumDelegationAmount: bigint;\n\n  @jsonMember({\n    name: 'maximum_delegation_amount',\n    constructor: BigInt,\n    deserializer: json => {\n      if (!json) return;\n      try {\n        return BigInt(json);\n      } catch (e) {\n        throw new Error(`Could not convert maximum_delegation_amount: ${json}`);\n      }\n    },\n    serializer: value => value?.toString()\n  })\n  maximumDelegationAmount: bigint;\n\n  /**\n   * Number of slots reserved for specific delegators\n   */\n  @jsonMember({ name: 'reserved_slots', constructor: Number })\n  reservedSlots: number;\n\n  /**\n   * The vesting schedule for this validator’s stake.\n   */\n  @jsonMember({ name: 'vesting_schedule', constructor: VestingSchedule })\n  vestingSchedule?: VestingSchedule;\n}\n\n/**\n * Represents a delegator who delegates their stake to a validator.\n */\n@jsonObject\nexport class Delegator {\n  @jsonMember({\n    name: 'bonding_purse',\n    constructor: URef,\n    deserializer: json => {\n      if (!json) return;\n      return URef.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  bondingPurse: URef;\n\n  @jsonMember({\n    name: 'staked_amount',\n    constructor: CLValueUInt512,\n    deserializer: json => {\n      if (!json) return;\n      return CLValueUInt512.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  stakedAmount: CLValueUInt512;\n\n  @jsonMember({\n    name: 'delegator_kind',\n    constructor: DelegationKind,\n    deserializer: json => {\n      if (!json) return;\n      return DelegationKind.fromJSON(json);\n    }\n  })\n  delegatorKind: DelegationKind;\n\n  @jsonMember({\n    name: 'validator_public_key',\n    constructor: PublicKey,\n    deserializer: json => {\n      if (!json) return;\n      return PublicKey.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  validatorPublicKey: PublicKey;\n\n  @jsonMember({ name: 'vesting_schedule', constructor: VestingSchedule })\n  vestingSchedule?: VestingSchedule;\n\n  constructor(\n    bondingPurse: URef,\n    stakedAmount: CLValueUInt512,\n    delegatorKind: DelegationKind,\n    validatorPublicKey: PublicKey,\n    vestingSchedule?: VestingSchedule\n  ) {\n    this.bondingPurse = bondingPurse;\n    this.stakedAmount = stakedAmount;\n    this.delegatorKind = delegatorKind;\n    this.validatorPublicKey = validatorPublicKey;\n    this.vestingSchedule = vestingSchedule;\n  }\n\n  /**\n   * Creates a `Delegator` instance from a `DelegatorV1` instance.\n   * @param v1 - The `DelegatorV1` instance to convert.\n   * @returns A new `Delegator` instance.\n   */\n  static newDelegatorFromDelegatorV1(v1: DelegatorV1): Delegator {\n    const delegationKind = new DelegationKind();\n    delegationKind.publicKey = v1.publicKey;\n\n    return new Delegator(\n      v1.bondingPurse,\n      v1.stakedAmount,\n      delegationKind,\n      v1.delegatee,\n      v1.vestingSchedule\n    );\n  }\n\n  /**\n   * Deserializes a `Delegator` instance from JSON.\n   * @param json\n   */\n  static fromJSON(json: any): Delegator[] {\n    if (!Array.isArray(json)) {\n      throw new Error('Delegators should be an array.');\n    }\n\n    if (json.length > 0 && json[0].delegator_public_key != null) {\n      return json.map((item: any) => {\n        const delegatorJson = item.delegator;\n        const serializer = new TypedJSON(Delegator);\n        const delegator = serializer.parse(delegatorJson);\n\n        if (!delegator) {\n          throw new Error(\n            'Failed to deserialize Delegator from wrapped format.'\n          );\n        }\n\n        return delegator;\n      });\n    } else {\n      return json.map((item: any) => {\n        const delegatorV1Serializer = new TypedJSON(DelegatorV1);\n        const delegatorV1 = delegatorV1Serializer.parse(item);\n        if (!delegatorV1) {\n          throw new Error('Failed to deserialize DelegatorV1.');\n        }\n        return this.newDelegatorFromDelegatorV1(delegatorV1);\n      });\n    }\n  }\n}\n\n/**\n * Represents a bid entry, including the bonding purse, delegation rate, inactive status, and vesting schedule.\n */\n@jsonObject\nexport class Bid {\n  @jsonMember({\n    name: 'bonding_purse',\n    constructor: URef,\n    deserializer: json => {\n      if (!json) return;\n      return URef.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  bondingPurse: URef;\n\n  @jsonMember({ name: 'delegation_rate', constructor: Number })\n  delegationRate: number;\n\n  @jsonMember({ name: 'inactive', constructor: Boolean })\n  inactive: boolean;\n\n  @jsonMember({\n    name: 'staked_amount',\n    constructor: CLValueUInt512,\n    deserializer: json => {\n      if (!json) return;\n      return CLValueUInt512.fromJSON(json);\n    },\n    serializer: (value: CLValueUInt512) => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  stakedAmount: CLValueUInt512;\n\n  @jsonMember({\n    name: 'validator_public_key',\n    constructor: PublicKey,\n    deserializer: json => {\n      if (!json) return;\n      return PublicKey.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  validatorPublicKey: PublicKey;\n\n  @jsonArrayMember(Delegator, {\n    name: 'delegators',\n    deserializer: json => {\n      if (!json) return;\n      return Delegator.fromJSON(json);\n    }\n  })\n  delegators: Delegator[];\n\n  @jsonMember({ name: 'vesting_schedule', constructor: VestingSchedule })\n  vestingSchedule?: VestingSchedule;\n}\n\n/**\n * Represents a version 1 delegator with basic properties such as bonding purse and stake amount.\n */\n@jsonObject\nexport class DelegatorV1 {\n  @jsonMember({\n    name: 'bonding_purse',\n    constructor: URef,\n    deserializer: json => {\n      if (!json) return;\n      return URef.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  bondingPurse: URef;\n\n  @jsonMember({\n    name: 'staked_amount',\n    constructor: CLValueUInt512,\n    deserializer: json => {\n      if (!json) return;\n      return CLValueUInt512.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  stakedAmount: CLValueUInt512;\n\n  @jsonMember({\n    name: 'delegatee',\n    constructor: PublicKey,\n    deserializer: json => {\n      if (!json) return;\n      return PublicKey.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  delegatee: PublicKey;\n\n  @jsonMember({\n    name: 'public_key',\n    constructor: PublicKey,\n    deserializer: json => {\n      if (!json) return;\n      return PublicKey.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  publicKey: PublicKey;\n\n  @jsonMember({ name: 'vesting_schedule', constructor: VestingSchedule })\n  vestingSchedule?: VestingSchedule;\n}\n\n/**\n * Represents a credit in a staking system, tied to a specific era and validator.\n */\n@jsonObject\nexport class Credit {\n  /**\n   * The era ID associated with this credit.\n   */\n  @jsonMember({ name: 'era_id', constructor: Number })\n  eraID: number;\n\n  /**\n   * The public key of the validator for this credit.\n   */\n  @jsonMember({\n    name: 'validator_public_key',\n    constructor: PublicKey,\n    deserializer: json => {\n      if (!json) return;\n      return PublicKey.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  validatorPublicKey: PublicKey;\n\n  /**\n   * The amount of the credit.\n   */\n  @jsonMember({\n    name: 'amount',\n    constructor: CLValueUInt512,\n    deserializer: json => {\n      if (!json) return;\n      return CLValueUInt512.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  amount: CLValueUInt512;\n}\n\n/**\n * Represents a bridge between validators, including their public keys and the associated era.\n */\n@jsonObject\nexport class Bridge {\n  /**\n   * The era ID during which this bridge was established.\n   */\n  @jsonMember({ name: 'era_id', constructor: Number })\n  eraID: number;\n\n  /**\n   * The public key of the old validator.\n   */\n  @jsonMember({\n    name: 'old_validator_public_key',\n    constructor: PublicKey,\n    deserializer: json => {\n      if (!json) return;\n      return PublicKey.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  oldValidatorPublicKey: PublicKey;\n\n  /**\n   * The public key of the new validator.\n   */\n  @jsonMember({\n    name: 'new_validator_public_key',\n    constructor: PublicKey,\n    deserializer: json => {\n      if (!json) return;\n      return PublicKey.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  newValidatorPublicKey: PublicKey;\n}\n\n@jsonObject\n/**\n * Represents a reservation in the blockchain system, including delegation details and associated public keys.\n */\nexport class Reservation {\n  /**\n   * The delegation rate, representing the percentage of rewards allocated to the delegator.\n   */\n  @jsonMember({ name: 'delegation_rate', constructor: Number })\n  delegationRate: number;\n\n  /**\n   * The public key of the validator associated with this reservation.\n   *\n   * This key is used to identify the validator in the blockchain system.\n   */\n  @jsonMember({\n    name: 'validator_public_key',\n    constructor: PublicKey,\n    deserializer: json => {\n      if (!json) return;\n      return PublicKey.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  validatorPublicKey: PublicKey;\n\n  /**\n   * Kinds of delegation bids.\n   */\n  @jsonMember({\n    name: 'delegator_kind',\n    constructor: DelegationKind,\n    deserializer: json => {\n      if (!json) return;\n      return DelegationKind.fromJSON(json);\n    }\n  })\n  delegatorKind: DelegationKind;\n}\n","import { jsonObject, jsonMember } from 'typedjson';\nimport {\n  Bid,\n  Bridge,\n  Credit,\n  Delegator,\n  Reservation,\n  Unbond,\n  ValidatorBid\n} from './Bid';\n\n/**\n * Represents a polymorphic bid kind, which can hold different types of bid-related entities.\n * This class allows for various bid types, such as unified bids, validator bids, delegator bids,\n * bridge transitions, credits, and reservations. It provides flexibility to manage various bidding\n * scenarios in a decentralized system.\n */\n@jsonObject\nexport class BidKind {\n  /**\n   * A unified bid that combines multiple bid attributes, serving as a general bid type.\n   * This type can hold any bid-related information that doesn't fit into the specific categories\n   * below, allowing for a broader range of bidding scenarios.\n   */\n  @jsonMember({ name: 'Unified', constructor: Bid })\n  unified?: Bid;\n\n  /**\n   * A bid specific to a validator, containing information unique to the validator's bid.\n   * This may include details such as the validator's identity, bid amount, and other relevant\n   * parameters that differentiate it from other types of bids.\n   */\n  @jsonMember({ name: 'Validator', constructor: ValidatorBid })\n  validator?: ValidatorBid;\n\n  /**\n   * A bid from a delegator, representing a user delegating their stake to a validator.\n   * This field holds information about the delegator's public key, amount of stake delegated,\n   * and any other relevant data specific to the delegation process.\n   */\n  @jsonMember({ name: 'Delegator', constructor: Delegator })\n  delegator?: Delegator;\n\n  /**\n   * Represents a bridge transition between validators, allowing for the transfer of a validator's\n   * responsibilities to another validator. This can be useful in the context of network upgrades\n   * or validator rotations.\n   */\n  @jsonMember({ name: 'Bridge', constructor: Bridge })\n  bridge?: Bridge;\n\n  /**\n   * A credit entry for a validator, specifying an amount of credit and the era in which the credit\n   * is awarded. This can be used to track validator performance, reputation, or other forms of credit\n   * that might be relevant in the ecosystem.\n   */\n  @jsonMember({ name: 'Credit', constructor: Credit })\n  credit?: Credit;\n\n  /**\n   * Represents a reservation made by a validator for a specific delegator, ensuring that a slot\n   * is reserved for the delegator to join the validator's pool. This may be used in scenarios where\n   * validators want to guarantee space for specific delegators.\n   */\n  @jsonMember({ name: 'Reservation', constructor: Reservation })\n  reservation?: Reservation;\n\n  /**\n   * Represents an unbonding request, where a delegator or validator requests to unbond previously\n   * bonded assets. This could involve the release of staked tokens and their return to the original\n   * owner, with associated properties like bonding era and validator information.\n   */\n  @jsonMember({ name: 'Unbond', constructor: Unbond })\n  unbond?: Unbond;\n\n  /**\n   * Constructs a new instance of BidKind.\n   *\n   * @param unified - (Optional) A unified bid.\n   * @param validator - (Optional) A validator-specific bid.\n   * @param delegator - (Optional) A delegator bid.\n   * @param bridge - (Optional) A bridge transition bid.\n   * @param credit - (Optional) A credit bid.\n   * @param reservation - (Optional) A reservation bid.\n   * @param unbond - (Optional) An unbonding request bid.\n   */\n  constructor(\n    unified?: Bid,\n    validator?: ValidatorBid,\n    delegator?: Delegator,\n    bridge?: Bridge,\n    credit?: Credit,\n    reservation?: Reservation,\n    unbond?: Unbond\n  ) {\n    this.unified = unified;\n    this.validator = validator;\n    this.delegator = delegator;\n    this.bridge = bridge;\n    this.credit = credit;\n    this.reservation = reservation;\n    this.unbond = unbond;\n  }\n}\n","import { jsonObject, jsonMember, jsonArrayMember, TypedJSON } from 'typedjson';\nimport { Hash } from './key';\nimport { Timestamp } from './Time';\nimport { Proposer } from './BlockProposer';\nimport { EraEnd, EraEndV1, EraEndV2 } from './EraEnd';\nimport {\n  TransactionCategory,\n  TransactionHash,\n  TransactionVersion\n} from './Transaction';\nimport { PublicKey } from './keypair';\nimport { HexBytes } from './HexBytes';\nimport { getEnumKeyByValue } from \"../utils\";\n\n/**\n * Represents a proof containing a public key and a signature, used for validating the authenticity of data.\n */\n@jsonObject\nexport class Proof {\n  /**\n   * The public key associated with the proof.\n   * This key is used to verify the signature's validity.\n   */\n  @jsonMember({\n    constructor: PublicKey,\n    name: 'public_key',\n    deserializer: (json: string) => PublicKey.fromJSON(json),\n    serializer: (value: PublicKey) => value.toJSON()\n  })\n  public publicKey: PublicKey;\n\n  /**\n   * The signature generated by the associated public key.\n   * The signature proves the authenticity of the data or transaction.\n   */\n  @jsonMember({\n    name: 'signature',\n    constructor: HexBytes,\n    deserializer: (json: string) => HexBytes.fromJSON(json),\n    serializer: (value: HexBytes) => value.toJSON()\n  })\n  public signature: HexBytes;\n}\n\n/**\n * Represents a block in the blockchain containing metadata, transactions, and proof.\n * A block includes information like the hash, height, parent block, transactions, and more.\n */\n@jsonObject\nexport class Block {\n  /**\n   * The unique hash of the block.\n   */\n  @jsonMember({\n    name: 'hash',\n    constructor: Hash,\n    deserializer: (json: string) => Hash.fromJSON(json),\n    serializer: (value: Hash) => value.toJSON()\n  })\n  public hash: Hash;\n\n  /**\n   * The height of the block in the blockchain.\n   */\n  @jsonMember({ name: 'height', constructor: Number })\n  public height: number;\n\n  /**\n   * The hash of the state root associated with the block.\n   */\n  @jsonMember({\n    name: 'state_root_hash',\n    constructor: Hash,\n    deserializer: (json: string) => Hash.fromJSON(json),\n    serializer: (value: Hash) => value.toJSON()\n  })\n  public stateRootHash: Hash;\n\n  /**\n   * The hash of the block that switched the current state, if available.\n   * This can be `null` if not applicable.\n   */\n  @jsonMember({\n    name: 'last_switch_block_hash',\n    constructor: Hash,\n    deserializer: (json: string) => (json ? Hash.fromJSON(json) : null),\n    serializer: (value: Hash) => (value ? value.toJSON() : null),\n    preserveNull: true\n  })\n  public lastSwitchBlockHash: Hash | null;\n\n  /**\n   * The hash of the parent block in the blockchain.\n   */\n  @jsonMember({\n    name: 'parent_hash',\n    constructor: Hash,\n    deserializer: (json: string) => Hash.fromJSON(json),\n    serializer: (value: Hash) => value.toJSON()\n  })\n  public parentHash: Hash;\n\n  /**\n   * The era ID in which this block was created.\n   */\n  @jsonMember({ name: 'era_id', constructor: Number })\n  public eraID: number;\n\n  /**\n   * The timestamp indicating when the block was created.\n   */\n  @jsonMember({\n    name: 'timestamp',\n    constructor: Timestamp,\n    deserializer: (json: string) => Timestamp.fromJSON(json),\n    serializer: (value: Timestamp) => value.toJSON()\n  })\n  public timestamp: Timestamp;\n\n  /**\n   * The accumulated seed for randomness in the block generation.\n   */\n  @jsonMember({\n    name: 'accumulated_seed',\n    constructor: Hash,\n    deserializer: (json: string) => {\n      if (!json) return;\n      return Hash.fromJSON(json);\n    },\n    serializer: (value: Hash) => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  public accumulatedSeed?: Hash;\n\n  /**\n   * A random bit used for proof-of-stake consensus.\n   */\n  @jsonMember({ name: 'random_bit', constructor: Boolean })\n  public randomBit: boolean;\n\n  /**\n   * The current gas price for transactions included in the block.\n   */\n  @jsonMember({ name: 'current_gas_price', constructor: Number })\n  public currentGasPrice: number;\n\n  /**\n   * The proposer who created this block.\n   */\n  @jsonMember({\n    name: 'proposer',\n    constructor: Proposer,\n    deserializer: (json: string) => Proposer.fromJSON(json),\n    serializer: (value: Proposer) => value.toJSON()\n  })\n  public proposer: Proposer;\n\n  /**\n   * The protocol version used for this block.\n   */\n  @jsonMember({ name: 'protocol_version', constructor: String })\n  public protocolVersion?: string;\n\n  /**\n   * The era end details, if available, for the block's era.\n   */\n  @jsonMember({ name: 'era_end', constructor: EraEnd })\n  public eraEnd?: EraEnd;\n\n  /**\n   * The list of transactions included in this block.\n   */\n  @jsonArrayMember(() => BlockTransaction, {\n    name: 'transactions',\n    deserializer: (json: string) => BlockTransaction.fromJSON(json)\n  })\n  public transactions: BlockTransaction[];\n\n  /**\n   * A list of signature IDs that were rewarded in this block.\n   */\n  @jsonArrayMember(Number, { dimensions: 2, name: 'rewarded_signatures' })\n  public rewardedSignatures: number[][];\n\n  /**\n   * A list of proofs associated with this block.\n   */\n  @jsonArrayMember(() => Proof, { name: 'proofs' })\n  public proofs: Proof[];\n\n  /**\n   * The origin block in V1 format, if available.\n   */\n  public originBlockV1?: BlockV1;\n\n  /**\n   * The origin block in V2 format, if available.\n   */\n  public originBlockV2?: BlockV2;\n\n  /**\n   * Constructs a new `Block` instance.\n   * @param hash - The unique hash of the block.\n   * @param height - The height of the block in the blockchain.\n   * @param stateRootHash - The hash of the state root for the block.\n   * @param lastSwitchBlockHash - The hash of the block that switched the state, if available.\n   * @param parentHash - The hash of the parent block.\n   * @param eraID - The era ID in which the block was created.\n   * @param timestamp - The timestamp of the block creation.\n   * @param accumulatedSeed - The accumulated seed for randomness in the block.\n   * @param randomBit - A random bit used for consensus.\n   * @param currentGasPrice - The current gas price for transactions in the block.\n   * @param proposer - The proposer of the block.\n   * @param protocolVersion - The protocol version of the block.\n   * @param eraEnd - The era end details for the block's era, if available.\n   * @param transactions - The list of transactions included in the block.\n   * @param rewardedSignatures - The list of rewarded signatures.\n   * @param proofs - The list of proofs associated with the block.\n   * @param originBlockV1 - The origin block in V1 format, if available.\n   * @param originBlockV2 - The origin block in V2 format, if available.\n   */\n  constructor(\n    hash: Hash,\n    height: number,\n    stateRootHash: Hash,\n    lastSwitchBlockHash: Hash | null,\n    parentHash: Hash,\n    eraID: number,\n    timestamp: Timestamp,\n    accumulatedSeed: Hash | undefined,\n    randomBit: boolean,\n    currentGasPrice: number,\n    proposer: Proposer,\n    protocolVersion: string | undefined,\n    eraEnd: EraEnd | undefined,\n    transactions: BlockTransaction[],\n    rewardedSignatures: number[][],\n    proofs: Proof[],\n    originBlockV1?: BlockV1,\n    originBlockV2?: BlockV2\n  ) {\n    this.hash = hash;\n    this.height = height;\n    this.stateRootHash = stateRootHash;\n    this.lastSwitchBlockHash = lastSwitchBlockHash;\n    this.parentHash = parentHash;\n    this.eraID = eraID;\n    this.timestamp = timestamp;\n    this.accumulatedSeed = accumulatedSeed;\n    this.randomBit = randomBit;\n    this.currentGasPrice = currentGasPrice;\n    this.proposer = proposer;\n    this.protocolVersion = protocolVersion;\n    this.eraEnd = eraEnd;\n    this.transactions = transactions;\n    this.rewardedSignatures = rewardedSignatures;\n    this.proofs = proofs;\n    this.originBlockV1 = originBlockV1;\n    this.originBlockV2 = originBlockV2;\n  }\n\n  /**\n   * Retrieves the V1 format of the origin block, if available.\n   * @returns The origin block in V1 format, or `undefined` if not available.\n   */\n  getBlockV1(): BlockV1 | undefined {\n    return this.originBlockV1;\n  }\n\n  /**\n   * Retrieves the V2 format of the origin block, if available.\n   * @returns The origin block in V2 format, or `undefined` if not available.\n   */\n  getBlockV2(): BlockV2 | undefined {\n    return this.originBlockV2;\n  }\n\n  /**\n   * Creates a new `Block` instance from a `BlockWrapper` object, which may contain either V1 or V2 block format.\n   * @param blockWrapper - The `BlockWrapper` containing either `blockV1` or `blockV2`.\n   * @param proofs - The list of proofs associated with the block.\n   * @returns A new `Block` instance based on the provided `blockWrapper` and `proofs`.\n   * @throws Will throw an error if the `blockWrapper` does not contain a valid `blockV1` or `blockV2`.\n   */\n  static newBlockFromBlockWrapper(\n    blockWrapper: BlockWrapper,\n    proofs: Proof[]\n  ): Block {\n    if (blockWrapper.blockV1) {\n      const block = Block.newBlockFromBlockV1(blockWrapper.blockV1);\n      block.proofs = proofs;\n      return block;\n    } else if (blockWrapper.blockV2) {\n      const blockV2 = blockWrapper.blockV2;\n      return new Block(\n        blockV2.hash,\n        blockV2.header.height,\n        blockV2.header.stateRootHash,\n        blockV2.header.lastSwitchBlockHash,\n        blockV2.header.parentHash,\n        blockV2.header.eraID,\n        blockV2.header.timestamp,\n        blockV2.header.accumulatedSeed,\n        blockV2.header.randomBit,\n        blockV2.header.currentGasPrice,\n        blockV2.header.proposer,\n        blockV2.header.protocolVersion,\n        EraEnd.fromV2(blockV2.header.eraEnd ?? null) ?? undefined,\n        blockV2.body.transactions,\n        blockV2.body.rewardedSignatures,\n        proofs,\n        undefined,\n        blockV2\n      );\n    }\n    throw new Error('BlockWrapper must contain either BlockV1 or BlockV2');\n  }\n\n  /**\n   * Creates a new `Block` instance from a V1 block format.\n   * @param blockV1 - The V1 block format.\n   * @returns A new `Block` instance created from the provided V1 block format.\n   */\n  static newBlockFromBlockV1(blockV1: BlockV1): Block {\n    const blockTransactions: BlockTransaction[] = [];\n\n    for (const transferHash of blockV1.body.transferHashes) {\n      blockTransactions.push(\n        new BlockTransaction(\n          TransactionCategory.Mint,\n          TransactionVersion.Deploy,\n          transferHash\n        )\n      );\n    }\n\n    for (const deployHash of blockV1.body.deployHashes) {\n      blockTransactions.push(\n        new BlockTransaction(\n          TransactionCategory.Large,\n          TransactionVersion.Deploy,\n          deployHash\n        )\n      );\n    }\n\n    return new Block(\n      blockV1.hash,\n      blockV1.header.height,\n      blockV1.header.stateRootHash,\n      null,\n      blockV1.header.parentHash,\n      blockV1.header.eraID,\n      blockV1.header.timestamp,\n      blockV1.header.accumulatedSeed,\n      blockV1.header.randomBit,\n      1,\n      blockV1.body.proposer,\n      blockV1.header.protocolVersion,\n      EraEnd.fromV1(blockV1.header.eraEnd ?? null) ?? undefined,\n      blockTransactions,\n      [],\n      blockV1.proofs,\n      blockV1\n    );\n  }\n}\n\n/**\n * Represents a transaction within a block, identified by a category, version, and hash.\n * Each `BlockTransaction` stores the category of the transaction, its version, and a unique hash.\n */\n@jsonObject\nexport class BlockTransaction {\n  /**\n   * The category of the transaction, indicating the type of transaction.\n   * This could be one of the predefined categories such as Mint, Auction, InstallUpgrade, etc.\n   */\n  @jsonMember({ name: 'Category', constructor: Number })\n  public category: TransactionCategory;\n\n  /**\n   * The version of the transaction, specifying the version of the transaction protocol.\n   */\n  @jsonMember({ name: 'Version', constructor: Number })\n  public version: TransactionVersion;\n\n  /**\n   * The unique hash identifying the transaction.\n   * This hash serves as a reference to the transaction.\n   */\n  @jsonMember({\n    name: 'Hash',\n    constructor: Hash,\n    deserializer: (json: string) => Hash.fromJSON(json),\n    serializer: (value: Hash) => value.toJSON()\n  })\n  public hash: Hash;\n\n  /**\n   * Constructs a new `BlockTransaction` instance.\n   * @param category - The category of the transaction (e.g., Mint, Auction).\n   * @param version - The version of the transaction protocol.\n   * @param hash - The unique hash identifying the transaction.\n   */\n  constructor(\n    category: TransactionCategory,\n    version: TransactionVersion,\n    hash: Hash\n  ) {\n    this.category = category;\n    this.version = version;\n    this.hash = hash;\n  }\n\n  /**\n   * Deserializes a JSON object into an array of `BlockTransaction` instances.\n   * The input `data` is expected to contain transaction hashes categorized by their types.\n   *\n   * @param data - The serialized data representing transactions categorized by type.\n   * @returns An array of `BlockTransaction` instances.\n   *\n   * @example\n   * const jsonData = { '0': ['hash1', 'hash2'], '1': ['hash3'] };\n   * const transactions = BlockTransaction.fromJSON(jsonData);\n   * console.log(transactions); // Outputs an array of BlockTransaction instances.\n   */\n  public static fromJSON(data: any): BlockTransaction[] {\n    const serializer = new TypedJSON(TransactionHash)\n    const source = {\n      Mint: (data['0'] || []).map((json: any) => serializer.parse(json)),\n      Auction: (data['1'] || []).map((json: any) => serializer.parse(json)),\n      InstallUpgrade: (data['2'] || []).map((json: any) => serializer.parse(json)),\n      Large: (data['3'] || []).map((json: any) => serializer.parse(json)),\n      Medium: (data['4'] || []).map((json: any) => serializer.parse(json)),\n      Small: (data['5'] || []).map((json: any) => serializer.parse(json))\n    };\n\n    const transactions: BlockTransaction[] = [];\n    transactions.push(\n      ...getBlockTransactionsFromTransactionHashes(\n        source.Mint,\n        TransactionCategory.Mint\n      ),\n      ...getBlockTransactionsFromTransactionHashes(\n        source.Auction,\n        TransactionCategory.Auction\n      ),\n      ...getBlockTransactionsFromTransactionHashes(\n        source.InstallUpgrade,\n        TransactionCategory.InstallUpgrade\n      ),\n      ...getBlockTransactionsFromTransactionHashes(\n        source.Large,\n        TransactionCategory.Large\n      ),\n      ...getBlockTransactionsFromTransactionHashes(\n        source.Medium,\n        TransactionCategory.Medium\n      ),\n      ...getBlockTransactionsFromTransactionHashes(\n        source.Small,\n        TransactionCategory.Small\n      )\n    );\n\n    return transactions;\n  }\n\n  public toJSON(): string {\n    return JSON.stringify({\n      [this.category.toString()]: [{[getEnumKeyByValue(TransactionVersion, this.version) ?? '']: this.hash.toJSON()}]\n    });\n  }\n}\n\n/**\n * Converts an array of `TransactionHash` objects into an array of `BlockTransaction` instances.\n * Each `TransactionHash` is associated with a specific category, and the resulting `BlockTransaction` includes the category,\n * version, and the hash of the transaction.\n *\n * @param hashes - An array of `TransactionHash` objects, each representing a transaction hash.\n * @param category - The category of the transaction (e.g., Mint, Auction).\n * @returns An array of `BlockTransaction` instances, each representing a transaction.\n *\n * @throws {Error} If any of the `TransactionHash` objects does not contain a valid `transactionV1`.\n *\n */\nfunction getBlockTransactionsFromTransactionHashes(\n  hashes: TransactionHash[],\n  category: TransactionCategory\n): BlockTransaction[] {\n  if (hashes.length === 0) {\n    return [];\n  }\n\n  return hashes.map(hash => {\n    const transactionHash = hash.transactionV1;\n    const deployHash = hash.deploy;\n\n    if (transactionHash) {\n      return new BlockTransaction(\n        category,\n        TransactionVersion.V1,\n        transactionHash\n      );\n    } else if (deployHash) {\n      return new BlockTransaction(\n        category,\n        TransactionVersion.Deploy,\n        deployHash\n      );\n    }\n\n    throw new Error(\n      'Invalid TransactionHash: transactionV1 and deploy is undefined'\n    );\n  });\n}\n\n/**\n * Parses a JSON string representing block transactions and converts them into an array of `BlockTransaction` instances.\n * The input data is expected to be a JSON object with categories (e.g., '0', '1', etc.) mapping to arrays of `TransactionHash` objects.\n * Each category corresponds to a specific type of transaction, such as Mint, Auction, etc.\n *\n * @param data - A JSON string containing transaction categories as keys ('0', '1', etc.), with each key pointing to an array of `TransactionHash` objects.\n * @returns An array of `BlockTransaction` instances representing the transactions in the block.\n *\n * @throws {Error} If the input `data` is not valid JSON or does not conform to the expected structure.\n *\n * @example\n * const jsonData = '{\"0\": [{\"transactionV1\": \"hash1\"}], \"1\": [{\"transactionV1\": \"hash2\"}]}';\n * const transactions = parseBlockTransactions(jsonData);\n * console.log(transactions); // Outputs an array of BlockTransaction instances for Mint and Auction transactions.\n */\nexport function parseBlockTransactions(data: string): BlockTransaction[] {\n  const source = JSON.parse(data) as {\n    '0'?: TransactionHash[];\n    '1'?: TransactionHash[];\n    '2'?: TransactionHash[];\n    '3'?: TransactionHash[];\n    '4'?: TransactionHash[];\n    '5'?: TransactionHash[];\n  };\n\n  const result: BlockTransaction[] = [];\n\n  if (source['0'])\n    result.push(\n      ...getBlockTransactionsFromTransactionHashes(\n        source['0'],\n        TransactionCategory.Mint\n      )\n    );\n  if (source['1'])\n    result.push(\n      ...getBlockTransactionsFromTransactionHashes(\n        source['1'],\n        TransactionCategory.Auction\n      )\n    );\n  if (source['2'])\n    result.push(\n      ...getBlockTransactionsFromTransactionHashes(\n        source['2'],\n        TransactionCategory.InstallUpgrade\n      )\n    );\n  if (source['3'])\n    result.push(\n      ...getBlockTransactionsFromTransactionHashes(\n        source['3'],\n        TransactionCategory.Large\n      )\n    );\n  if (source['4'])\n    result.push(\n      ...getBlockTransactionsFromTransactionHashes(\n        source['4'],\n        TransactionCategory.Medium\n      )\n    );\n  if (source['5'])\n    result.push(\n      ...getBlockTransactionsFromTransactionHashes(\n        source['5'],\n        TransactionCategory.Small\n      )\n    );\n\n  return result;\n}\n\n/**\n * Represents the header of a version 1 block in the blockchain.\n * The header contains metadata about the block, such as its height, parent hash, protocol version, and timestamps.\n */\n@jsonObject\nexport class BlockHeaderV1 {\n  /**\n   * The accumulated seed used for randomness in block generation.\n   * This seed is generated from previous blocks and influences the consensus.\n   */\n  @jsonMember({\n    name: 'accumulated_seed',\n    constructor: Hash,\n    deserializer: (json: string) => {\n      if (!json) return;\n      return Hash.fromJSON(json);\n    },\n    serializer: (value: Hash) => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  public accumulatedSeed?: Hash;\n\n  /**\n   * The hash of the block's body, which contains the transactions and other block data.\n   * This is used to verify the integrity of the block's contents.\n   */\n  @jsonMember({\n    name: 'body_hash',\n    constructor: Hash,\n    deserializer: (json: string) => Hash.fromJSON(json),\n    serializer: (value: Hash) => value.toJSON()\n  })\n  public bodyHash: Hash;\n\n  /**\n   * The era ID in which this block was created.\n   * The era ID represents the block's position within a specific era in the blockchain.\n   */\n  @jsonMember({ name: 'era_id', constructor: Number })\n  public eraID: number;\n\n  /**\n   * The height of the block in the blockchain.\n   * The block height indicates its position relative to the first block in the chain (genesis block).\n   */\n  @jsonMember({ name: 'height', constructor: Number })\n  public height: number;\n\n  /**\n   * The hash of the parent block, linking this block to its predecessor in the chain.\n   * The parent hash is used to verify the continuity of the blockchain.\n   */\n  @jsonMember({\n    name: 'parent_hash',\n    constructor: Hash,\n    deserializer: (json: string) => Hash.fromJSON(json),\n    serializer: (value: Hash) => value.toJSON()\n  })\n  public parentHash: Hash;\n\n  /**\n   * The protocol version used for this block, indicating the version of the consensus rules.\n   */\n  @jsonMember({ name: 'protocol_version', constructor: String })\n  public protocolVersion?: string;\n\n  /**\n   * A random bit used for consensus, which may play a role in the block's selection or generation.\n   */\n  @jsonMember({ name: 'random_bit', constructor: Boolean })\n  public randomBit: boolean;\n\n  /**\n   * The hash of the state root, representing the state of the blockchain after this block is applied.\n   * The state root hash is used to verify the consistency of the blockchain's state.\n   */\n  @jsonMember({\n    name: 'state_root_hash',\n    constructor: Hash,\n    deserializer: (json: string) => Hash.fromJSON(json),\n    serializer: (value: Hash) => value.toJSON()\n  })\n  public stateRootHash: Hash;\n\n  /**\n   * The timestamp indicating when the block was created.\n   * This timestamp helps to determine the block's position in time within the blockchain.\n   */\n  @jsonMember({\n    name: 'timestamp',\n    constructor: Timestamp,\n    deserializer: (json: string) => Timestamp.fromJSON(json),\n    serializer: (value: Timestamp) => value.toJSON()\n  })\n  public timestamp: Timestamp;\n\n  /**\n   * The era end details for this block's era, if available.\n   * The `eraEnd` may include information about the transition from one era to another.\n   */\n  @jsonMember({ name: 'era_end', constructor: EraEndV1 })\n  public eraEnd?: EraEndV1;\n}\n\n/**\n * Represents the body of a version 1 block in the blockchain.\n * The body contains essential data related to transactions, deploys, and other actions within the block.\n */\n@jsonObject\nexport class BlockBodyV1 {\n  /**\n   * The list of deploy hashes included in the block.\n   * Deploys represent the transactions that are being executed within this block.\n   */\n  @jsonArrayMember(() => Hash, {\n    name: 'deploy_hashes',\n    serializer: (value: Hash[]) => value.map(it => it.toJSON()),\n    deserializer: (json: any) => json.map((it: string) => Hash.fromJSON(it))\n  })\n  public deployHashes: Hash[];\n\n  /**\n   * The proposer of the block, which represents the entity that created or proposed the block.\n   */\n  @jsonMember({\n    name: 'proposer',\n    constructor: Proposer,\n    deserializer: (json: string) => Proposer.fromJSON(json),\n    serializer: (value: Proposer) => value.toJSON()\n  })\n  public proposer: Proposer;\n\n  /**\n   * The list of transfer hashes included in the block.\n   * Transfers represent the transactions related to the movement of tokens within the blockchain.\n   */\n  @jsonArrayMember(() => Hash, {\n    name: 'transfer_hashes',\n    serializer: (value: Hash[]) => value.map(it => it.toJSON()),\n    deserializer: (json: any) => json.map((it: string) => Hash.fromJSON(it))\n  })\n  public transferHashes: Hash[];\n}\n\n/**\n * Represents a version 1 block in the blockchain, including the block's metadata (header), body, and proofs.\n * A `BlockV1` contains the block's unique hash, header (which includes metadata like height and era ID), body (which includes transactions),\n * and an array of proofs related to the block.\n */\n@jsonObject\nexport class BlockV1 {\n  /**\n   * The unique hash of the block, used to identify and verify the block in the blockchain.\n   */\n  @jsonMember({\n    name: 'hash',\n    constructor: Hash,\n    deserializer: (json: string) => Hash.fromJSON(json),\n    serializer: (value: Hash) => value.toJSON()\n  })\n  public hash: Hash;\n\n  /**\n   * The header of the block, containing metadata such as block height, era ID, and timestamp.\n   */\n  @jsonMember({ name: 'header', constructor: BlockHeaderV1 })\n  public header: BlockHeaderV1;\n\n  /**\n   * The body of the block, which contains the transactions and related data for the block.\n   */\n  @jsonMember({ name: 'body', constructor: BlockBodyV1 })\n  public body: BlockBodyV1;\n\n  /**\n   * An array of proofs associated with the block, used to verify the authenticity of the block.\n   */\n  @jsonArrayMember(Proof, { name: 'proofs' })\n  public proofs: Proof[];\n}\n\n/**\n * Represents the header of a version 2 block in the blockchain.\n * Contains metadata such as the block's height, parent hash, timestamp, gas price, and more.\n */\n@jsonObject\nexport class BlockHeaderV2 {\n  /**\n   * The accumulated seed used for randomness in block generation.\n   * This seed is generated from previous blocks and influences the consensus.\n   */\n  @jsonMember({\n    name: 'accumulated_seed',\n    constructor: Hash,\n    deserializer: (json: string) => {\n      if (!json) return;\n      return Hash.fromJSON(json);\n    },\n    serializer: (value: Hash) => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  public accumulatedSeed?: Hash;\n\n  /**\n   * The hash of the block's body, which contains the transactions and other data.\n   * This is used to verify the integrity of the block's contents.\n   */\n  @jsonMember({\n    name: 'body_hash',\n    constructor: Hash,\n    deserializer: (json: string) => Hash.fromJSON(json),\n    serializer: (value: Hash) => value.toJSON()\n  })\n  public bodyHash: Hash;\n\n  /**\n   * The era ID in which the block was created, indicating its position within a blockchain era.\n   */\n  @jsonMember({ name: 'era_id', constructor: Number })\n  public eraID: number;\n\n  /**\n   * The current gas price for transactions within this block.\n   */\n  @jsonMember({ name: 'current_gas_price', constructor: Number })\n  public currentGasPrice: number;\n\n  /**\n   * The height of the block in the blockchain, representing its position in the chain.\n   */\n  @jsonMember({ name: 'height', constructor: Number })\n  public height: number;\n\n  /**\n   * The hash of the parent block, linking this block to its predecessor in the chain.\n   */\n  @jsonMember({\n    name: 'parent_hash',\n    constructor: Hash,\n    deserializer: (json: string) => Hash.fromJSON(json),\n    serializer: (value: Hash) => value.toJSON()\n  })\n  public parentHash: Hash;\n\n  /**\n   * The proposer who created this block.\n   */\n  @jsonMember({\n    name: 'proposer',\n    constructor: Proposer,\n    deserializer: (json: string) => Proposer.fromJSON(json),\n    serializer: (value: Proposer) => value.toJSON()\n  })\n  public proposer: Proposer;\n\n  /**\n   * The protocol version used for this block.\n   */\n  @jsonMember({ name: 'protocol_version', constructor: String })\n  public protocolVersion?: string;\n\n  /**\n   * A random bit used for consensus, which may play a role in block selection or generation.\n   */\n  @jsonMember({ name: 'random_bit', constructor: Boolean })\n  public randomBit: boolean;\n\n  /**\n   * The hash of the state root, representing the state of the blockchain after this block is applied.\n   */\n  @jsonMember({\n    name: 'state_root_hash',\n    constructor: Hash,\n    deserializer: (json: string) => Hash.fromJSON(json),\n    serializer: (value: Hash) => value.toJSON()\n  })\n  public stateRootHash: Hash;\n\n  /**\n   * The hash of the block that switched the state, marking the end of an era or other significant event.\n   */\n  @jsonMember({\n    name: 'last_switch_block_hash',\n    constructor: Hash,\n    deserializer: (json: string) => Hash.fromJSON(json),\n    serializer: (value: Hash) => value.toJSON()\n  })\n  public lastSwitchBlockHash: Hash;\n\n  /**\n   * The timestamp when the block was created.\n   */\n  @jsonMember({\n    name: 'timestamp',\n    constructor: Timestamp,\n    deserializer: (json: string) => Timestamp.fromJSON(json),\n    serializer: (value: Timestamp) => value.toJSON()\n  })\n  public timestamp: Timestamp;\n\n  /**\n   * The era end details for this block's era, if available.\n   */\n  @jsonMember({ name: 'era_end', constructor: EraEndV2 })\n  public eraEnd?: EraEndV2;\n}\n\n/**\n * Represents the body of a version 2 block, including the transactions and rewarded signatures.\n */\n@jsonObject\nexport class BlockBodyV2 {\n  /**\n   * The list of transactions included in the block.\n   */\n  @jsonMember(BlockTransaction, {\n    name: 'transactions',\n    deserializer: (json: any) => BlockTransaction.fromJSON(json),\n    serializer: (value: BlockTransaction[]) => {\n      return {\n        ...value.reduce((acc, tx) => {\n          return {...acc, ...JSON.parse(tx.toJSON())};\n        }, {})\n      };\n    }\n  })\n  public transactions: BlockTransaction[];\n\n  /**\n   * The list of signature IDs that were rewarded in this block.\n   */\n  @jsonArrayMember(Number, { dimensions: 2, name: 'rewarded_signatures' })\n  public rewardedSignatures: number[][];\n}\n\n/**\n * Represents a version 2 block in the blockchain.\n * A `BlockV2` includes a hash, a header containing metadata, and the body containing the block's transactions and related data.\n */\n@jsonObject\nexport class BlockV2 {\n  /**\n   * The unique hash of the block, used to identify and verify the block in the blockchain.\n   */\n  @jsonMember({\n    name: 'hash',\n    constructor: Hash,\n    deserializer: (json: string) => Hash.fromJSON(json),\n    serializer: (value: Hash) => value.toJSON()\n  })\n  public hash: Hash;\n\n  /**\n   * The header of the block, which contains metadata such as the block's height, parent hash, and protocol version.\n   */\n  @jsonMember({ name: 'header', constructor: BlockHeaderV2 })\n  public header: BlockHeaderV2;\n\n  /**\n   * The body of the block, which contains the transactions, deploys, and other data related to the block's content.\n   */\n  @jsonMember({ name: 'body', constructor: BlockBodyV2 })\n  public body: BlockBodyV2;\n}\n\n/**\n * A wrapper for blocks that can contain either a version 1 or version 2 block.\n */\n@jsonObject\nexport class BlockWrapper {\n  /**\n   * A version 1 block, if available.\n   */\n  @jsonMember({ name: 'Version1', constructor: BlockV1 })\n  public blockV1?: BlockV1;\n\n  /**\n   * A version 2 block, if available.\n   */\n  @jsonMember({ name: 'Version2', constructor: BlockV2 })\n  public blockV2?: BlockV2;\n}\n\n/**\n * A block with associated proofs, which include cryptographic signatures for verification.\n */\n@jsonObject\nexport class BlockWithSignatures {\n  /**\n   * The block object containing either a version 1 or version 2 block.\n   */\n  @jsonMember({ name: 'block', constructor: BlockWrapper })\n  public block: BlockWrapper;\n\n  /**\n   * The list of proofs associated with the block, used for validating its authenticity.\n   */\n  @jsonArrayMember(Proof, { name: 'proofs' })\n  public proofs: Proof[];\n}\n\n/**\n * A wrapper for block headers, which can contain either a version 1 or version 2 block header.\n */\n@jsonObject\nexport class BlockHeaderWrapper {\n  /**\n   * A version 1 block header, if available.\n   */\n  @jsonMember({ name: 'Version1', constructor: BlockHeaderV1 })\n  public blockHeaderV1?: BlockHeaderV1;\n\n  /**\n   * A version 2 block header, if available.\n   */\n  @jsonMember({ name: 'Version2', constructor: BlockHeaderV2 })\n  public blockHeaderV2?: BlockHeaderV2;\n}\n\n/**\n * Represents a block header that can be either version 1 or version 2, with various metadata about the block.\n */\n@jsonObject\nexport class BlockHeader {\n  /**\n   * The accumulated seed used for randomness in block generation.\n   */\n  @jsonMember({\n    name: 'accumulated_seed',\n    constructor: Hash,\n    deserializer: (json: string) => {\n      if (!json) return;\n      return Hash.fromJSON(json);\n    },\n    serializer: (value: Hash) => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  public accumulatedSeed?: Hash;\n\n  /**\n   * The hash of the block's body, used to verify the block's contents.\n   */\n  @jsonMember({\n    name: 'body_hash',\n    constructor: Hash,\n    deserializer: (json: string) => Hash.fromJSON(json),\n    serializer: (value: Hash) => value.toJSON()\n  })\n  public bodyHash: Hash;\n\n  /**\n   * The era ID in which the block was created.\n   */\n  @jsonMember({ name: 'era_id', constructor: Number })\n  public eraID: number;\n\n  /**\n   * The current gas price for transactions within this block.\n   */\n  @jsonMember({ name: 'current_gas_price', constructor: Number })\n  public currentGasPrice: number;\n\n  /**\n   * The height of the block in the blockchain.\n   */\n  @jsonMember({ name: 'height', constructor: Number })\n  public height: number;\n\n  /**\n   * The hash of the parent block.\n   */\n  @jsonMember({\n    name: 'parent_hash',\n    constructor: Hash,\n    deserializer: (json: string) => Hash.fromJSON(json),\n    serializer: (value: Hash) => value.toJSON()\n  })\n  public parentHash: Hash;\n\n  /**\n   * The proposer who created this block.\n   */\n  @jsonMember({\n    name: 'proposer',\n    constructor: Proposer,\n    deserializer: (json: string) => Proposer.fromJSON(json),\n    serializer: (value: Proposer) => value.toJSON()\n  })\n  public proposer: Proposer;\n\n  /**\n   * The protocol version used for this block.\n   */\n  @jsonMember({ name: 'protocol_version', constructor: String })\n  public protocolVersion?: string;\n\n  /**\n   * A random bit used for consensus.\n   */\n  @jsonMember({ name: 'random_bit', constructor: Boolean })\n  public randomBit: boolean;\n\n  /**\n   * The hash of the state root.\n   */\n  @jsonMember({\n    name: 'state_root_hash',\n    constructor: Hash,\n    deserializer: (json: string) => Hash.fromJSON(json),\n    serializer: (value: Hash) => value.toJSON()\n  })\n  public stateRootHash: Hash;\n\n  /**\n   * The timestamp indicating when the block was created.\n   */\n  @jsonMember({\n    name: 'timestamp',\n    constructor: Timestamp,\n    deserializer: (json: string) => Timestamp.fromJSON(json),\n    serializer: (value: Timestamp) => value.toJSON()\n  })\n  public timestamp: Timestamp;\n\n  /**\n   * The era end details, if available, for this block's era.\n   */\n  @jsonMember({ name: 'era_end', constructor: EraEnd })\n  public eraEnd?: EraEnd | null;\n\n  private originBlockHeaderV1?: BlockHeaderV1;\n  private originBlockHeaderV2?: BlockHeaderV2;\n\n  /**\n   * Retrieves the version 1 block header, if available.\n   * @returns The version 1 block header, or `undefined` if not available.\n   */\n  public getBlockHeaderV1(): BlockHeaderV1 | undefined {\n    return this.originBlockHeaderV1;\n  }\n\n  /**\n   * Retrieves the version 2 block header, if available.\n   * @returns The version 2 block header, or `undefined` if not available.\n   */\n  public getBlockHeaderV2(): BlockHeaderV2 | undefined {\n    return this.originBlockHeaderV2;\n  }\n\n  /**\n   * Creates a new `BlockHeader` instance from a version 1 block header.\n   * @param header - The version 1 block header.\n   * @returns A new `BlockHeader` instance.\n   */\n  static newBlockHeaderFromV1(header: BlockHeaderV1): BlockHeader {\n    const blockHeader = new BlockHeader();\n    blockHeader.accumulatedSeed = header.accumulatedSeed;\n    blockHeader.bodyHash = header.bodyHash;\n    blockHeader.eraID = header.eraID;\n    blockHeader.currentGasPrice = 1;\n    blockHeader.height = header.height;\n    blockHeader.parentHash = header.parentHash;\n    blockHeader.protocolVersion = header.protocolVersion;\n    blockHeader.randomBit = header.randomBit;\n    blockHeader.stateRootHash = header.stateRootHash;\n    blockHeader.timestamp = header.timestamp;\n    blockHeader.eraEnd = header.eraEnd\n      ? EraEnd.fromV1(header.eraEnd)\n      : undefined;\n    blockHeader['originBlockHeaderV1'] = header;\n    return blockHeader;\n  }\n\n  /**\n   * Creates a new `BlockHeader` instance from a version 2 block header.\n   * @param header - The version 2 block header.\n   * @returns A new `BlockHeader` instance.\n   */\n  static newBlockHeaderFromV2(header: BlockHeaderV2): BlockHeader {\n    const blockHeader = new BlockHeader();\n    blockHeader.accumulatedSeed = header.accumulatedSeed;\n    blockHeader.bodyHash = header.bodyHash;\n    blockHeader.eraID = header.eraID;\n    blockHeader.currentGasPrice = header.currentGasPrice;\n    blockHeader.height = header.height;\n    blockHeader.parentHash = header.parentHash;\n    blockHeader.proposer = header.proposer;\n    blockHeader.protocolVersion = header.protocolVersion;\n    blockHeader.randomBit = header.randomBit;\n    blockHeader.stateRootHash = header.stateRootHash;\n    blockHeader.timestamp = header.timestamp;\n    blockHeader.eraEnd = header.eraEnd\n      ? EraEnd.fromV2(header.eraEnd)\n      : undefined;\n    blockHeader['originBlockHeaderV2'] = header;\n    return blockHeader;\n  }\n}\n","import { jsonObject, jsonMember } from 'typedjson';\nimport * as keypair from './keypair';\n\n/**\n * Represents a proposer in the blockchain context.\n * A proposer is an entity that proposes new blocks, identified by a public key\n * and an optional system status.\n */\n@jsonObject\nexport class Proposer {\n  /**\n   * Indicates if the proposer is a system-level entity (without a public key).\n   */\n  @jsonMember({ name: 'isSystem', constructor: Boolean })\n  isSystem: boolean;\n\n  /**\n   * Public key of the proposer, defined if the proposer is not a system entity.\n   */\n  @jsonMember({\n    name: 'publicKey',\n    constructor: keypair.PublicKey,\n    deserializer: json => {\n      if (!json) return;\n      return keypair.PublicKey.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  publicKey?: keypair.PublicKey;\n\n  /**\n   * Constructs a new `Proposer` instance.\n   * @param isSystem - Indicates if the proposer is a system-level proposer.\n   * @param publicKey - Optional public key if the proposer is not a system entity.\n   */\n  constructor(isSystem = false, publicKey?: keypair.PublicKey) {\n    this.isSystem = isSystem;\n    this.publicKey = publicKey;\n  }\n\n  /**\n   * Creates a `Proposer` instance from a string representation.\n   * @param src - A string representing the proposer. '00' indicates a system proposer.\n   * @returns A new `Proposer` instance.\n   */\n  static fromString(src: string): Proposer {\n    if (src === '00') {\n      return new Proposer(true);\n    }\n    const pubKey = keypair.PublicKey.fromJSON(src);\n    return new Proposer(false, pubKey);\n  }\n\n  /**\n   * Checks if the proposer is a system-level entity.\n   * @returns `true` if the proposer is a system entity, otherwise `false`.\n   */\n  isSystemProposer(): boolean {\n    return this.isSystem;\n  }\n\n  /**\n   * Retrieves the public key of the proposer.\n   * Throws an error if the proposer is a system entity without a public key.\n   * @returns The public key of the proposer.\n   * @throws Will throw an error if the proposer is a system proposer.\n   */\n  getPublicKey(): keypair.PublicKey {\n    if (this.isSystem) {\n      throw new Error(\"System proposer doesn't have a public key\");\n    }\n    return this.publicKey!;\n  }\n\n  /**\n   * Retrieves the public key of the proposer, if available.\n   * @returns The public key if defined; otherwise, `undefined`.\n   */\n  getPublicKeyOptional(): keypair.PublicKey | undefined {\n    return this.publicKey;\n  }\n\n  /**\n   * Serializes the proposer instance to JSON.\n   * System proposers are represented as '00'; otherwise, the public key is serialized.\n   * @returns A JSON string representing the proposer.\n   */\n  toJSON(): string {\n    return this.isSystem ? '00' : this?.publicKey!.toJSON();\n  }\n\n  /**\n   * Deserializes a JSON string to create a `Proposer` instance.\n   * @param json - A JSON string representing the proposer.\n   * @returns A new `Proposer` instance.\n   */\n  static fromJSON(json: string): Proposer {\n    if (json === '00') {\n      return new Proposer(true);\n    }\n    const pubKey = keypair.PublicKey.fromJSON(json);\n    return new Proposer(false, pubKey);\n  }\n}\n","import { jsonMember, jsonObject } from 'typedjson';\nimport { HexBytes } from './HexBytes';\n\n/**\n * Represents the system's bytecode with its type and raw bytes.\n */\n@jsonObject\nexport class SystemByteCode {\n  /**\n   * The type of the bytecode, represented as a string.\n   */\n  @jsonMember({\n    constructor: String\n  })\n  kind: string;\n\n  /**\n   * The raw bytecode data in hexadecimal format.\n   */\n  @jsonMember({\n    constructor: HexBytes,\n    deserializer: json => HexBytes.fromJSON(json),\n    serializer: (value: HexBytes) => value.toJSON()\n  })\n  bytes: HexBytes;\n\n  /**\n   * Creates an instance of SystemByteCode.\n   * @param kind - The type of the bytecode.\n   * @param bytes - The bytecode data in hexadecimal format.\n   */\n  constructor(kind: string, bytes: HexBytes) {\n    this.kind = kind;\n    this.bytes = bytes;\n  }\n\n  /**\n   * Checks if the bytecode kind is empty or undefined.\n   * @returns `true` if the kind is \"Empty\" or not set; otherwise, `false`.\n   */\n  public isEmpty(): boolean {\n    return this.kind === 'Empty' || !this.kind;\n  }\n\n  /**\n   * Checks if the bytecode kind is of type \"V1CasperWasm\".\n   * @returns `true` if the kind is \"V1CasperWasm\"; otherwise, `false`.\n   */\n  public isV1CasperWasm(): boolean {\n    return this.kind === 'V1CasperWasm';\n  }\n\n  /**\n   * Returns a string representation of the bytecode kind.\n   * @returns The kind of the bytecode as a string.\n   */\n  public toString(): string {\n    return this.kind;\n  }\n}\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { MaxUint256, NegativeOne, One, Zero } from '@ethersproject/constants';\nimport { arrayify, concat } from '@ethersproject/bytes';\nimport { blake2b } from '@noble/hashes/blake2b';\n\n/**\n * Converts a BigNumberish value to bytes with specified bit size and signedness.\n * @param bitSize - The bit size of the integer.\n * @param signed - `true` if the integer is signed; `false` otherwise.\n * @returns A function that converts a BigNumberish value into a `Uint8Array` byte representation.\n */\nexport const toBytesNumber = (bitSize: number, signed: boolean) => (\n  value: BigNumberish\n): Uint8Array => {\n  const val = BigNumber.from(value);\n\n  // Calculate the maximum allowed unsigned value for the given bit size\n  const maxUintValue = MaxUint256.mask(bitSize);\n\n  if (signed) {\n    // Calculate signed bounds for the given bit size\n    const bounds = maxUintValue.mask(bitSize - 1);\n    if (val.gt(bounds) || val.lt(bounds.add(One).mul(NegativeOne))) {\n      throw new Error('value out-of-bounds, value: ' + value);\n    }\n  } else if (val.lt(Zero) || val.gt(maxUintValue.mask(bitSize))) {\n    throw new Error('value out-of-bounds, value: ' + value);\n  }\n\n  const valTwos = val.toTwos(bitSize).mask(bitSize);\n\n  const bytes = arrayify(valTwos);\n\n  if (valTwos.gte(0)) {\n    if (bitSize > 64) {\n      if (valTwos.eq(0)) {\n        return bytes;\n      }\n      return concat([bytes, Uint8Array.from([bytes.length])])\n        .slice()\n        .reverse();\n    } else {\n      const byteLength = bitSize / 8;\n      return concat([\n        bytes.slice().reverse(),\n        new Uint8Array(byteLength - bytes.length)\n      ]);\n    }\n  } else {\n    return bytes.reverse();\n  }\n};\n\n/**\n * Converts an 8-bit unsigned integer (`u8`) to little-endian byte format.\n */\nexport const toBytesU8 = toBytesNumber(8, false);\n\n/**\n * Converts an 16-bit unsigned integer (`u16`) to little-endian byte format.\n */\nexport const toBytesU16 = toBytesNumber(16, false);\n\n/**\n * Converts a 32-bit signed integer (`i32`) to little-endian byte format.\n */\nexport const toBytesI32 = toBytesNumber(32, true);\n\n/**\n * Converts a 32-bit unsigned integer (`u32`) to little-endian byte format.\n */\nexport const toBytesU32 = toBytesNumber(32, false);\n\n/**\n * Converts a 64-bit unsigned integer (`u64`) to little-endian byte format.\n */\nexport const toBytesU64 = toBytesNumber(64, false);\n\n/**\n * Converts a 64-bit signed integer (`i64`) to little-endian byte format.\n */\nexport const toBytesI64 = toBytesNumber(64, true);\n\n/**\n * Converts a 128-bit unsigned integer (`u128`) to little-endian byte format.\n */\nexport const toBytesU128 = toBytesNumber(128, false);\n\n/**\n * Converts a 256-bit unsigned integer (`u256`) to little-endian byte format.\n */\nexport const toBytesU256 = toBytesNumber(256, false);\n\n/**\n * Converts a 512-bit unsigned integer (`u512`) to little-endian byte format.\n */\nexport const toBytesU512 = toBytesNumber(512, false);\n\n/**\n * Serializes a string into a byte array.\n * @param str - The string to be converted.\n * @returns A `Uint8Array` representation of the string, including its length as a `u32` prefix.\n */\nexport function toBytesString(str: string): Uint8Array {\n  const arr = Uint8Array.from(Buffer.from(str));\n  return concat([toBytesU32(arr.byteLength), arr]);\n}\n\n/**\n * Deserializes a byte array into a string.\n * @param byte - `Uint8Array` representing the serialized string.\n * @returns The deserialized string.\n */\nexport const fromBytesString = (byte: Uint8Array): string => {\n  return Buffer.from(byte).toString();\n};\n\n/**\n * Serializes an array of `u8` values, equivalent to `Vec<u8>` in Rust.\n * @param arr - A `Uint8Array` buffer of `u8` integers.\n * @returns A serialized `Uint8Array` with the array's length as a `u32` prefix.\n */\nexport function toBytesArrayU8(arr: Uint8Array): Uint8Array {\n  return concat([toBytesU32(arr.length), arr]);\n}\n\n/**\n * Computes the Blake2b hash of a byte array.\n * @param x - A `Uint8Array` byte array to compute the Blake2b hash on.\n * @returns A `Uint8Array` buffer containing the 32-byte Blake2b hash.\n */\nexport function byteHash(x: Uint8Array): Uint8Array {\n  return blake2b(x, { dkLen: 32 });\n}\n\n/**\n * Parses a 16-bit unsigned integer (`u16`) from a little-endian byte array.\n * @param bytes - The byte array containing the `u16` value.\n * @returns The parsed 16-bit unsigned integer.\n */\nexport function parseU16(bytes: Uint8Array): number {\n  if (bytes.length < 2) {\n    throw new Error('Invalid byte array for u16 parsing');\n  }\n  return bytes[0] | (bytes[1] << 8);\n}\n\n/**\n * Parses a 32-bit unsigned integer (`u32`) from a little-endian byte array.\n * @param bytes - The byte array containing the `u32` value.\n * @returns The parsed 32-bit unsigned integer.\n */\nexport function parseU32(bytes: Uint8Array): number {\n  if (bytes.length < 4) {\n    throw new Error('Invalid byte array for u32 parsing');\n  }\n\n  return bytes[0] | (bytes[1] << 8) | (bytes[2] << 16) | (bytes[3] << 24);\n}\n\n/**\n * Parses a 64-bit unsigned integer (`u64`) from a little-endian byte array.\n * @param bytes - A `Uint8Array` containing the serialized 64-bit unsigned integer.\n * @returns A `BigNumber` representing the parsed value.\n */\nexport const fromBytesU64 = (bytes: Uint8Array): BigNumber => {\n  if (bytes.length !== 8) {\n    throw new Error(\n      `Invalid input length for u64: expected 8 bytes, got ${bytes.length}`\n    );\n  }\n\n  // Convert the little-endian bytes into a BigNumber\n  return BigNumber.from(bytes.reverse());\n};\n\n/**\n * Writes a 32-bit signed integer to a `DataView` at the specified offset.\n *\n * The integer is written in little-endian format.\n *\n * @param view - The `DataView` instance where the integer will be written.\n * @param offset - The offset (in bytes) at which to start writing.\n * @param value - The 32-bit signed integer to write.\n * @returns The new offset after writing the integer.\n *\n * @example\n * ```typescript\n * const buffer = new ArrayBuffer(8);\n * const view = new DataView(buffer);\n * let offset = 0;\n * offset = writeInteger(view, offset, 42);\n * console.log(new Int32Array(buffer)); // Logs: Int32Array [42, 0]\n * ```\n */\nexport const writeInteger = (\n  view: DataView,\n  offset: number,\n  value: number\n): number => {\n  view.setInt32(offset, value, true);\n  return offset + 4;\n};\n\n/**\n * Writes a 16-bit unsigned integer to a `DataView` at the specified offset.\n *\n * The integer is written in little-endian format.\n *\n * @param view - The `DataView` instance where the integer will be written.\n * @param offset - The offset (in bytes) at which to start writing.\n * @param value - The 16-bit unsigned integer to write.\n * @returns The new offset after writing the integer.\n *\n * @example\n * ```typescript\n * const buffer = new ArrayBuffer(4);\n * const view = new DataView(buffer);\n * let offset = 0;\n * offset = writeUShort(view, offset, 65535);\n * console.log(new Uint16Array(buffer)); // Logs: Uint16Array [65535, 0]\n * ```\n */\nexport const writeUShort = (\n  view: DataView,\n  offset: number,\n  value: number\n): number => {\n  view.setUint16(offset, value, true);\n  return offset + 2;\n};\n\n/**\n * Writes a sequence of bytes (as a `Uint8Array`) to a `DataView` at the specified offset.\n *\n * Each byte in the array is written in sequence, starting from the given offset.\n *\n * @param view - The `DataView` instance where the bytes will be written.\n * @param offset - The offset (in bytes) at which to start writing.\n * @param value - The `Uint8Array` containing the bytes to write.\n * @returns The new offset after writing the bytes.\n *\n * @example\n * ```typescript\n * const buffer = new ArrayBuffer(10);\n * const view = new DataView(buffer);\n * let offset = 0;\n * offset = writeBytes(view, offset, new Uint8Array([1, 2, 3, 4]));\n * console.log(new Uint8Array(buffer)); // Logs: Uint8Array [1, 2, 3, 4, 0, 0, 0, 0, 0, 0]\n * ```\n */\nexport const writeBytes = (\n  view: DataView,\n  offset: number,\n  value: Uint8Array\n): number => {\n  for (let i = 0; i < value.length; i++) {\n    view.setUint8(offset + i, value[i]);\n  }\n  return offset + value.length;\n};\n\n/**\n * Expands the size of an existing ArrayBuffer to accommodate additional data if necessary.\n *\n * This function creates a new `ArrayBuffer` with a size that is at least as large as\n * the required size. The buffer's size grows exponentially (doubles) to minimize\n * reallocations and improve performance for large data handling.\n * The existing data from the old buffer is copied into the new buffer.\n *\n * @param currentBuffer - The current `ArrayBuffer` that needs to be expanded.\n * @param requiredSize - The minimum size required for the buffer.\n * @returns A new `ArrayBuffer` with enough space to accommodate the required size.\n *\n * @example\n * ```typescript\n * let buffer = new ArrayBuffer(1024);\n * const updatedBuffer = expandBuffer(buffer, 2048);\n * console.log(updatedBuffer.byteLength); // 2048 or larger (depending on initial size and required size)\n * ```\n */\nexport const expandBuffer = (\n  currentBuffer: ArrayBuffer,\n  requiredSize: number\n): ArrayBuffer => {\n  let newSize = currentBuffer.byteLength;\n  while (newSize < requiredSize) {\n    newSize *= 2; // Double the buffer size until it fits\n  }\n  const newBuffer = new ArrayBuffer(newSize);\n  new Uint8Array(newBuffer).set(new Uint8Array(currentBuffer)); // Copy existing data\n  return newBuffer;\n};\n","import { concat } from '@ethersproject/bytes';\nimport { parseU16, parseU32, toBytesU16, toBytesU32 } from './ByteConverters';\n\n/**\n * Represents a single field in the call table.\n */\nexport class Field {\n  readonly index: number;\n  readonly offset: number;\n  value: Uint8Array;\n\n  /**\n   * Constructs a new `Field` instance.\n   *\n   * @param index - The index of the field.\n   * @param offset - The offset of the field in the payload.\n   * @param value - The byte array value of the field.\n   */\n  constructor(index: number, offset: number, value: Uint8Array) {\n    this.index = index;\n    this.offset = offset;\n    this.value = value;\n  }\n\n  /**\n   * Calculates the serialized vector size for the given number of fields.\n   *\n   * This method determines the size of the serialized vector required\n   * to store all fields, including their indices and offsets.\n   *\n   * @returns The size of the serialized vector in bytes.\n   */\n  static serializedVecSize(): number {\n    return 4 + 4 * 2; // Number of fields (4 bytes) + index/offset pairs (4 bytes each)\n  }\n}\n\n/**\n * Handles serialization and deserialization of call table data.\n *\n * The `CalltableSerialization` class is responsible for managing a collection\n * of fields and converting them into a byte array for serialization. It can\n * also reconstruct the fields from a serialized byte array.\n */\nexport class CalltableSerialization {\n  private fields: Field[] = [];\n  private currentOffset = 0;\n\n  /**\n   * Adds a field to the call table.\n   *\n   * @param index - The field index.\n   * @param value - The field value as a byte array.\n   * @returns The current instance of `CalltableSerialization`.\n   * @throws An error if the fields are not added in the correct index order.\n   */\n  addField(index: number, value: Uint8Array): CalltableSerialization {\n    if (this.fields.length !== index) {\n      throw new Error('Add fields in correct index order.');\n    }\n\n    const field = new Field(index, this.currentOffset, value);\n    this.fields.push(field);\n    this.currentOffset += value.length;\n\n    return this;\n  }\n\n  /**\n   * Serializes the call table into a byte array.\n   *\n   * @returns A `Uint8Array` representing the serialized call table.\n   */\n  toBytes(): Uint8Array {\n    const calltableBytes: Uint8Array[] = [];\n    const payloadBytes: Uint8Array[] = [];\n\n    calltableBytes.push(toBytesU32(this.fields.length));\n\n    for (const field of this.fields) {\n      calltableBytes.push(toBytesU16(field.index));\n      calltableBytes.push(toBytesU32(field.offset));\n      payloadBytes.push(field.value);\n    }\n\n    calltableBytes.push(toBytesU32(this.currentOffset));\n\n    return concat([...calltableBytes, ...payloadBytes]);\n  }\n\n  /**\n   * Retrieves a specific field by its index.\n   *\n   * @param index - The index of the field to retrieve.\n   * @returns The field value as a `Uint8Array`, or `undefined` if the field is not found.\n   */\n  getField(index: number): Uint8Array | undefined {\n    const field = this.fields.find(f => f.index === index);\n    return field ? field.value : undefined;\n  }\n\n  /**\n   * Deserializes a byte array into a `CalltableSerialization` object.\n   *\n   * This method reconstructs the call table and its fields from a serialized byte array.\n   *\n   * @param bytes - The serialized byte array.\n   * @returns A `CalltableSerialization` instance containing the deserialized fields.\n   * @throws An error if the byte array is invalid or missing required fields.\n   */\n  static fromBytes(bytes: Uint8Array): CalltableSerialization {\n    const instance = new CalltableSerialization();\n    let offset = 0;\n\n    // Read the number of fields\n    const fieldCount = parseU32(bytes.slice(offset, offset + 4));\n    offset += 4;\n\n    const fields: Field[] = [];\n    for (let i = 0; i < fieldCount; i++) {\n      const index = parseU16(bytes.slice(offset, offset + 2));\n      offset += 2;\n      const fieldOffset = parseU32(bytes.slice(offset, offset + 4));\n      offset += 4;\n\n      // Initialize each field with an empty value\n      fields.push(new Field(index, fieldOffset, new Uint8Array()));\n    }\n\n    // Read the total payload size\n    const payloadSize = parseU32(bytes.slice(offset, offset + 4));\n    offset += 4;\n\n    // Extract field values based on their offsets\n    for (let i = 0; i < fields.length; i++) {\n      const start = fields[i].offset;\n      const end = i + 1 < fields.length ? fields[i + 1].offset : payloadSize;\n      fields[i].value = bytes.slice(offset + start, offset + end);\n    }\n\n    instance.fields = fields;\n    instance.currentOffset = payloadSize;\n    return instance;\n  }\n}\n","import { jsonArrayMember, jsonMember, jsonObject } from 'typedjson';\nimport { ContractHash, ContractPackageHash } from './key';\nimport { NamedKeys } from './NamedKey';\nimport { NamedEntryPoint } from './AddressableEntity';\n\n/**\n * Represents a smart contract on the blockchain, including its unique identifiers, entry points, named keys, and protocol version.\n */\n@jsonObject\nexport class Contract {\n  /**\n   * The unique hash representing the contract package.\n   */\n  @jsonMember({\n    name: 'contract_package_hash',\n    constructor: ContractPackageHash,\n    deserializer: json => ContractPackageHash.fromJSON(json),\n    serializer: (value: ContractPackageHash) => value.toJSON()\n  })\n  contractPackageHash: ContractPackageHash;\n\n  /**\n   * The unique hash representing the WebAssembly (Wasm) code of the contract.\n   */\n  @jsonMember({\n    name: 'contract_wasm_hash',\n    constructor: ContractHash,\n    deserializer: json => ContractHash.fromJSON(json),\n    serializer: (value: ContractHash) => value.toJSON()\n  })\n  contractWasmHash: ContractHash;\n\n  /**\n   * The list of entry points (functions) that can be called on this contract.\n   */\n  @jsonArrayMember(NamedEntryPoint, {\n    name: 'entry_points',\n    deserializer: json => {\n      if (!json) return;\n      return json.map((it: NamedEntryPoint) => NamedEntryPoint.fromJSON(it));\n    }\n  })\n  entryPoints: NamedEntryPoint[];\n\n  /**\n   * The named keys associated with the contract, providing access to specific values or data stored by the contract.\n   */\n  @jsonMember({ name: 'named_keys', constructor: NamedKeys })\n  namedKeys: NamedKeys;\n\n  /**\n   * The protocol version of the contract, indicating compatibility with specific blockchain protocol versions.\n   */\n  @jsonMember({ name: 'protocol_version', constructor: String })\n  protocolVersion: string;\n\n  /**\n   * Constructs a new `Contract` instance.\n   * @param contractPackageHash - The unique hash for the contract package.\n   * @param contractWasmHash - The unique hash for the Wasm code of the contract.\n   * @param entryPoints - An array of entry points defining functions available in the contract.\n   * @param namedKeys - Named keys providing access to specific stored data within the contract.\n   * @param protocolVersion - The protocol version for this contract.\n   */\n  constructor(\n    contractPackageHash: ContractPackageHash,\n    contractWasmHash: ContractHash,\n    entryPoints: NamedEntryPoint[],\n    namedKeys: NamedKeys,\n    protocolVersion: string\n  ) {\n    this.contractPackageHash = contractPackageHash;\n    this.contractWasmHash = contractWasmHash;\n    this.entryPoints = entryPoints;\n    this.namedKeys = namedKeys;\n    this.protocolVersion = protocolVersion;\n  }\n}\n","import { jsonArrayMember, jsonMember, jsonObject, TypedJSON } from 'typedjson';\nimport { ContractHash, URef } from './key';\nimport { deserializeDisabledVersions } from './SerializationUtils';\n\nexport interface IDisabledVersion {\n  protocol_version_major: number;\n  contract_version: number;\n}\n\n/**\n * Represents a group of keys associated with a contract, allowing access control and permissions management.\n */\n@jsonObject\nexport class ContractGroup {\n  /**\n   * The name of the group.\n   */\n  @jsonMember({ name: 'group_name', constructor: String, preserveNull: true })\n  groupName: string;\n\n  /**\n   * The list of URef keys associated with this group, defining permissions for contract interaction.\n   */\n  @jsonArrayMember(URef, {\n    name: 'group_users',\n    serializer: (value: URef[]) => value.map(it => it.toJSON()),\n    deserializer: (json: any) => {\n      if (!json) return;\n      return json.map((it: string) => URef.fromJSON(it));\n    }\n  })\n  groupUsers: URef[];\n\n  /**\n   * Converts a plain JSON object into an instance of `ContractGroup`.\n   *\n   * @param json The JSON object to parse.\n   * @returns An instance of `ContractGroup` or `undefined` if parsing fails.\n   */\n  public static fromJSON(json: any): ContractGroup | undefined {\n    const serializer = new TypedJSON(ContractGroup);\n    const contractGroup = serializer.parse(json);\n\n    // V1 Compatible\n    if (contractGroup) {\n      if (Array.isArray(json?.keys)) {\n        contractGroup.groupUsers = json.keys.map((it: any) =>\n          URef.fromJSON(it)\n        );\n      }\n\n      if (typeof json?.group === 'string') {\n        contractGroup.groupName = json.group;\n      }\n    }\n\n    return contractGroup;\n  }\n}\n\n/**\n * Represents a specific version of a contract, identified by a unique hash and protocol compatibility.\n */\n@jsonObject\nexport class ContractVersion {\n  /**\n   * The unique hash identifying this version of the contract.\n   */\n  @jsonMember({\n    name: 'contract_hash',\n    constructor: ContractHash,\n    deserializer: json => ContractHash.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  contractHash: ContractHash;\n\n  /**\n   * The version number of the contract.\n   */\n  @jsonMember({ name: 'contract_version', constructor: Number })\n  contractVersion: number;\n\n  /**\n   * Major version of the protocol that this contract version is compatible with.\n   */\n  @jsonMember({ name: 'protocol_version_major', constructor: Number })\n  protocolVersionMajor: number;\n\n  /**\n   * Constructs a new `ContractVersion` instance.\n   * @param contractHash - The unique hash for this version of the contract.\n   * @param contractVersion - The version number of the contract.\n   * @param protocolVersionMajor - The major protocol version compatible with this contract.\n   */\n  constructor(\n    contractHash: ContractHash,\n    contractVersion: number,\n    protocolVersionMajor: number\n  ) {\n    this.contractHash = contractHash;\n    this.contractVersion = contractVersion;\n    this.protocolVersionMajor = protocolVersionMajor;\n  }\n}\n\n/**\n * Represents a package containing different versions and groups of a contract, including access control and lock status.\n */\n@jsonObject\nexport class ContractPackage {\n  /**\n   * Access key (URef) for the contract package, controlling permissions.\n   */\n  @jsonMember({\n    name: 'access_key',\n    constructor: URef,\n    deserializer: json => URef.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  accessKey: URef;\n\n  /**\n   * Array of disabled contract versions, marking incompatible versions.\n   */\n  @jsonArrayMember(Number, {\n    name: 'disabled_versions',\n    dimensions: 2,\n    deserializer: json => {\n      if (!json) return;\n      return deserializeDisabledVersions(json);\n    }\n  })\n  disabledVersions: number[][];\n\n  /**\n   * Array of contract groups, managing access control with sets of URef keys.\n   */\n  @jsonArrayMember(ContractGroup, {\n    name: 'groups',\n    deserializer: json => {\n      if (!json) return;\n      return json.map((it: ContractGroup) => ContractGroup.fromJSON(it));\n    }\n  })\n  groups: ContractGroup[];\n\n  /**\n   * Array of contract versions, each compatible with a specific protocol version.\n   */\n  @jsonArrayMember(ContractVersion, { name: 'versions' })\n  versions: ContractVersion[];\n\n  /**\n   * Lock status of the contract package, indicating whether the package is locked or unlocked.\n   */\n  @jsonMember({ name: 'lock_status', constructor: String })\n  lockStatus: string;\n\n  /**\n   * Constructs a new `ContractPackage` instance.\n   * @param accessKey - The URef access key for controlling the contract package.\n   * @param disabledVersions - Array of disabled contract versions.\n   * @param groups - Array of contract groups for access management.\n   * @param versions - Array of contract versions within this package.\n   * @param lockStatus - The lock status of the contract package.\n   */\n  constructor(\n    accessKey: URef,\n    disabledVersions: number[][],\n    groups: ContractGroup[],\n    versions: ContractVersion[],\n    lockStatus: string\n  ) {\n    this.accessKey = accessKey;\n    this.disabledVersions = disabledVersions;\n    this.groups = groups;\n    this.versions = versions;\n    this.lockStatus = lockStatus;\n  }\n}\n","import { jsonObject, jsonMember } from 'typedjson';\n\n/**\n * A container for contract's WASM bytes.\n */\n@jsonObject\nexport class ContractWasm {\n  /**\n   * The WASM bytes of the contract as a string.\n   */\n  @jsonMember({ name: 'bytes', constructor: String })\n  public bytes!: string;\n\n  constructor(bytes: string) {\n    this.bytes = bytes;\n  }\n}\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\n\n/**\n * A utility class for various data conversions used in the Casper ecosystem.\n * Provides methods to convert between different encodings (Base64, Base16) and to perform conversions between CSPR and motes.\n */\nexport class Conversions {\n  /**\n   * Encodes a `Uint8Array` into a string using Base-64 encoding.\n   *\n   * @param bytes - The `Uint8Array` to be encoded.\n   * @returns A Base-64 encoded string representation of the input bytes.\n   *\n   * @example\n   * const bytes = new Uint8Array([72, 101, 108, 108, 111]);\n   * const base64 = Conversions.encodeBase64(bytes);\n   * console.log(base64); // Outputs: \"SGVsbG8=\"\n   */\n  static encodeBase64(bytes: Uint8Array): string {\n    return Buffer.from(bytes).toString('base64');\n  }\n\n  /**\n   * Decodes a Base-64 encoded string and returns a `Uint8Array` of bytes.\n   *\n   * @param base64String - The Base-64 encoded string to be decoded.\n   * @returns A `Uint8Array` containing the decoded bytes.\n   *\n   * @example\n   * const base64 = \"SGVsbG8=\";\n   * const bytes = Conversions.decodeBase64(base64);\n   * console.log(bytes); // Outputs: Uint8Array(5) [72, 101, 108, 108, 111]\n   */\n  static decodeBase64(base64String: string): Uint8Array {\n    return new Uint8Array(Buffer.from(base64String, 'base64'));\n  }\n\n  /**\n   * Converts a Base-64 encoded string to a Base-16 (hexadecimal) encoded string.\n   *\n   * @param base64 - The Base-64 encoded string to be converted.\n   * @returns A Base-16 encoded string.\n   *\n   * @example\n   * const base64 = \"SGVsbG8=\";\n   * const base16 = Conversions.base64to16(base64);\n   * console.log(base16); // Outputs: \"48656c6c6f\"\n   */\n  static base64to16(base64: string): string {\n    return Conversions.encodeBase16(Conversions.decodeBase64(base64));\n  }\n\n  /**\n   * Encodes a `Uint8Array` into a string using Base-16 (hexadecimal) encoding.\n   *\n   * @param bytes - The `Uint8Array` to be encoded.\n   * @returns A Base-16 encoded string representation of the input bytes.\n   *\n   * @example\n   * const bytes = new Uint8Array([72, 101, 108, 108, 111]);\n   * const base16 = Conversions.encodeBase16(bytes);\n   * console.log(base16); // Outputs: \"48656c6c6f\"\n   */\n  static encodeBase16(bytes: Uint8Array): string {\n    return Buffer.from(bytes).toString('hex');\n  }\n\n  /**\n   * Decodes a Base-16 (hexadecimal) encoded string and returns a `Uint8Array` of bytes.\n   *\n   * @param base16String - The Base-16 encoded string to be decoded.\n   * @returns A `Uint8Array` containing the decoded bytes.\n   *\n   * @example\n   * const base16 = \"48656c6c6f\";\n   * const bytes = Conversions.decodeBase16(base16);\n   * console.log(bytes); // Outputs: Uint8Array(5) [72, 101, 108, 108, 111]\n   */\n  static decodeBase16(base16String: string): Uint8Array {\n    return new Uint8Array(Buffer.from(base16String, 'hex'));\n  }\n\n  /**\n   * Converts a CSPR amount to its mote equivalent.\n   *\n   * @param cspr - A `string` amount of CSPR to convert to motes.\n   * @returns A `BigNumber` containing the equivalent amount in motes.\n   *\n   * @remarks\n   * 1 CSPR = 10^9 motes\n   *\n   * @example\n   * const cspr = 1;\n   * const motes = Conversions.csprToMotes(cspr);\n   * console.log(motes.toString()); // Outputs: \"1000000000\"\n   */\n  static csprToMotes(cspr: string | number): BigNumber {\n    if (typeof cspr === 'string' && !/^\\d+(\\.\\d+)?$/.test(cspr)) {\n      throw new Error('Invalid input: cspr must be a string representing a valid positive number.');\n    }\n\n    // eslint-disable-next-line prefer-const\n    let [integerPart, decimalPart = \"\"] = cspr.toString().split('.');\n    let result = BigNumber.from(integerPart).mul(10 ** 9);\n\n    if (decimalPart.length > 0) {\n      decimalPart = (decimalPart + '000000000').slice(0, 9);\n\n      result = result.add(decimalPart);\n    }\n\n    return result;\n  }\n\n  /**\n   * Converts an amount in motes to its CSPR equivalent.\n   *\n   * @param motes - A `BigNumberish` amount of motes to convert to CSPR.\n   * @returns A `BigNumber` containing the equivalent amount in CSPR.\n   *\n   * @remarks\n   * This function will round to the nearest whole integer.\n   * 1 mote = 10^-9 CSPR\n   *\n   * @example\n   * const motes = BigNumber.from('1000000000');\n   * const cspr = Conversions.motesToCSPR(motes);\n   * console.log(cspr.toString()); // Outputs: \"1\"\n   */\n  static motesToCSPR(motes: BigNumberish): string {\n    const motesBigNumber = BigNumber.from(motes);\n\n    if (motesBigNumber.lt(0)) {\n      throw new Error('Motes cannot be negative number');\n    }\n\n    const resultStr = motesBigNumber.toBigInt().toString();\n\n    const integerPart = resultStr.slice(0, -9) || \"0\";\n    const decimalPart = resultStr.slice(-9).padStart(9, '0');\n\n    return `${integerPart}.${decimalPart}`.replace(/\\.?0+$/, '');\n  }\n}\n","import { jsonArrayMember, jsonMember, jsonObject, TypedJSON } from 'typedjson';\nimport { concat } from '@ethersproject/bytes';\n\nimport { Hash } from './key';\nimport { HexBytes } from './HexBytes';\nimport { PublicKey, PrivateKey } from './keypair';\nimport { Duration, Timestamp } from './Time';\nimport { Approval, Transaction } from './Transaction';\nimport {\n  TransactionEntryPoint,\n  TransactionEntryPointEnum\n} from './TransactionEntryPoint';\nimport { InitiatorAddr } from './InitiatorAddr';\nimport { PaymentLimitedMode, PricingMode } from './PricingMode';\nimport { TransactionTarget } from './TransactionTarget';\nimport { TransactionScheduling } from './TransactionScheduling';\nimport { ExecutableDeployItem } from './ExecutableDeployItem';\nimport {\n  byteHash,\n  toBytesString,\n  toBytesU32,\n  toBytesU64\n} from './ByteConverters';\nimport { CLValue } from './clvalue';\n\n/**\n * Represents the header of a deploy in the blockchain.\n * The header contains metadata such as the account initiating the deploy, the body hash, gas price, timestamp, TTL, and dependencies.\n */\n@jsonObject\nexport class DeployHeader {\n  /**\n   * The public key of the account initiating the deploy.\n   * This key is used to verify the identity of the account making the deploy request.\n   */\n  @jsonMember({\n    constructor: PublicKey,\n    deserializer: json => {\n      if (!json) return;\n      return PublicKey.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  public account?: PublicKey;\n\n  /**\n   * The hash of the body of the deploy, which is used to verify the contents of the deploy.\n   * The body contains the session logic and payment logic of the deploy.\n   */\n  @jsonMember({\n    name: 'body_hash',\n    constructor: Hash,\n    deserializer: json => {\n      if (!json) return;\n      return Hash.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  public bodyHash?: Hash;\n\n  /**\n   * The name of the blockchain chain that the deploy is associated with.\n   * This helps prevent the deploy from being accidentally or maliciously included in a different chain.\n   */\n  @jsonMember({ name: 'chain_name', constructor: String })\n  public chainName = '';\n\n  /**\n   * A list of other deploys that must be executed before this one.\n   * This ensures dependencies are executed in the correct order.\n   */\n  @jsonArrayMember(Hash, {\n    name: 'dependencies',\n    serializer: (value: Hash[]) => value.map(it => it.toJSON()),\n    deserializer: (json: any) => json.map((it: string) => Hash.fromJSON(it))\n  })\n  public dependencies: Hash[] = [];\n\n  /**\n   * The price of gas for executing the deploy.\n   * Gas is used to pay for the computational resources required to process the deploy.\n   */\n  @jsonMember({ name: 'gas_price', constructor: Number })\n  public gasPrice = 1;\n\n  /**\n   * The timestamp when the deploy was created.\n   * This timestamp is used to determine the deploy's position in time.\n   */\n  @jsonMember({\n    constructor: Timestamp,\n    deserializer: json => Timestamp.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  public timestamp: Timestamp = new Timestamp(new Date());\n\n  /**\n   * The time-to-live (TTL) for the deploy, after which it will expire if not executed.\n   * The default TTL is 30 minutes.\n   */\n  @jsonMember({\n    constructor: Duration,\n    deserializer: json => Duration.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  public ttl: Duration = new Duration(DEFAULT_DEPLOY_TTL);\n\n  /**\n   * Constructs a `DeployHeader` instance with the specified parameters.\n   * @param chainName The name of the blockchain chain.\n   * @param dependencies A list of deploys that must be executed before this one.\n   * @param gasPrice The gas price for the deploy.\n   * @param timestamp The timestamp when the deploy is created.\n   * @param ttl The TTL for the deploy.\n   * @param account The public key of the account initiating the deploy (optional).\n   * @param bodyHash The hash of the body of the deploy (optional).\n   */\n  constructor(\n    chainName = '',\n    dependencies: Hash[] = [],\n    gasPrice = 1,\n    timestamp: Timestamp = new Timestamp(new Date()),\n    ttl: Duration = new Duration(DEFAULT_DEPLOY_TTL),\n    account?: PublicKey,\n    bodyHash?: Hash\n  ) {\n    this.chainName = chainName;\n    this.dependencies = dependencies;\n    this.gasPrice = gasPrice;\n    this.timestamp = timestamp;\n    this.ttl = ttl;\n    this.account = account;\n    this.bodyHash = bodyHash;\n  }\n\n  /**\n   * Converts the deploy header to a byte array for transmission or storage.\n   * @returns A `Uint8Array` representing the deploy header in byte format.\n   */\n  public toBytes(): Uint8Array {\n    const dependenciesBytes = this.dependencies.map(e => e.toBytes());\n    dependenciesBytes.splice(0, 0, toBytesU32(this.dependencies?.length));\n\n    return concat([\n      this.account!.bytes(),\n      toBytesU64(Date.parse(this.timestamp.toJSON())),\n      toBytesU64(this.ttl.duration),\n      toBytesU64(this.gasPrice),\n      this.bodyHash!.toBytes(),\n      concat(dependenciesBytes),\n      toBytesString(this.chainName)\n    ]);\n  }\n\n  /**\n   * Returns a default `DeployHeader` instance with default values.\n   * @returns A `DeployHeader` instance with default values.\n   */\n  public static default(): DeployHeader {\n    return new DeployHeader();\n  }\n}\n\n/**\n * Represents a deploy in the blockchain, including the header, payment, session, and approvals.\n * A `Deploy` object is used to package the logic for executing a contract, payment, or transfer on the blockchain.\n */\n@jsonObject\nexport class Deploy {\n  /**\n   * A list of approvals, including signatures from accounts that have approved the deploy.\n   */\n  @jsonArrayMember(() => Approval)\n  public approvals: Approval[] = [];\n\n  /**\n   * The unique hash that identifies this deploy. This hash is used to verify the integrity of the deploy.\n   */\n  @jsonMember({\n    deserializer: json => Hash.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  public hash: Hash;\n\n  /**\n   * The header of the deploy, which contains metadata such as the account, gas price, timestamp, and TTL.\n   */\n  @jsonMember({ constructor: DeployHeader })\n  public header: DeployHeader;\n\n  /**\n   * The executable item representing the payment logic of the deploy.\n   */\n  @jsonMember({ constructor: ExecutableDeployItem })\n  public payment: ExecutableDeployItem;\n\n  /**\n   * The executable item representing the session logic of the deploy.\n   */\n  @jsonMember({ constructor: ExecutableDeployItem })\n  public session: ExecutableDeployItem;\n\n  /**\n   * Constructs a `Deploy` object.\n   *\n   * @param hash The deploy hash identifying this deploy.\n   * @param header The deploy header containing metadata.\n   * @param payment The executable deploy item representing the payment logic.\n   * @param session The executable deploy item representing the session logic.\n   * @param approvals An array of signatures and accounts who have approved this deploy.\n   */\n  constructor(\n    hash: Hash,\n    header: DeployHeader,\n    payment: ExecutableDeployItem,\n    session: ExecutableDeployItem,\n    approvals: Approval[]\n  ) {\n    this.approvals = approvals;\n    this.session = session;\n    this.payment = payment;\n    this.header = header;\n    this.hash = hash;\n  }\n\n  /**\n   * Validates the deploy by checking its body hash, deploy hash, and approval signatures.\n   *\n   * @returns `true` if the deploy is valid, otherwise throws an error.\n   */\n  public validate(): boolean {\n    const paymentBytes = this.payment.bytes();\n    const sessionBytes = this.session.bytes();\n    const concatenatedBytes = concat([paymentBytes, sessionBytes]);\n    const calculatedBodyHash = new Hash(byteHash(concatenatedBytes));\n\n    const headerBytes = this.header.toBytes();\n    const calculatedHash = new Hash(byteHash(headerBytes));\n\n    if (\n      !this.header.bodyHash?.equals(calculatedBodyHash) ||\n      !this.hash.equals(calculatedHash)\n    ) {\n      throw new Error('Invalid deploy hash or body hash');\n    }\n\n    this.approvals.forEach(approval => {\n      if (\n        !approval.signer.verifySignature(\n          this.hash.toBytes(),\n          approval.signature.bytes\n        )\n      ) {\n        throw new Error('Invalid approval signature');\n      }\n    });\n\n    return true;\n  }\n\n  /**\n   * Signs the deploy with a given private key and adds the signature to the approvals list.\n   *\n   * @param keys The private key used to sign the deploy.\n   */\n  public sign(keys: PrivateKey): void {\n    const signatureBytes = keys.signAndAddAlgorithmBytes(this.hash.toBytes());\n    const signature = new HexBytes(signatureBytes);\n    this.approvals.push(new Approval(keys.publicKey, signature));\n  }\n\n  /**\n   * Converts the deploy object into a byte array for transmission or storage.\n   *\n   * @returns A `Uint8Array` representing the deploy in byte format.\n   */\n  toBytes(): Uint8Array {\n    return concat([\n      this.header.toBytes(),\n      this.hash.toBytes(),\n      concat([this.payment.bytes(), this.session.bytes()]),\n      serializeApprovals(this.approvals)\n    ]);\n  }\n\n  /**\n   * Sets an already generated signature for the deploy.\n   *\n   * @param deploy The deploy instance.\n   * @param signature The Ed25519 or Secp256K1 signature.\n   * @param publicKey The public key used to generate the signature.\n   * @returns A new `Deploy` instance with the added signature.\n   */\n  public static setSignature(\n    deploy: Deploy,\n    signature: Uint8Array,\n    publicKey: PublicKey\n  ): Deploy {\n    const hex = new HexBytes(signature);\n    deploy.approvals.push(new Approval(publicKey, hex));\n    return deploy;\n  }\n\n  /**\n   * Creates a new `Deploy` instance with the provided parameters.\n   *\n   * @param hash The deploy hash identifying this deploy.\n   * @param header The deploy header.\n   * @param payment The executable deploy item for the payment logic.\n   * @param session The executable deploy item for the session logic.\n   * @param approvals An array of approvals for the deploy.\n   * @returns A new `Deploy` object.\n   */\n  public static createNew(\n    hash: Hash,\n    header: DeployHeader,\n    payment: ExecutableDeployItem,\n    session: ExecutableDeployItem,\n    approvals: Approval[] = []\n  ): Deploy {\n    return new Deploy(hash, header, payment, session, approvals);\n  }\n\n  /**\n   * Adds a runtime argument to a `Deploy` object\n   * @param deploy The `Deploy` object for which to add the runtime argument\n   * @param name The name of the runtime argument\n   * @param value The value of the runtime argument\n   * @returns The original `Deploy` with the additional runtime argument\n   * @remarks Will fail if the `Deploy` has already been signed\n   */\n  public static addArgToDeploy(\n    deploy: Deploy,\n    name: string,\n    value: CLValue\n  ): Deploy {\n    if (deploy.approvals.length !== 0) {\n      throw Error('Can not add argument to already signed deploy.');\n    }\n\n    const deploySession = deploy.session;\n    deploySession.setArg(name, value);\n\n    return Deploy.makeDeploy(deploy.header, deploy.payment, deploy.session);\n  }\n\n  /**\n   * Creates a `Deploy` instance from the deploy header and session/payment logic.\n   *\n   * @param deployHeader The deploy header.\n   * @param payment The payment logic of the deploy.\n   * @param session The session logic of the deploy.\n   * @returns A new `Deploy` object.\n   */\n  public static makeDeploy(\n    deployHeader: DeployHeader,\n    payment: ExecutableDeployItem,\n    session: ExecutableDeployItem\n  ): Deploy {\n    const paymentBytes = payment.bytes();\n    const sessionBytes = session.bytes();\n    const serializedBody = concat([paymentBytes, sessionBytes]);\n    deployHeader.bodyHash = new Hash(byteHash(serializedBody));\n    const deployHash = new Hash(byteHash(deployHeader.toBytes()));\n    return Deploy.createNew(deployHash, deployHeader, payment, session);\n  }\n\n  /**\n   * Converts the `Deploy` into a `Transaction` object.\n   * This method creates a transaction based on the deploy, including its payment and session logic.\n   *\n   * @param deploy The deploy object.\n   * @returns A new `Transaction` object created from the deploy.\n   */\n  static newTransactionFromDeploy(deploy: Deploy): Transaction {\n    let paymentAmount = 0;\n    let transactionEntryPoint: TransactionEntryPoint;\n\n    if (deploy.session.transfer) {\n      transactionEntryPoint = new TransactionEntryPoint(\n        TransactionEntryPointEnum.Transfer\n      );\n    } else if (deploy.session.moduleBytes) {\n      transactionEntryPoint = new TransactionEntryPoint(\n        TransactionEntryPointEnum.Call\n      );\n    } else {\n      let entryPoint = '';\n\n      if (deploy.session.storedContractByHash) {\n        entryPoint = deploy.session.storedContractByHash.entryPoint;\n      } else if (deploy.session.storedContractByName) {\n        entryPoint = deploy.session.storedContractByName.entryPoint;\n      } else if (deploy.session.storedVersionedContractByHash) {\n        entryPoint = deploy.session.storedVersionedContractByHash.entryPoint;\n      } else if (deploy.session.storedVersionedContractByName) {\n        entryPoint = deploy.session.storedVersionedContractByName.entryPoint;\n      }\n      transactionEntryPoint = new TransactionEntryPoint(\n        TransactionEntryPointEnum.Custom,\n        entryPoint\n      );\n    }\n\n    const amountArgument = deploy.payment.getArgs();\n    if (amountArgument) {\n      const parsed = amountArgument.args.get('amount');\n      if (parsed) {\n        paymentAmount = parseInt(parsed.toString(), 10) || 0;\n      }\n    }\n\n    const standardPayment =\n      deploy.payment.moduleBytes?.moduleBytes.length === 0;\n\n    const pricingMode = new PricingMode();\n    const paymentLimitedMode = new PaymentLimitedMode();\n    paymentLimitedMode.gasPriceTolerance = deploy.header.gasPrice ?? 1;\n    paymentLimitedMode.paymentAmount = paymentAmount;\n    paymentLimitedMode.standardPayment = standardPayment;\n    pricingMode.paymentLimited = paymentLimitedMode;\n\n    return new Transaction(\n      deploy.hash,\n      deploy.header.chainName,\n      deploy.header.timestamp,\n      deploy.header.ttl,\n      new InitiatorAddr(deploy.header.account),\n      pricingMode,\n      deploy.session.getArgs(),\n      TransactionTarget.newTransactionTargetFromSession(deploy.session),\n      transactionEntryPoint,\n      new TransactionScheduling({}), // Standard\n      deploy.approvals,\n      undefined,\n      deploy\n    );\n  }\n\n  /**\n   * Converts a JSON representation of a deploy to a `Deploy` object.\n   *\n   * @param json The JSON representation of a `Deploy`.\n   * @returns A `Deploy` object if successful, or throws an error if parsing fails.\n   */\n  public static fromJSON(json: any): Deploy {\n    let deploy: Deploy | undefined;\n\n    try {\n      const data: Record<string, any> =\n        typeof json === 'string' ? JSON.parse(json) : json;\n\n      const deployJson: Record<string, any> | null =\n        data.deploy ?? data.Deploy ?? data?.transaction?.Deploy ?? data ?? null;\n\n      if (!(deployJson?.hash && deployJson?.header?.account)) {\n        throw new Error(\"The JSON can't be parsed as a Deploy.\");\n      }\n\n      const serializer = new TypedJSON(Deploy);\n      deploy = serializer.parse(deployJson);\n\n      if (!deploy) {\n        throw new Error(\"The JSON can't be parsed as a Deploy.\");\n      }\n    } catch (e) {\n      throw new Error(`Serialization error: ${e.message}`);\n    }\n\n    const isDeployValid = deploy.validate();\n\n    if (!isDeployValid) {\n      throw new Error(`Deploy validation failed`);\n    }\n\n    return deploy;\n  }\n\n  /**\n   * Converts the `Deploy` object into a JSON representation.\n   *\n   * @param deploy The deploy object to convert to JSON.\n   * @returns A JSON representation of the deploy.\n   */\n  public static toJSON = (deploy: Deploy) => {\n    const serializer = new TypedJSON(Deploy);\n    return serializer.toPlainJson(deploy);\n  };\n\n  /**\n   * Identifies whether this `Deploy` represents a transfer of CSPR.\n   *\n   * @returns `true` if the deploy is a transfer, otherwise `false`.\n   */\n  public isTransfer(): boolean {\n    return this.session.isTransfer();\n  }\n\n  /**\n   * Identifies whether this `Deploy` represents a standard payment, like a gas payment.\n   *\n   * @returns `true` if the deploy is a standard payment, otherwise `false`.\n   */\n  public isStandardPayment(): boolean {\n    if (this.payment.isModuleBytes()) {\n      return this.payment.asModuleBytes()?.moduleBytes.length === 0;\n    }\n    return false;\n  }\n\n  /**\n   * Gets the byte-size of a deploy\n   * @param deploy The `Deploy` for which to calculate the size\n   * @returns The size of the `Deploy` in its serialized representation\n   */\n  public static getDeploySizeInBytes = (deploy: Deploy): number => {\n    const hashSize = deploy.hash.toBytes().length;\n    const bodySize = concat([deploy.payment.bytes(), deploy.session.bytes()])\n      .length;\n    const headerSize = deploy.header.toBytes().length;\n    const approvalsSize = deploy.approvals\n      .map(approval => {\n        return (\n          (approval.signature.bytes.length + approval.signer.bytes().length) / 2\n        );\n      })\n      .reduce((a, b) => a + b, 0);\n\n    return hashSize + headerSize + bodySize + approvalsSize;\n  };\n}\n\n/**\n * Serializes an array of `Approval`s into a `Uint8Array` typed byte array.\n * This is used to store or transmit the approvals associated with a deploy.\n *\n * @param approvals An array of `Approval` objects that represent signatures from accounts that have approved the deploy.\n * @returns A `Uint8Array` typed byte array that can be deserialized back into an array of `Approval` objects.\n *\n * @example\n * const approvals = [new Approval(publicKey, signature)];\n * const serializedApprovals = serializeApprovals(approvals);\n */\nexport const serializeApprovals = (approvals: Approval[]): Uint8Array => {\n  const len = toBytesU32(approvals.length);\n  const bytes = concat(\n    approvals.map(approval => {\n      return concat([\n        Uint8Array.from(Buffer.from(approval.signer.toString(), 'hex')),\n        Uint8Array.from(Buffer.from(approval.signature.toString(), 'hex'))\n      ]);\n    })\n  );\n  return concat([len, bytes]);\n};\n\n/**\n * Default TTL value used for deploys (30 minutes).\n */\nexport const DEFAULT_DEPLOY_TTL = 1800000;\n","import { jsonObject, jsonMember, jsonArrayMember } from 'typedjson';\nimport { Hash, AccountHash, URef, TransferHash } from './key';\n\n/**\n * Represents information about a deploy in the blockchain.\n * This class encapsulates details such as the deploy hash, the account making the deploy, gas usage, source URef, and associated transfers.\n */\n@jsonObject\nexport class DeployInfo {\n  /**\n   * The unique hash identifying the deploy. This hash is used to verify the integrity and authenticity of the deploy.\n   */\n  @jsonMember({\n    name: 'deploy_hash',\n    constructor: Hash,\n    deserializer: json => Hash.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  deployHash: Hash;\n\n  /**\n   * The account hash of the account initiating the deploy. This is used to identify the account responsible for the deploy.\n   */\n  @jsonMember({\n    name: 'from',\n    constructor: AccountHash,\n    deserializer: json => AccountHash.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  from: AccountHash;\n\n  /**\n   * The amount of gas used for the deploy. This value is typically in motes, a subunit of CSPR.\n   */\n  @jsonMember({ name: 'gas', constructor: String })\n  gas: string;\n\n  /**\n   * The source URef from which the deploy is triggered. URefs are used to identify a reference to a contract or resource in the blockchain.\n   */\n  @jsonMember({\n    name: 'source',\n    constructor: URef,\n    deserializer: json => URef.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  source: URef;\n\n  /**\n   * A list of transfer hashes associated with the deploy. These are hashes that identify transfers (e.g., of CSPR or other assets) associated with the deploy.\n   */\n  @jsonArrayMember(TransferHash, {\n    name: 'transfers',\n    serializer: (value: TransferHash[]) => value.map(it => it.toJSON()),\n    deserializer: (json: any) =>\n      json.map((it: string) => TransferHash.fromJSON(it))\n  })\n  transfers: TransferHash[];\n}\n","import { jsonObject, jsonMember, jsonArrayMember, AnyT } from 'typedjson';\nimport { CLTypeRaw } from './clvalue';\n\n/**\n * Enum representing the type of entry point.\n */\nexport enum EntryPointType {\n  Session = 'Session',\n  Contract = 'Contract',\n  Caller = 'Caller',\n  Called = 'Called',\n  Factory = 'Factory'\n}\n\n/**\n * Enum representing the payment options for an entry point.\n */\nexport enum EntryPointPayment {\n  /**\n   * The caller must cover cost.\n   */\n  Caller = 'Caller',\n  /**\n   * Will cover cost to execute self but not cost of any subsequent invoked contracts.\n   */\n  DirectInvocationOnly = 'DirectInvocationOnly',\n  /**\n   * Will cover cost to execute self and the cost of any subsequent invoked contracts.\n   */\n  SelfOnward = 'SelfOnward'\n}\n\n/**\n * Class representing an argument for an entry point. Each argument has a name and a corresponding `CLTypeRaw`.\n */\n@jsonObject\nexport class EntryPointArg {\n  /**\n   * The name of the entry point argument.\n   */\n  @jsonMember({ name: 'name', constructor: String })\n  name: string;\n\n  /**\n   * The type of the argument, represented by `CLTypeRaw`.\n   */\n  @jsonMember({\n    name: 'cl_type',\n    constructor: CLTypeRaw,\n    deserializer: json => {\n      if (!json) return;\n      return CLTypeRaw.parseCLType(json);\n    },\n    serializer: (value: CLTypeRaw) => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  clType: CLTypeRaw;\n\n  /**\n   * Constructs an `EntryPointArg` instance.\n   * @param name The name of the argument.\n   * @param clType The type of the argument.\n   */\n  constructor(name: string, clType: CLTypeRaw) {\n    this.name = name;\n    this.clType = clType;\n  }\n}\n\n/**\n * Class representing version 1 of an entry point in the Casper VM.\n * It contains the entry point's access, arguments, type, payment type, name, and return type.\n */\n@jsonObject\nexport class EntryPointV1 {\n  /**\n   * The access control for the entry point.\n   */\n  @jsonMember({\n    name: 'access',\n    constructor: AnyT\n  })\n  access: any;\n\n  /**\n   * A list of arguments for the entry point.\n   */\n  @jsonArrayMember(EntryPointArg, { name: 'args' })\n  args: EntryPointArg[];\n\n  /**\n   * The type of entry point (e.g., session, contract, etc.).\n   */\n  @jsonMember({\n    name: 'entry_point_type',\n    constructor: String\n  })\n  entryPointType: EntryPointType;\n\n  /**\n   * The payment method required to access this entry point.\n   */\n  @jsonMember({\n    name: 'entry_point_payment',\n    constructor: String\n  })\n  entryPointPayment: EntryPointPayment;\n\n  /**\n   * The name of the entry point.\n   */\n  @jsonMember({ name: 'name', constructor: String })\n  name: string;\n\n  /**\n   * The return type of the entry point.\n   */\n  @jsonMember({\n    name: 'ret',\n    constructor: CLTypeRaw,\n    deserializer: json => {\n      if (!json) return;\n      return CLTypeRaw.parseCLType(json);\n    },\n    serializer: (value: CLTypeRaw) => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  ret: CLTypeRaw;\n\n  /**\n   * Constructs an `EntryPointV1` instance.\n   *\n   * @param access The access control for this entry point.\n   * @param args A list of arguments for the entry point.\n   * @param entryPointType The type of entry point.\n   * @param entryPointPayment The payment method for the entry point.\n   * @param name The name of the entry point.\n   * @param ret The return type of the entry point.\n   */\n  constructor(\n    access: any,\n    args: EntryPointArg[],\n    entryPointType: EntryPointType,\n    entryPointPayment: EntryPointPayment,\n    name: string,\n    ret: CLTypeRaw\n  ) {\n    this.access = access;\n    this.args = args;\n    this.entryPointType = entryPointType;\n    this.entryPointPayment = entryPointPayment;\n    this.name = name;\n    this.ret = ret;\n  }\n}\n\n/**\n * Class representing version 2 of an entry point in the Casper VM.\n * This version includes flags and a function index.\n */\n@jsonObject\nexport class EntryPointV2 {\n  /**\n   * Flags associated with this entry point.\n   */\n  @jsonMember({ name: 'flags', constructor: Number })\n  flags: number;\n\n  /**\n   * The function index for the entry point.\n   */\n  @jsonMember({ name: 'functionIndex', constructor: Number })\n  functionIndex: number;\n\n  /**\n   * Constructs an `EntryPointV2` instance.\n   *\n   * @param flags The flags for the entry point.\n   * @param functionIndex The function index for the entry point.\n   */\n  constructor(flags = 0, functionIndex = 0) {\n    this.flags = flags;\n    this.functionIndex = functionIndex;\n  }\n}\n\n/**\n * A wrapper class that can hold either version 1 or version 2 of an entry point.\n */\n@jsonObject\nexport class EntryPointValue {\n  /**\n   * Version 1 of the entry point, if available.\n   */\n  @jsonMember({\n    name: 'V1CasperVm',\n    constructor: EntryPointV1\n  })\n  v1CasperVm?: EntryPointV1;\n\n  /**\n   * Version 2 of the entry point, if available.\n   */\n  @jsonMember({\n    name: 'V2CasperVm',\n    constructor: EntryPointV2\n  })\n  v2CasperVm?: EntryPointV2;\n\n  /**\n   * Constructs an `EntryPointValue` instance.\n   *\n   * @param v1CasperVm Version 1 of the entry point, if available.\n   * @param v2CasperVm Version 2 of the entry point, if available.\n   */\n  constructor(v1CasperVm?: EntryPointV1, v2CasperVm?: EntryPointV2) {\n    this.v1CasperVm = v1CasperVm;\n    this.v2CasperVm = v2CasperVm;\n  }\n}\n","import {\n  jsonObject,\n  jsonMember,\n  jsonArrayMember,\n  jsonMapMember\n} from 'typedjson';\nimport { PublicKey } from './keypair';\nimport { ValidatorWeightEraEnd } from './ValidatorWeight';\nimport { CLValueUInt512 } from './clvalue';\nimport { deserializeRewards, serializeRewards } from './SerializationUtils';\n\n/**\n * Class representing the rewards associated with a validator in a given era.\n */\n@jsonObject\nexport class EraReward {\n  /**\n   * The public key of the validator receiving the reward.\n   */\n  @jsonMember({\n    name: 'validator',\n    constructor: PublicKey,\n    deserializer: json => PublicKey.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  public validator: PublicKey;\n\n  /**\n   * The amount of reward given to the validator.\n   */\n  @jsonMember({\n    name: 'amount',\n    constructor: CLValueUInt512,\n    deserializer: json => CLValueUInt512.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  public amount: CLValueUInt512;\n\n  /**\n   * Constructs an `EraReward` instance.\n   *\n   * @param validator The public key of the validator.\n   * @param amount The reward amount.\n   */\n  constructor(validator: PublicKey, amount: CLValueUInt512) {\n    this.validator = validator;\n    this.amount = amount;\n  }\n}\n\n/**\n * Class representing the era report containing information about equivocators, inactive validators, and rewards.\n */\n@jsonObject\nexport class EraReport {\n  /**\n   * List of validators that have been found to equivocate during the era.\n   */\n  @jsonArrayMember(PublicKey, {\n    name: 'equivocators',\n    serializer: (value: PublicKey[]) => value.map(it => it.toJSON()),\n    deserializer: (json: any) =>\n      json.map((it: string) => PublicKey.fromJSON(it))\n  })\n  public equivocators: PublicKey[];\n\n  /**\n   * List of inactive validators during the era.\n   */\n  @jsonArrayMember(PublicKey, {\n    name: 'inactive_validators',\n    serializer: (value: PublicKey[]) => value.map(it => it.toJSON()),\n    deserializer: (json: any) =>\n      json.map((it: string) => PublicKey.fromJSON(it))\n  })\n  public inactiveValidators: PublicKey[];\n\n  /**\n   * List of rewards distributed to validators during the era.\n   */\n  @jsonArrayMember(EraReward, { name: 'rewards' })\n  public rewards: EraReward[];\n\n  /**\n   * Constructs an `EraReport` instance.\n   *\n   * @param equivocators The list of equivocators.\n   * @param inactiveValidators The list of inactive validators.\n   * @param rewards The list of rewards distributed to validators.\n   */\n  constructor(\n    equivocators: PublicKey[] = [],\n    inactiveValidators: PublicKey[] = [],\n    rewards: EraReward[] = []\n  ) {\n    this.equivocators = equivocators;\n    this.inactiveValidators = inactiveValidators;\n    this.rewards = rewards;\n  }\n}\n\n/**\n * Class representing the details of an era's end, version 2. It includes information like equivocations, inactive validators, and rewards.\n */\n@jsonObject\nexport class EraEndV2 {\n  /**\n   * List of validators that have been found to equivocate during the era.\n   */\n  @jsonArrayMember(PublicKey, {\n    name: 'equivocators',\n    serializer: (value: PublicKey[]) => value.map(it => it.toJSON()),\n    deserializer: (json: any) =>\n      json.map((it: string) => PublicKey.fromJSON(it))\n  })\n  public equivocators: PublicKey[];\n\n  /**\n   * List of inactive validators during the era.\n   */\n  @jsonArrayMember(PublicKey, {\n    name: 'inactive_validators',\n    serializer: (value: PublicKey[]) => value.map(it => it.toJSON()),\n    deserializer: (json: any) =>\n      json.map((it: string) => PublicKey.fromJSON(it))\n  })\n  public inactiveValidators: PublicKey[];\n\n  /**\n   * List of validator weights for the next era.\n   */\n  @jsonArrayMember(ValidatorWeightEraEnd, {\n    name: 'next_era_validator_weights'\n  })\n  public nextEraValidatorWeights: ValidatorWeightEraEnd[];\n\n  /**\n   * A map of rewards for each validator, identified by their public key, in the next era.\n   */\n  @jsonMapMember(String, Array, {\n    name: 'rewards',\n    serializer: (map: Map<string, CLValueUInt512[]>) => serializeRewards(map),\n    deserializer: deserializeRewards\n  })\n  public rewards: Map<string, CLValueUInt512[]>;\n\n  /**\n   * The gas price for the next era.\n   */\n  @jsonMember({ name: 'next_era_gas_price', constructor: Number })\n  public nextEraGasPrice: number;\n\n  /**\n   * Constructs an `EraEndV2` instance.\n   *\n   * @param equivocators The list of equivocators.\n   * @param inactiveValidators The list of inactive validators.\n   * @param nextEraValidatorWeights The validator weights for the next era.\n   * @param rewards The map of rewards for each validator in the next era.\n   * @param nextEraGasPrice The gas price for the next era.\n   */\n  constructor(\n    equivocators: PublicKey[],\n    inactiveValidators: PublicKey[],\n    nextEraValidatorWeights: ValidatorWeightEraEnd[],\n    rewards: Map<string, CLValueUInt512[]>,\n    nextEraGasPrice: number\n  ) {\n    this.equivocators = equivocators;\n    this.inactiveValidators = inactiveValidators;\n    this.nextEraValidatorWeights = nextEraValidatorWeights;\n    this.rewards = rewards;\n    this.nextEraGasPrice = nextEraGasPrice;\n  }\n}\n\n/**\n * Class representing the details of an era's end, version 1.\n */\n@jsonObject\nexport class EraEndV1 {\n  /**\n   * The era report containing equivocators, inactive validators, and rewards.\n   */\n  @jsonMember({ name: 'era_report', constructor: EraReport })\n  public eraReport: EraReport;\n\n  /**\n   * The list of validator weights for the next era.\n   */\n  @jsonArrayMember(ValidatorWeightEraEnd, {\n    name: 'next_era_validator_weights'\n  })\n  public nextEraValidatorWeights: ValidatorWeightEraEnd[];\n\n  /**\n   * Constructs an `EraEndV1` instance.\n   *\n   * @param eraReport The era report.\n   * @param nextEraValidatorWeights The validator weights for the next era.\n   */\n  constructor(\n    eraReport: EraReport,\n    nextEraValidatorWeights: ValidatorWeightEraEnd[]\n  ) {\n    this.eraReport = eraReport;\n    this.nextEraValidatorWeights = nextEraValidatorWeights;\n  }\n}\n\n/**\n * A class that represents the end of an era with a unified structure.\n */\n@jsonObject\nexport class EraEnd {\n  /**\n   * List of validators that have been found to equivocate during the era.\n   */\n  @jsonArrayMember(PublicKey, {\n    name: 'equivocators',\n    serializer: (value: PublicKey[]) => value.map(it => it.toJSON()),\n    deserializer: (json: any) =>\n      json.map((it: string) => PublicKey.fromJSON(it))\n  })\n  public equivocators: PublicKey[];\n\n  /**\n   * List of inactive validators during the era.\n   */\n  @jsonArrayMember(PublicKey, {\n    name: 'inactive_validators',\n    serializer: (value: PublicKey[]) => value.map(it => it.toJSON()),\n    deserializer: (json: any) =>\n      json.map((it: string) => PublicKey.fromJSON(it))\n  })\n  public inactiveValidators: PublicKey[];\n\n  /**\n   * List of validator weights for the next era.\n   */\n  @jsonArrayMember(ValidatorWeightEraEnd, {\n    name: 'next_era_validator_weights'\n  })\n  public nextEraValidatorWeights: ValidatorWeightEraEnd[];\n\n  /**\n   * A map of rewards for each validator, identified by their public key.\n   */\n  @jsonMapMember(String, CLValueUInt512, {\n    name: 'rewards',\n    deserializer: deserializeRewards,\n    serializer: (map: Map<string, CLValueUInt512[]>) => serializeRewards(map)\n  })\n  public rewards: Map<string, CLValueUInt512[]>;\n\n  /**\n   * The gas price for the next era.\n   */\n  @jsonMember({ name: 'next_era_gas_price', constructor: Number })\n  public nextEraGasPrice: number;\n\n  /**\n   * Constructs an `EraEnd` instance.\n   *\n   * @param equivocators The list of equivocators.\n   * @param inactiveValidators The list of inactive validators.\n   * @param nextEraValidatorWeights The validator weights for the next era.\n   * @param rewards The map of rewards for each validator.\n   * @param nextEraGasPrice The gas price for the next era.\n   */\n  constructor(\n    equivocators: PublicKey[] = [],\n    inactiveValidators: PublicKey[] = [],\n    nextEraValidatorWeights: ValidatorWeightEraEnd[] = [],\n    rewards: Map<string, CLValueUInt512[]> = new Map(),\n    nextEraGasPrice = 1\n  ) {\n    this.equivocators = equivocators;\n    this.inactiveValidators = inactiveValidators;\n    this.nextEraValidatorWeights = nextEraValidatorWeights;\n    this.rewards = rewards;\n    this.nextEraGasPrice = nextEraGasPrice;\n  }\n\n  /**\n   * Converts an `EraEndV2` instance to `EraEnd`.\n   *\n   * @param eraEnd The `EraEndV2` instance.\n   * @returns A new `EraEnd` instance, or `null` if the `EraEndV2` is `null`.\n   */\n  static fromV2(eraEnd: EraEndV2 | null): EraEnd | null {\n    if (!eraEnd) return null;\n    const result = new EraEnd();\n    result.nextEraGasPrice = eraEnd.nextEraGasPrice;\n    result.equivocators = eraEnd.equivocators;\n    result.inactiveValidators = eraEnd.inactiveValidators;\n    result.nextEraValidatorWeights = eraEnd.nextEraValidatorWeights;\n    result.rewards = eraEnd.rewards;\n    return result;\n  }\n\n  /**\n   * Converts an `EraEndV1` instance to `EraEnd`.\n   *\n   * @param eraEnd The `EraEndV1` instance.\n   * @returns A new `EraEnd` instance, or `null` if the `EraEndV1` is `null`.\n   */\n  static fromV1(eraEnd: EraEndV1 | null): EraEnd | null {\n    if (!eraEnd) return null;\n\n    const rewardsMap = new Map<string, CLValueUInt512[]>();\n    for (const reward of eraEnd.eraReport.rewards) {\n      const validatorHex = reward.validator.toHex();\n      if (!rewardsMap.has(validatorHex)) {\n        rewardsMap.set(validatorHex, []);\n      }\n      rewardsMap.get(validatorHex)?.push(reward.amount);\n    }\n\n    const result = new EraEnd();\n    result.nextEraGasPrice = 1;\n    result.equivocators = eraEnd.eraReport.equivocators;\n    result.inactiveValidators = eraEnd.eraReport.inactiveValidators;\n    result.nextEraValidatorWeights = eraEnd.nextEraValidatorWeights;\n    result.rewards = rewardsMap;\n\n    return result;\n  }\n}\n","import { jsonArrayMember, jsonMember, jsonObject, TypedJSON } from 'typedjson';\nimport { PublicKey } from './keypair';\nimport { CLValueUInt512 } from './clvalue';\nimport { DelegationKind } from './Bid';\n\n/**\n * Class representing the allocation of seigniorage to a delegator.\n */\n@jsonObject\nexport class DelegatorAllocation {\n  /**\n   * Kinds of delegation bids.\n   */\n  @jsonMember({\n    name: 'delegator_kind',\n    constructor: DelegationKind,\n    deserializer: json => {\n      if (!json) return;\n      return DelegationKind.fromJSON(json);\n    }\n  })\n  delegatorKind: DelegationKind;\n\n  /**\n   * The public key of the validator associated with the delegator's allocation.\n   */\n  @jsonMember({\n    name: 'validator_public_key',\n    constructor: PublicKey,\n    deserializer: json => PublicKey.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  validatorPublicKey: PublicKey;\n\n  /**\n   * The amount of seigniorage allocated to the delegator.\n   */\n  @jsonMember({\n    name: 'amount',\n    constructor: CLValueUInt512,\n    deserializer: json => CLValueUInt512.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  amount: CLValueUInt512;\n\n  /**\n   * Constructs a `DelegatorAllocation` instance.\n   *\n   * @param delegatorKind Kinds of delegation bids.\n   * @param validatorPublicKey The public key of the associated validator.\n   * @param amount The amount of seigniorage allocated to the delegator.\n   */\n  constructor(\n    delegatorKind: DelegationKind,\n    validatorPublicKey: PublicKey,\n    amount: CLValueUInt512\n  ) {\n    this.delegatorKind = delegatorKind;\n    this.validatorPublicKey = validatorPublicKey;\n    this.amount = amount;\n  }\n}\n\n/**\n * Class representing the allocation of seigniorage to a validator.\n */\n@jsonObject\nexport class ValidatorAllocation {\n  /**\n   * The public key of the validator receiving the allocation.\n   */\n  @jsonMember({\n    name: 'validator_public_key',\n    constructor: PublicKey,\n    deserializer: json => {\n      if (!json) return;\n      return PublicKey.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  validatorPublicKey: PublicKey;\n\n  /**\n   * The amount of seigniorage allocated to the validator.\n   */\n  @jsonMember({\n    name: 'amount',\n    constructor: CLValueUInt512,\n    deserializer: json => {\n      if (!json) return;\n      return CLValueUInt512.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  amount: CLValueUInt512;\n\n  /**\n   * Constructs a `ValidatorAllocation` instance.\n   *\n   * @param validatorPublicKey The public key of the validator.\n   * @param amount The amount of seigniorage allocated to the validator.\n   */\n  constructor(validatorPublicKey: PublicKey, amount: CLValueUInt512) {\n    this.validatorPublicKey = validatorPublicKey;\n    this.amount = amount;\n  }\n}\n\n/**\n * Represents the JSON structure when the key \"Delegator\" is present.\n */\n@jsonObject\nexport class DelegatorData {\n  @jsonMember({\n    name: 'delegator_public_key',\n    constructor: PublicKey,\n    deserializer: json => {\n      if (!json) return;\n      return PublicKey.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  delegatorPublicKey?: PublicKey;\n\n  @jsonMember({\n    name: 'validator_public_key',\n    constructor: PublicKey,\n    deserializer: json => {\n      if (!json) return;\n      return PublicKey.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  validatorPublicKey: PublicKey;\n\n  @jsonMember({\n    name: 'amount',\n    constructor: CLValueUInt512,\n    deserializer: json => CLValueUInt512.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  amount: CLValueUInt512;\n}\n\n/**\n * Temporary helper class to match the overall JSON structure.\n * The JSON may contain one of the following keys:\n * - \"Validator\" (a ValidatorAllocation)\n * - \"DelegatorKind\" (a DelegatorAllocation)\n * - \"Delegator\" (a DelegatorData, which will be converted to a DelegatorAllocation)\n */\n@jsonObject\nclass TempSeigniorageAllocation {\n  @jsonMember({ name: 'Validator', constructor: ValidatorAllocation })\n  validator?: ValidatorAllocation;\n\n  @jsonMember({ name: 'DelegatorKind', constructor: DelegatorAllocation })\n  delegatorKind?: DelegatorAllocation;\n\n  @jsonMember({ name: 'Delegator', constructor: DelegatorData })\n  delegator?: DelegatorData;\n}\n\n/**\n * Class representing the seigniorage allocation for a validator and delegator.\n */\n@jsonObject\nexport class SeigniorageAllocation {\n  /**\n   * The allocation for a validator.\n   */\n  @jsonMember({ name: 'Validator', constructor: ValidatorAllocation })\n  validator?: ValidatorAllocation;\n\n  /**\n   * The allocation for a delegator.\n   */\n  @jsonMember({ name: 'DelegatorKind', constructor: DelegatorAllocation })\n  delegator?: DelegatorAllocation;\n\n  /**\n   * Constructs a `SeigniorageAllocation` instance.\n   *\n   * @param validator The validator allocation.\n   * @param delegator The delegator allocation.\n   */\n  constructor(\n    validator?: ValidatorAllocation,\n    delegator?: DelegatorAllocation\n  ) {\n    this.validator = validator;\n    this.delegator = delegator;\n  }\n\n  /**\n   * Custom deserialization from a JSON.\n   *\n   * The JSON is expected to have one of the following structures:\n   * - A \"Delegator\" key with an object containing \"delegator_public_key\", \"validator_public_key\", and \"amount\".\n   * - A \"Validator\" key with an object matching ValidatorAllocation.\n   * - A \"DelegatorKind\" key with an object matching DelegatorAllocation.\n   *\n   * @param json A JSON.\n   * @returns A new SeigniorageAllocation instance.\n   * @throws Error if the JSON is empty, invalid, or does not match any expected structure.\n   */\n  public static fromJSON(json: any): SeigniorageAllocation {\n    if (!json) {\n      throw new Error(`Invalid JSON for SeigniorageAllocation: ${json}`);\n    }\n\n    const temp = new TypedJSON(TempSeigniorageAllocation).parse(json);\n    if (!temp) {\n      throw new Error('Failed to parse JSON');\n    }\n\n    const allocation = new SeigniorageAllocation();\n\n    if (temp?.delegator) {\n      const delegatorKind = new DelegationKind();\n      delegatorKind.publicKey = temp?.delegator?.delegatorPublicKey;\n      allocation.delegator = new DelegatorAllocation(\n        delegatorKind,\n        temp?.delegator?.validatorPublicKey,\n        temp?.delegator?.amount\n      );\n    } else if (temp.validator) {\n      allocation.validator = temp.validator;\n    } else if (temp.delegatorKind) {\n      allocation.delegator = temp.delegatorKind;\n    } else {\n      throw new Error('incorrect SeigniorageAllocation format structure');\n    }\n\n    return allocation;\n  }\n}\n\n/**\n * Class representing information about an era, including seigniorage allocations.\n */\n@jsonObject\nexport class EraInfo {\n  /**\n   * A list of seigniorage allocations for validators and delegators in the era.\n   */\n  @jsonArrayMember(SeigniorageAllocation, {\n    name: 'seigniorage_allocations',\n    deserializer: json => {\n      if (!json) return;\n      return json.map((it: SeigniorageAllocation) =>\n        SeigniorageAllocation.fromJSON(it)\n      );\n    }\n  })\n  seigniorageAllocations: SeigniorageAllocation[];\n\n  /**\n   * Constructs an `EraInfo` instance.\n   *\n   * @param seigniorageAllocations The list of seigniorage allocations for validators and delegators.\n   */\n  constructor(seigniorageAllocations: SeigniorageAllocation[] = []) {\n    this.seigniorageAllocations = seigniorageAllocations;\n  }\n}\n","import { jsonObject, jsonMember } from 'typedjson';\nimport { Hash } from './key';\nimport { StoredValue } from './StoredValue';\n\n/**\n * Class representing a summary of an era, including the block hash, era ID,\n * stored value, state root hash, and the associated Merkle proof.\n */\n@jsonObject\nexport class EraSummary {\n  /**\n   * The hash of the block for this era.\n   */\n  @jsonMember({\n    name: 'block_hash',\n    constructor: Hash,\n    deserializer: json => Hash.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  public blockHash: Hash;\n\n  /**\n   * The unique identifier for the era.\n   */\n  @jsonMember({ name: 'era_id', constructor: Number })\n  public eraID: number;\n\n  /**\n   * The stored value for this era, representing data related to the state at the end of the era.\n   */\n  @jsonMember({ name: 'stored_value', constructor: StoredValue })\n  public storedValue: StoredValue;\n\n  /**\n   * The hash of the state root, which represents the state at the end of the era.\n   */\n  @jsonMember({\n    name: 'state_root_hash',\n    constructor: Hash,\n    deserializer: json => Hash.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  public stateRootHash: Hash;\n\n  /**\n   * The Merkle proof associated with the block in this era, used to verify the integrity\n   * of the data stored in the block.\n   */\n  @jsonMember({ name: 'merkle_proof', constructor: String })\n  public merkleProof: string;\n\n  /**\n   * Constructs an `EraSummary` instance.\n   *\n   * @param blockHash The hash of the block for this era.\n   * @param eraID The unique identifier for the era.\n   * @param storedValue The stored value representing data associated with the era.\n   * @param stateRootHash The hash of the state root at the end of the era.\n   * @param merkleProof The Merkle proof for the block in the era.\n   */\n  constructor(\n    blockHash: Hash,\n    eraID: number,\n    storedValue: StoredValue,\n    stateRootHash: Hash,\n    merkleProof: string\n  ) {\n    this.blockHash = blockHash;\n    this.eraID = eraID;\n    this.storedValue = storedValue;\n    this.stateRootHash = stateRootHash;\n    this.merkleProof = merkleProof;\n  }\n}\n","import { jsonMember, jsonObject } from 'typedjson';\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { concat } from '@ethersproject/bytes';\n\nimport { Args } from './Args';\nimport { CLTypeOption, CLTypeUInt64, CLValue, CLValueOption } from './clvalue';\nimport { ContractHash, URef } from './key';\nimport {\n  byteArrayJsonDeserializer,\n  byteArrayJsonSerializer,\n  deserializeArgs,\n  serializeArgs\n} from './SerializationUtils';\nimport { PublicKey } from './keypair';\n\n/**\n * Enum representing the different types of executable deploy items.\n */\nenum ExecutableDeployItemType {\n  ModuleBytes,\n  StoredContractByHash,\n  StoredContractByName,\n  StoredVersionedContractByHash,\n  StoredVersionedContractByName,\n  Transfer\n}\n\n/**\n * Represents a deploy item containing module bytes and associated arguments.\n */\n@jsonObject\nexport class ModuleBytes {\n  /**\n   * The module bytes in hexadecimal format.\n   */\n  @jsonMember({\n    name: 'module_bytes',\n    constructor: Uint8Array,\n    serializer: (bytes: Uint8Array) => byteArrayJsonSerializer(bytes),\n    deserializer: byteArrayJsonDeserializer\n  })\n  moduleBytes!: Uint8Array;\n\n  /**\n   * The arguments passed to the module.\n   */\n  @jsonMember(() => Args, {\n    deserializer: deserializeArgs,\n    serializer: (args: Args) => serializeArgs(args, false)\n  })\n  args: Args;\n\n  /**\n   * Constructs a `ModuleBytes` instance with module bytes and arguments.\n   * @param moduleBytes The module bytes in hexadecimal format.\n   * @param args The arguments for the module.\n   */\n  constructor(moduleBytes: Uint8Array, args: Args) {\n    this.moduleBytes = moduleBytes;\n    this.args = args;\n  }\n\n  /**\n   * Serializes the `ModuleBytes` instance to a byte array.\n   * @returns The serialized byte array.\n   */\n  bytes(): Uint8Array {\n    const lengthBytes = CLValue.newCLUInt32(\n      BigNumber.from(this.moduleBytes.length)\n    ).bytes();\n    const bytesArrayBytes = CLValue.newCLByteArray(this.moduleBytes).bytes();\n\n    let result = concat([lengthBytes, bytesArrayBytes]);\n\n    if (this.args) {\n      const argBytes = this.args.toBytes();\n      result = concat([result, argBytes]);\n    }\n\n    return result;\n  }\n}\n\n/**\n * Represents a deploy item with a stored contract referenced by its hash.\n */\n@jsonObject\nexport class StoredContractByHash {\n  /**\n   * The hash of the stored contract.\n   */\n  @jsonMember({\n    name: 'hash',\n    constructor: ContractHash,\n    deserializer: json => ContractHash.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  hash: ContractHash;\n\n  /**\n   * The entry point of the contract to invoke.\n   */\n  @jsonMember({ name: 'entry_point', constructor: String })\n  entryPoint: string;\n\n  /**\n   * The arguments for the contract call.\n   */\n  @jsonMember(() => Args, {\n    deserializer: deserializeArgs,\n    serializer: (args: Args) => serializeArgs(args, false)\n  })\n  args: Args;\n\n  /**\n   * Constructs a `StoredContractByHash` instance with the contract hash, entry point, and arguments.\n   * @param hash The contract hash.\n   * @param entryPoint The contract entry point.\n   * @param args The arguments for the contract.\n   */\n  constructor(hash: ContractHash, entryPoint: string, args: Args) {\n    this.hash = hash;\n    this.entryPoint = entryPoint;\n    this.args = args;\n  }\n\n  /**\n   * Serializes the `StoredContractByHash` instance to a byte array.\n   * @returns The serialized byte array.\n   */\n  bytes(): Uint8Array {\n    const hashBytes = this.hash.hash.toBytes();\n    const entryPointBytes = CLValue.newCLString(this.entryPoint).bytes();\n    const argBytes = this.args.toBytes();\n\n    return concat([hashBytes, entryPointBytes, argBytes]);\n  }\n}\n\n/**\n * Represents a deploy item with a stored contract referenced by its name.\n */\n@jsonObject\nexport class StoredContractByName {\n  /**\n   * The name of the stored contract.\n   */\n  @jsonMember({ name: 'name', constructor: String })\n  name: string;\n\n  /**\n   * The entry point of the contract to invoke.\n   */\n  @jsonMember({ name: 'entry_point', constructor: String })\n  entryPoint: string;\n\n  /**\n   * The arguments for the contract call.\n   */\n  @jsonMember(() => Args, {\n    deserializer: deserializeArgs,\n    serializer: (args: Args) => serializeArgs(args, false)\n  })\n  args: Args;\n\n  /**\n   * Constructs a `StoredContractByName` instance with the contract name, entry point, and arguments.\n   * @param name The contract name.\n   * @param entryPoint The contract entry point.\n   * @param args The arguments for the contract.\n   */\n  constructor(name: string, entryPoint: string, args: Args) {\n    this.name = name;\n    this.entryPoint = entryPoint;\n    this.args = args;\n  }\n\n  /**\n   * Serializes the `StoredContractByName` instance to a byte array.\n   * @returns The serialized byte array.\n   */\n  bytes(): Uint8Array {\n    const nameBytes = CLValue.newCLString(this.name).bytes();\n    const entryPointBytes = CLValue.newCLString(this.entryPoint).bytes();\n    const argBytes = this.args.toBytes();\n\n    return concat([nameBytes, entryPointBytes, argBytes]);\n  }\n}\n\n/**\n * Represents a deploy item with a stored versioned contract referenced by its hash.\n */\n@jsonObject\nexport class StoredVersionedContractByHash {\n  /**\n   * The hash of the stored contract.\n   */\n  @jsonMember({\n    name: 'hash',\n    constructor: ContractHash,\n    deserializer: json => ContractHash.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  hash: ContractHash;\n\n  /**\n   * The entry point of the contract to invoke.\n   */\n  @jsonMember({ name: 'entry_point', constructor: String })\n  entryPoint: string;\n\n  /**\n   * The arguments for the contract call.\n   */\n  @jsonMember(() => Args, {\n    deserializer: deserializeArgs,\n    serializer: (args: Args) => serializeArgs(args, false)\n  })\n  args: Args;\n\n  /**\n   * The version of the contract.\n   */\n  @jsonMember({ name: 'version', constructor: Number })\n  version?: number;\n\n  /**\n   * Constructs a `StoredVersionedContractByHash` instance with the contract hash, entry point, arguments, and version.\n   * @param hash The contract hash.\n   * @param entryPoint The contract entry point.\n   * @param args The arguments for the contract.\n   * @param version The contract version.\n   */\n  constructor(\n    hash: ContractHash,\n    entryPoint: string,\n    args: Args,\n    version?: number\n  ) {\n    this.hash = hash;\n    this.entryPoint = entryPoint;\n    this.version = version;\n    this.args = args;\n  }\n\n  /**\n   * Serializes the `StoredVersionedContractByHash` instance to a byte array.\n   * @returns The serialized byte array.\n   */\n  bytes(): Uint8Array {\n    const hashBytes = this.hash.hash.toBytes();\n    const optionBytes = new CLValueOption(\n      this.version ? CLValue.newCLUInt32(BigNumber.from(this.version)) : null\n    ).bytes();\n    const entryPointBytes = CLValue.newCLString(this.entryPoint).bytes();\n    const argBytes = this.args?.toBytes() || new Uint8Array();\n\n    return concat([hashBytes, optionBytes, entryPointBytes, argBytes]);\n  }\n}\n\n/**\n * Represents a deploy item with a stored versioned contract referenced by its name.\n */\n@jsonObject\nexport class StoredVersionedContractByName {\n  /**\n   * The name of the stored contract.\n   */\n  @jsonMember({ name: 'name', constructor: String })\n  name: string;\n\n  /**\n   * The entry point of the contract to invoke.\n   */\n  @jsonMember({ name: 'entry_point', constructor: String })\n  entryPoint: string;\n\n  /**\n   * The version of the contract.\n   */\n  @jsonMember({ name: 'version', constructor: Number })\n  version?: number;\n\n  /**\n   * The arguments for the contract call.\n   */\n  @jsonMember(() => Args, {\n    deserializer: deserializeArgs,\n    serializer: (args: Args) => serializeArgs(args, false)\n  })\n  args: Args;\n\n  /**\n   * Constructs a `StoredVersionedContractByName` instance with the contract name, entry point, arguments, and version.\n   * @param name The contract name.\n   * @param entryPoint The contract entry point.\n   * @param args The arguments for the contract.\n   * @param version The contract version.\n   */\n  constructor(name: string, entryPoint: string, args: Args, version?: number) {\n    this.name = name;\n    this.entryPoint = entryPoint;\n    this.version = version;\n    this.args = args;\n  }\n\n  /**\n   * Serializes the `StoredVersionedContractByName` instance to a byte array.\n   * @returns The serialized byte array.\n   */\n  bytes(): Uint8Array {\n    const nameBytes = CLValue.newCLString(this.name).bytes();\n    const optionBytes = new CLValueOption(\n      this.version ? CLValue.newCLUInt32(BigNumber.from(this.version)) : null\n    ).bytes();\n    const entryPointBytes = CLValue.newCLString(this.entryPoint).bytes();\n    const argBytes = this.args?.toBytes() || new Uint8Array();\n\n    return concat([nameBytes, optionBytes, entryPointBytes, argBytes]);\n  }\n}\n\n/**\n * Represents a deploy item with a transfer of funds and associated arguments.\n */\n@jsonObject\nexport class TransferDeployItem {\n  /**\n   * The arguments for the transfer.\n   */\n  @jsonMember(() => Args, {\n    deserializer: deserializeArgs,\n    serializer: (args: Args) => serializeArgs(args, false)\n  })\n  args: Args;\n\n  /**\n   * Constructs a `TransferDeployItem` instance with arguments.\n   * @param args The arguments for the transfer.\n   */\n  constructor(args: Args) {\n    this.args = args;\n  }\n\n  /**\n   * Creates a new transfer deploy item with the specified amount, target, source purse, and transfer ID.\n   * @param amount The amount to transfer.\n   * @param target The target address (either a URef or a PublicKey).\n   * @param sourcePurse The source purse (optional).\n   * @param id The transfer ID.\n   * @returns A new `TransferDeployItem` instance.\n   * @throws Error if the target is not specified or the transfer ID is missing.\n   */\n  public static newTransfer(\n    amount: BigNumber | string,\n    target: URef | PublicKey,\n    sourcePurse: URef | null = null,\n    id?: BigNumberish\n  ): TransferDeployItem {\n    const runtimeArgs = Args.fromMap({});\n    runtimeArgs.insert('amount', CLValue.newCLUInt512(amount));\n    if (sourcePurse) {\n      runtimeArgs.insert('source', CLValue.newCLUref(sourcePurse));\n    }\n    if (target instanceof URef) {\n      runtimeArgs.insert('target', CLValue.newCLUref(target));\n    } else if (target instanceof PublicKey) {\n      runtimeArgs.insert('target', CLValue.newCLPublicKey(target));\n    } else {\n      throw new Error('Please specify target');\n    }\n\n    const optionType = new CLTypeOption(CLTypeUInt64);\n    const defaultClValue = new CLValue(optionType);\n    defaultClValue.option = new CLValueOption(null, optionType);\n\n    runtimeArgs.insert(\n      'id',\n      id ? CLValue.newCLOption(CLValue.newCLUint64(id)) : defaultClValue\n    );\n\n    return new TransferDeployItem(runtimeArgs);\n  }\n\n  /**\n   * Serializes the `TransferDeployItem` instance to a byte array.\n   * @returns The serialized byte array.\n   */\n  bytes(): Uint8Array {\n    return this.args.toBytes();\n  }\n}\n\n/**\n * Represents an executable deploy item, which can be one of several types such as `ModuleBytes`, `StoredContractByHash`, etc.\n */\n@jsonObject\nexport class ExecutableDeployItem {\n  /**\n   * A module bytes deploy item.\n   */\n  @jsonMember({ name: 'ModuleBytes', constructor: ModuleBytes })\n  moduleBytes?: ModuleBytes;\n\n  /**\n   * A stored contract deploy item referenced by hash.\n   */\n  @jsonMember({\n    name: 'StoredContractByHash',\n    constructor: StoredContractByHash\n  })\n  storedContractByHash?: StoredContractByHash;\n\n  /**\n   * A stored contract deploy item referenced by name.\n   */\n  @jsonMember({\n    name: 'StoredContractByName',\n    constructor: StoredContractByName\n  })\n  storedContractByName?: StoredContractByName;\n\n  /**\n   * A stored versioned contract deploy item referenced by hash.\n   */\n  @jsonMember({\n    name: 'StoredVersionedContractByHash',\n    constructor: StoredVersionedContractByHash\n  })\n  storedVersionedContractByHash?: StoredVersionedContractByHash;\n\n  /**\n   * A stored versioned contract deploy item referenced by name.\n   */\n  @jsonMember({\n    name: 'StoredVersionedContractByName',\n    constructor: StoredVersionedContractByName\n  })\n  storedVersionedContractByName?: StoredVersionedContractByName;\n\n  /**\n   * A transfer deploy item.\n   */\n  @jsonMember({ name: 'Transfer', constructor: TransferDeployItem })\n  transfer?: TransferDeployItem;\n\n  /**\n   * Retrieves an argument by name from the deploy item.\n   * @param name The name of the argument.\n   * @returns The argument value, or `undefined` if not found.\n   */\n  public getArgByName(name: string): CLValue | undefined {\n    const deployItemArgs = this.getArgs();\n    return deployItemArgs.args.get(name);\n  }\n\n  /**\n   * Sets an argument by name for the deploy item.\n   * @param name The name of the argument.\n   * @param value The value of the argument.\n   */\n  public setArg(name: string, value: CLValue) {\n    const deployItemArgs = this.getArgs();\n    deployItemArgs.insert(name, value);\n  }\n\n  /**\n   * Retrieves the arguments for the deploy item.\n   * @returns The arguments for the deploy item.\n   */\n  getArgs(): Args {\n    if (this.moduleBytes) return this.moduleBytes.args;\n    if (this.storedContractByHash) return this.storedContractByHash.args;\n    if (this.storedContractByName) return this.storedContractByName.args;\n    if (this.storedVersionedContractByHash)\n      return this.storedVersionedContractByHash.args;\n    if (this.storedVersionedContractByName)\n      return this.storedVersionedContractByName.args;\n    if (this.transfer) return this.transfer.args;\n    throw new Error('failed to serialize ExecutableDeployItemJsonWrapper');\n  }\n\n  /**\n   * Serializes the `ExecutableDeployItem` to a byte array.\n   * @returns The serialized byte array.\n   */\n  bytes(): Uint8Array {\n    let bytes: Uint8Array;\n\n    if (this.moduleBytes) {\n      bytes = this.moduleBytes.bytes();\n      return concat([\n        Uint8Array.of(ExecutableDeployItemType.ModuleBytes),\n        bytes\n      ]);\n    } else if (this.storedContractByHash) {\n      bytes = this.storedContractByHash.bytes();\n      return concat([\n        Uint8Array.of(ExecutableDeployItemType.StoredContractByHash),\n        bytes\n      ]);\n    } else if (this.storedContractByName) {\n      bytes = this.storedContractByName.bytes();\n      return concat([\n        Uint8Array.of(ExecutableDeployItemType.StoredContractByName),\n        bytes\n      ]);\n    } else if (this.storedVersionedContractByHash) {\n      bytes = this.storedVersionedContractByHash.bytes();\n      return concat([\n        Uint8Array.of(ExecutableDeployItemType.StoredVersionedContractByHash),\n        bytes\n      ]);\n    } else if (this.storedVersionedContractByName) {\n      bytes = this.storedVersionedContractByName.bytes();\n      return concat([\n        Uint8Array.of(ExecutableDeployItemType.StoredVersionedContractByName),\n        bytes\n      ]);\n    } else if (this.transfer) {\n      bytes = this.transfer.bytes();\n      return concat([Uint8Array.of(ExecutableDeployItemType.Transfer), bytes]);\n    }\n\n    return new Uint8Array();\n  }\n\n  /**\n   * Creates a standard payment `ExecutableDeployItem` with the specified amount.\n   * @param amount The amount to be transferred.\n   * @returns A new `ExecutableDeployItem` instance with the payment.\n   */\n  public static standardPayment(\n    amount: BigNumber | string\n  ): ExecutableDeployItem {\n    const executableDeployItem = new ExecutableDeployItem();\n    executableDeployItem.moduleBytes = new ModuleBytes(\n      Uint8Array.from([]),\n      Args.fromMap({ amount: CLValue.newCLUInt512(amount) })\n    );\n    return executableDeployItem;\n  }\n\n  /**\n   * Casts the `ExecutableDeployItem` to `ModuleBytes` if possible.\n   * @returns The `ModuleBytes` representation of the `ExecutableDeployItem`, or `undefined` if not possible.\n   */\n  public asModuleBytes(): ModuleBytes | undefined {\n    return this.moduleBytes;\n  }\n\n  /**\n   * Checks if the `ExecutableDeployItem` is of type `Transfer`.\n   * @returns `true` if the `ExecutableDeployItem` is a transfer item, `false` otherwise.\n   */\n  public isTransfer() {\n    return !!this.transfer;\n  }\n\n  /**\n   * Checks if the `ExecutableDeployItem` is of type `StoredVersionedContractByHash`.\n   * @returns `true` if the `ExecutableDeployItem` is a stored versioned contract by hash, `false` otherwise.\n   */\n  public isStoredVersionContractByHash(): boolean {\n    return !!this.storedVersionedContractByHash;\n  }\n\n  /**\n   * Checks if the `ExecutableDeployItem` is of type `StoredVersionedContractByName`.\n   * @returns `true` if the `ExecutableDeployItem` is a stored versioned contract by name, `false` otherwise.\n   */\n  public isStoredVersionContractByName(): boolean {\n    return !!this.storedVersionedContractByName;\n  }\n\n  /**\n   * Checks if the `ExecutableDeployItem` is of type `StoredContractByName`.\n   * @returns `true` if the `ExecutableDeployItem` is a stored contract by name, `false` otherwise.\n   */\n  public isStoredContractByName(): boolean {\n    return !!this.storedContractByName;\n  }\n\n  /**\n   * Checks if the `ExecutableDeployItem` is of type `StoredContractByHash`.\n   * @returns `true` if the `ExecutableDeployItem` is a stored contract by hash, `false` otherwise.\n   */\n  public isStoredContractByHash(): boolean {\n    return !!this.storedContractByHash;\n  }\n\n  /**\n   * Checks if the `ExecutableDeployItem` is of type `ModuleBytes`.\n   * @returns `true` if the `ExecutableDeployItem` is of type `ModuleBytes`, `false` otherwise.\n   */\n  public isModuleBytes(): boolean {\n    return !!this.moduleBytes;\n  }\n\n  /**\n   * Creates a new `ModuleBytes` object from a `Uint8Array` of module bytes and a set of `RuntimeArgs`\n   * @param moduleBytes A set of module bytes as a `Uint8Array`\n   * @param args The runtime arguments for the new `ModuleBytes` object\n   * @returns A new `ExecutableDeployItem` created from a new `ModuleBytes` object built using `moduleBytes` and `args`\n   */\n  public static newModuleBytes(\n    moduleBytes: Uint8Array,\n    args: Args\n  ): ExecutableDeployItem {\n    const executableDeployItem = new ExecutableDeployItem();\n    executableDeployItem.moduleBytes = new ModuleBytes(moduleBytes, args);\n\n    return executableDeployItem;\n  }\n}\n","import {\n  jsonObject,\n  jsonMember,\n  TypedJSON,\n  jsonArrayMember,\n  AnyT\n} from 'typedjson';\nimport { BigNumber } from '@ethersproject/bignumber';\n\nimport { Hash, TransferHash, Key } from './key';\nimport { InitiatorAddr } from './InitiatorAddr';\nimport { Transfer } from './Transfer';\nimport { Transform, TransformKey } from './Transform';\nimport { TransactionHash } from './Transaction';\n\n/**\n * Represents an operation performed during a transaction.\n */\n@jsonObject\nexport class Operation {\n  /**\n   * The key associated with the operation.\n   */\n  @jsonMember({\n    name: 'key',\n    constructor: Key,\n    deserializer: (json: string) => {\n      if (!json) return;\n      return Key.newKey(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toPrefixedString();\n    }\n  })\n  public key: Key;\n\n  /**\n   * The type of the operation (e.g., \"Write\", \"Transfer\").\n   */\n  @jsonMember({ name: 'kind', constructor: String })\n  public kind: string;\n}\n\n/**\n * Represents the effect of a transaction, including the operations and transformations.\n */\n@jsonObject\nexport class Effect {\n  /**\n   * The operations performed as part of this effect.\n   */\n  @jsonArrayMember(Operation, {\n    name: 'operations'\n  })\n  public operations: Operation[] = [];\n\n  /**\n   * The transformations applied as part of this effect.\n   */\n  @jsonArrayMember(TransformKey, {\n    name: 'transforms'\n  })\n  public transforms: TransformKey[] = [];\n}\n\n/**\n * Contains the result of a transaction's execution, including the effect and related transfers.\n */\n@jsonObject\nexport class ExecutionResultStatusData {\n  /**\n   * The effect of the transaction execution, including operations and transformations.\n   */\n  @jsonMember({\n    name: 'effect',\n    constructor: Effect\n  })\n  public effect: Effect;\n\n  /**\n   * The transfers that were part of the transaction execution.\n   */\n  @jsonArrayMember(TransferHash, {\n    name: 'transfers',\n    serializer: (value: TransferHash[]) => value.map(it => it.toJSON()),\n    deserializer: (json: any) =>\n      json.map((it: string) => TransferHash.fromJSON(it))\n  })\n  public transfers: TransferHash[] = [];\n\n  /**\n   * The cost of the transaction execution.\n   */\n  @jsonMember({\n    name: 'cost',\n    constructor: Number,\n    deserializer: json => BigNumber.from(json).toNumber(),\n    serializer: value => BigNumber.from(value).toString()\n  })\n  public cost: number;\n\n  /**\n   * The error message, if any, generated during the transaction execution.\n   */\n  @jsonMember({ name: 'error_message', constructor: String })\n  public errorMessage: string;\n}\n\n/**\n * Represents version 2 of the execution result, containing more detailed information.\n */\n@jsonObject\nexport class ExecutionResultV2 {\n  /**\n   * The address of the initiator of the execution.\n   */\n  @jsonMember({\n    name: 'initiator',\n    constructor: InitiatorAddr,\n    deserializer: json => InitiatorAddr.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  public initiator: InitiatorAddr;\n\n  /**\n   * The error message, if any, generated during the execution.\n   */\n  @jsonMember({\n    name: 'error_message',\n    constructor: String,\n    preserveNull: true\n  })\n  public errorMessage?: string;\n\n  /**\n   * The execution limit for the transaction.\n   */\n  @jsonMember({\n    name: 'limit',\n    constructor: Number,\n    deserializer: json => {\n      if (!json) return;\n      return BigNumber.from(json).toNumber();\n    },\n    serializer: value => {\n      if (!value) return;\n      return BigNumber.from(value).toString();\n    }\n  })\n  public limit: number;\n\n  /**\n   * The amount of resources consumed during the transaction execution.\n   */\n  @jsonMember({\n    name: 'consumed',\n    constructor: Number,\n    deserializer: json => BigNumber.from(json).toNumber(),\n    serializer: value => BigNumber.from(value).toString()\n  })\n  public consumed: number;\n\n  @jsonMember({\n    constructor: Number,\n    deserializer: json => {\n      if (!json) return;\n      return BigNumber.from(json).toNumber();\n    },\n    serializer: value => {\n      if (!value) return;\n      return BigNumber.from(value).toString();\n    }\n  })\n  public refund: number;\n\n  /**\n   * The gas price of the era.\n   */\n  @jsonMember({\n    constructor: Number,\n    name: 'current_price'\n  })\n  public currentPrice: number;\n\n  /**\n   * The cost associated with the transaction execution.\n   */\n  @jsonMember({\n    name: 'cost',\n    constructor: Number,\n    deserializer: json => {\n      if (!json) return;\n      return BigNumber.from(json).toNumber();\n    },\n    serializer: value => {\n      if (!value) return;\n      return BigNumber.from(value).toString();\n    }\n  })\n  public cost: number;\n\n  /**\n   * The payment made for the transaction, if any.\n   */\n  @jsonMember({ name: 'payment', constructor: AnyT })\n  public payment?: any;\n\n  /**\n   * The transfers included in the transaction execution.\n   */\n  @jsonArrayMember(Transfer, {\n    name: 'transfers',\n    deserializer: (json: any) => json.map((it: string) => Transfer.fromJSON(it))\n  })\n  public transfers: Transfer[] = [];\n\n  /**\n   * The estimated size of the transaction execution.\n   */\n  @jsonMember({ name: 'size_estimate', constructor: Number })\n  public sizeEstimate: number;\n\n  /**\n   * The effects applied during the transaction execution.\n   */\n  @jsonArrayMember(Transform, {\n    name: 'effects'\n  })\n  public effects: Transform[] = [];\n}\n\n/**\n * Represents version 1 of the execution result, containing basic information on success or failure.\n */\n@jsonObject\nexport class ExecutionResultV1 {\n  /**\n   * The status data for a successful execution.\n   */\n  @jsonMember({\n    name: 'Success',\n    constructor: ExecutionResultStatusData\n  })\n  public success?: ExecutionResultStatusData;\n\n  /**\n   * The status data for a failed execution.\n   */\n  @jsonMember({\n    name: 'Failure',\n    constructor: ExecutionResultStatusData\n  })\n  public failure?: ExecutionResultStatusData;\n}\n\n/**\n * Contains the block hash and execution result of a deploy execution.\n */\n@jsonObject\nexport class DeployExecutionResult {\n  /**\n   * The block hash where the deploy was executed.\n   */\n  @jsonMember({\n    name: 'block_hash',\n    constructor: Hash,\n    deserializer: json => Hash.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  public blockHash: Hash;\n\n  /**\n   * The execution result for the deploy.\n   */\n  @jsonMember({\n    name: 'result',\n    constructor: ExecutionResultV1\n  })\n  public result: ExecutionResultV1;\n}\n\n/**\n * Represents the result of a transaction execution, which includes the initiator, cost, transfers, and effects.\n */\n@jsonObject\nexport class ExecutionResult {\n  /**\n   * The address of the initiator of the execution.\n   */\n  @jsonMember({\n    constructor: InitiatorAddr,\n    deserializer: json => InitiatorAddr.fromJSON(json),\n    serializer: (value: InitiatorAddr) => value.toJSON()\n  })\n  public initiator: InitiatorAddr;\n\n  /**\n   * The error message, if any, generated during the execution.\n   */\n  @jsonMember({\n    name: 'error_message',\n    constructor: String,\n    preserveNull: true\n  })\n  public errorMessage?: string;\n\n  /**\n   * The execution limit for the transaction.\n   */\n  @jsonMember({\n    constructor: Number,\n    deserializer: json => BigNumber.from(json).toNumber(),\n    serializer: value => BigNumber.from(value).toString()\n  })\n  public limit: number;\n\n  /**\n   * The amount of resources consumed during the transaction execution.\n   */\n  @jsonMember({\n    constructor: Number,\n    deserializer: json => {\n      if (!json) return;\n      return BigNumber.from(json).toNumber();\n    },\n    serializer: value => {\n      if (!value) return;\n      return BigNumber.from(value).toString();\n    }\n  })\n  public consumed: number;\n\n  @jsonMember({\n    constructor: Number,\n    deserializer: json => {\n      if (!json) return;\n      return BigNumber.from(json).toNumber();\n    },\n    serializer: value => {\n      if (!value) return;\n      return BigNumber.from(value).toString();\n    }\n  })\n  public refund: number;\n\n  /**\n   * The gas price of the era.\n   */\n  @jsonMember({\n    constructor: Number,\n    name: 'current_price'\n  })\n  public currentPrice: number;\n\n  /**\n   * The cost associated with the transaction execution.\n   */\n  @jsonMember({\n    constructor: Number,\n    deserializer: json => BigNumber.from(json).toNumber(),\n    serializer: value => BigNumber.from(value).toString()\n  })\n  public cost: number;\n\n  /**\n   * The payment made for the transaction, if any.\n   */\n  @jsonMember({ constructor: AnyT })\n  public payment?: any;\n\n  /**\n   * The transfers included in the transaction execution.\n   */\n  @jsonArrayMember(Transfer, {\n    name: 'transfers',\n    deserializer: (json: any) => json.map((it: string) => Transfer.fromJSON(it))\n  })\n  public transfers: Transfer[] = [];\n\n  /**\n   * The estimated size of the transaction execution.\n   */\n  @jsonMember({ constructor: Number })\n  public sizeEstimate: number;\n\n  /**\n   * The effects applied during the transaction execution.\n   */\n  @jsonArrayMember(Transform, {\n    name: 'effects'\n  })\n  public effects: Transform[] = [];\n\n  /**\n   * The original execution result in version 1 format, if applicable.\n   */\n  public originExecutionResultV1?: ExecutionResultV1;\n\n  /**\n   * The original execution result in version 2 format, if applicable.\n   */\n  public originExecutionResultV2?: ExecutionResultV2;\n\n  /**\n   * Deserializes an `ExecutionResult` from JSON data.\n   * Supports both version 1 and version 2 formats.\n   *\n   * @param data The JSON data representing the execution result.\n   * @returns The deserialized `ExecutionResult`.\n   * @throws Error if the data format is invalid or unknown.\n   */\n  public static fromJSON(data: any): ExecutionResult {\n    if (data?.Version2) {\n      const executionResultV2 = TypedJSON.parse(\n        data.Version2,\n        ExecutionResultV2\n      );\n\n      if (executionResultV2) {\n        const executionResult = new ExecutionResult();\n        executionResult.initiator = executionResultV2.initiator;\n        executionResult.errorMessage = executionResultV2.errorMessage;\n        executionResult.limit = executionResultV2.limit;\n        executionResult.consumed = executionResultV2.consumed;\n        executionResult.cost = executionResultV2.cost;\n        executionResult.payment = executionResultV2.payment;\n        executionResult.transfers = executionResultV2.transfers;\n        executionResult.sizeEstimate = executionResultV2.sizeEstimate;\n        executionResult.effects = executionResultV2.effects;\n        executionResult.currentPrice = executionResultV2?.currentPrice;\n        executionResult.refund = executionResultV2?.refund;\n        executionResult.originExecutionResultV2 = executionResultV2;\n        return executionResult;\n      }\n    } else if (data?.Version1) {\n      const executionResultV1 = TypedJSON.parse(\n        data.Version1,\n        ExecutionResultV1\n      );\n      if (executionResultV1) {\n        return ExecutionResult.fromV1(executionResultV1);\n      }\n    }\n\n    throw new Error('Incorrect RPC response structure');\n  }\n\n  /**\n   * Creates an `ExecutionResult` from version 1 of the execution result.\n   *\n   * @param v1 The version 1 execution result.\n   * @returns The `ExecutionResult` created from version 1 data.\n   */\n  public static fromV1(v1: ExecutionResultV1): ExecutionResult {\n    const result = new ExecutionResult();\n    const transforms: Transform[] = [];\n    const transfers: Transfer[] = [];\n\n    if (v1.success) {\n      for (const transform of v1.success.effect.transforms) {\n        transforms.push(new Transform(transform.key, transform.transform));\n\n        if (!transform.transform.isWriteTransfer()) {\n          continue;\n        }\n\n        const writeTransfer = transform.transform.parseAsWriteTransfer();\n\n        if (!writeTransfer) {\n          continue;\n        }\n\n        const transfer = new Transfer();\n        transfer.amount = writeTransfer.amount;\n        transfer.transactionHash = new TransactionHash(\n          writeTransfer?.deployHash\n        );\n        transfer.from = new InitiatorAddr(undefined, writeTransfer.from);\n        transfer.gas = writeTransfer.gas;\n        transfer.id = writeTransfer.id;\n        transfer.source = writeTransfer.source;\n        transfer.target = writeTransfer.target;\n        transfer.to = writeTransfer.to;\n\n        transfers.push(transfer);\n      }\n\n      result.limit = 0; // limit is unknown field for V1 Deploy\n\n      // In ExecutionResultV1, the 'v1.Success.Cost' field actually represents the amount of consumed gas.\n      // However, in version 1.X, there is no distinction between 'cost' and 'consumed_gas'.\n      //\n      // For example, for failed deploys without execution results, 'cost' is reported as 0,\n      // but the penalty charge (which is a cost) is reflected in the execution effects.\n      //\n      // In version V2, 'Consumed' and 'Cost' are explicitly separated.\n      // So to maintain backward compatibility for V1, 'v1.Success.Cost' is used for both 'Consumed' and 'Cost'.\n      result.consumed = v1.success.cost;\n      result.cost = v1.success.cost;\n      result.payment = null;\n      result.transfers = transfers;\n      result.effects = transforms;\n      result.refund = 0;\n      result.currentPrice = 1;\n      result.originExecutionResultV1 = v1;\n\n      return result;\n    }\n\n    if (v1.failure) {\n      for (const transform of v1.failure.effect.transforms) {\n        // TODO: we should convert old Transform to new format\n        transforms.push(new Transform(transform.key, transform.transform));\n      }\n\n      result.errorMessage = v1.failure.errorMessage;\n      result.consumed = v1.failure.cost;\n      result.effects = transforms;\n      result.originExecutionResultV1 = v1;\n\n      return result;\n    }\n\n    throw new Error('Invalid ExecutionResultV1 structure');\n  }\n\n  /**\n   * Converts an `ExecutionResult` instance to a plain JSON object.\n   *\n   * This method serializes an `ExecutionResult` object into a plain JSON structure\n   * using the `TypedJSON` serializer. It allows for easy conversion of the\n   * `ExecutionResult` to a JSON-compatible format that can be used for logging,\n   * transmission over the network, or storage.\n   *\n   * @param executionResult - The `ExecutionResult` instance to be converted into a plain JSON object.\n   *\n   * @returns A plain JSON object representing the `ExecutionResult`.\n   *\n   */\n  public static toJSON(executionResult: ExecutionResult) {\n    const serializer = new TypedJSON(ExecutionResult);\n    return serializer.toPlainJson(executionResult);\n  }\n}\n\n/**\n * Represents execution information about a deploy, including the block hash, height, and execution result.\n */\n@jsonObject\nexport class ExecutionInfo {\n  /**\n   * The block hash where the deploy was executed.\n   */\n  @jsonMember({\n    name: 'block_hash',\n    constructor: Hash,\n    deserializer: json => Hash.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  public blockHash: Hash;\n\n  /**\n   * The block height at the time the deploy was executed.\n   */\n  @jsonMember({ name: 'block_height', constructor: Number })\n  public blockHeight: number;\n\n  /**\n   * The execution result associated with the deploy.\n   */\n  @jsonMember({\n    name: 'execution_result',\n    constructor: ExecutionResult,\n    deserializer: json => {\n      if (!json) return;\n      return ExecutionResult.fromJSON(json);\n    }\n  })\n  public executionResult: ExecutionResult;\n\n  constructor(\n    blockHash: Hash,\n    blockHeight: number,\n    executionResult: ExecutionResult\n  ) {\n    this.blockHash = blockHash;\n    this.blockHeight = blockHeight;\n    this.executionResult = executionResult;\n  }\n\n  public static fromV1(\n    results: DeployExecutionResult[],\n    height?: number\n  ): ExecutionInfo {\n    if (results.length === 0) {\n      throw new Error('Missing ExecutionInfo.fromV1 results');\n    }\n\n    const result = results[0];\n    const blockHeight = height ?? 0;\n\n    return new ExecutionInfo(\n      result.blockHash,\n      blockHeight,\n      ExecutionResult.fromV1(result.result)\n    );\n  }\n}\n\n/**\n * Represents execution information for a deploy, including the block hash, height, and execution result.\n */\n@jsonObject\nexport class DeployExecutionInfo {\n  /**\n   * The block hash where the deploy was executed.\n   */\n  @jsonMember({\n    name: 'block_hash',\n    constructor: Hash,\n    deserializer: json => Hash.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  public blockHash: Hash;\n\n  /**\n   * The block height at the time the deploy was executed.\n   */\n  @jsonMember({ name: 'block_height', constructor: Number })\n  public blockHeight: number;\n\n  /**\n   * The execution result associated with the deploy.\n   */\n  @jsonMember({\n    name: 'execution_result',\n    constructor: ExecutionResult,\n    deserializer: json => {\n      if (!json) return;\n      return ExecutionResult.fromJSON(json);\n    }\n  })\n  public executionResult: ExecutionResult;\n\n  /**\n   * Creates a `DeployExecutionInfo` instance from version 1 data.\n   *\n   * @param results The results of the deploy execution.\n   * @param height The block height, if available.\n   * @returns The `DeployExecutionInfo` instance created from version 1 data.\n   */\n  public static fromV1(\n    results: DeployExecutionResult[],\n    height?: number\n  ): DeployExecutionInfo {\n    if (results.length === 0) {\n      return new DeployExecutionInfo();\n    }\n\n    const result = results[0];\n    const blockHeight = height ?? 0;\n\n    const deployExecutionInfo = new DeployExecutionInfo();\n    deployExecutionInfo.blockHash = result.blockHash;\n    deployExecutionInfo.blockHeight = blockHeight;\n    deployExecutionInfo.executionResult = ExecutionResult.fromV1(result.result);\n\n    return deployExecutionInfo;\n  }\n}\n","import { jsonObject, jsonMember } from 'typedjson';\n\n/**\n * Represents a collection of bytes stored as a `Uint8Array` with methods\n * to convert to/from hexadecimal and JSON.\n */\n@jsonObject\nexport class HexBytes {\n  /**\n   * The raw byte data stored in a `Uint8Array`.\n   */\n  @jsonMember(Uint8Array)\n  bytes: Uint8Array;\n\n  /**\n   * Creates a new instance of `HexBytes`.\n   *\n   * @param bytes The byte data as a `Uint8Array`.\n   */\n  constructor(bytes: Uint8Array) {\n    this.bytes = bytes;\n  }\n\n  /**\n   * Converts the stored bytes into a hexadecimal string.\n   *\n   * @returns The hexadecimal string representation of the byte data.\n   */\n  toHex(): string {\n    return Array.from(this.bytes)\n      .map(byte => byte.toString(16).padStart(2, '0'))\n      .join('');\n  }\n\n  /**\n   * Converts the stored bytes to a JSON string representation.\n   * This method returns the hexadecimal string of the byte data.\n   *\n   * @returns The hexadecimal string as a JSON string.\n   */\n  toJSON(): string {\n    return this.toHex();\n  }\n\n  /**\n   * Creates a `HexBytes` instance from a hexadecimal string.\n   *\n   * @param hexString The hexadecimal string to convert.\n   * @returns A new `HexBytes` instance.\n   */\n  static fromHex(hexString: string): HexBytes {\n    const bytes = new Uint8Array(\n      hexString.match(/.{1,2}/g)!.map(byte => parseInt(byte, 16))\n    );\n    return new HexBytes(bytes);\n  }\n\n  /**\n   * Creates a `HexBytes` instance from a JSON string.\n   * The JSON string should be a hexadecimal string.\n   *\n   * @param json The JSON string to convert.\n   * @returns A new `HexBytes` instance.\n   */\n  static fromJSON(json: string): HexBytes {\n    return HexBytes.fromHex(json);\n  }\n\n  /**\n   * Returns a string representation of the byte data as hexadecimal.\n   *\n   * @returns A string representing the byte data in hexadecimal format.\n   */\n  toString(): string {\n    return this.toHex();\n  }\n}\n","import { jsonObject, jsonMember } from 'typedjson';\n\nimport { PublicKey } from './keypair';\nimport { AccountHash } from './key';\nimport { CalltableSerialization } from './CalltableSerialization';\n\n/**\n * Represents an address for an initiator, which can either be a public key or an account hash.\n */\n@jsonObject\nexport class InitiatorAddr {\n  /**\n   * The public key of the initiator, if available.\n   */\n  @jsonMember({\n    name: 'PublicKey',\n    constructor: PublicKey\n  })\n  public publicKey?: PublicKey;\n\n  /**\n   * The account hash of the initiator, if available.\n   */\n  @jsonMember({\n    name: 'AccountHash',\n    constructor: AccountHash\n  })\n  public accountHash?: AccountHash;\n\n  /**\n   * Creates an instance of `InitiatorAddr` with an optional public key and account hash.\n   *\n   * @param publicKey The public key of the initiator.\n   * @param accountHash The account hash of the initiator.\n   */\n  constructor(publicKey?: PublicKey, accountHash?: AccountHash) {\n    this.publicKey = publicKey;\n    this.accountHash = accountHash;\n  }\n\n  /**\n   * Converts the `InitiatorAddr` instance to a byte array representation.\n   * The result depends on whether the address is a public key or an account hash.\n   *\n   * @returns A `Uint8Array` representing the initiator address.\n   */\n  public toBytes(): Uint8Array {\n    if (this.accountHash) {\n      const calltableSerialization = new CalltableSerialization();\n\n      calltableSerialization.addField(0, Uint8Array.of(1));\n      calltableSerialization.addField(1, this.accountHash.toBytes());\n\n      return calltableSerialization.toBytes();\n    } else if (this.publicKey) {\n      const calltableSerialization = new CalltableSerialization();\n\n      calltableSerialization.addField(0, Uint8Array.of(0));\n      calltableSerialization.addField(1, this.publicKey.bytes());\n\n      return calltableSerialization.toBytes();\n    }\n\n    throw new Error('Unable to serialize InitiatorAddr');\n  }\n\n  /**\n   * Creates an `InitiatorAddr` instance from a JSON object.\n   * The JSON object can contain either a `publicKey` or an `accountHash` string.\n   *\n   * @param json The JSON object containing the address data.\n   * @returns A new `InitiatorAddr` instance.\n   */\n  static fromJSON(json: any): InitiatorAddr {\n    const initiatorAddr = new InitiatorAddr();\n    const jsonPubKey = json?.publicKey || json?.PublicKey;\n    const jsonAccountHash = json?.accountHash || json?.AccountHash;\n\n    if (jsonPubKey) {\n      initiatorAddr.publicKey = PublicKey.fromHex(jsonPubKey);\n    } else if (jsonAccountHash) {\n      initiatorAddr.accountHash = AccountHash.fromString(jsonAccountHash);\n    }\n\n    return initiatorAddr;\n  }\n\n  /**\n   * Converts the `InitiatorAddr` instance to a JSON object.\n   * The JSON object will contain either a `publicKey` or an `accountHash` depending on which is available.\n   *\n   * @returns A JSON object representing the initiator address.\n   */\n  public toJSON(): unknown {\n    if (this.accountHash) {\n      return {\n        AccountHash: this.accountHash.toPrefixedString()\n      };\n    } else if (this.publicKey) {\n      return {\n        PublicKey: this.publicKey.toHex()\n      };\n    }\n    return undefined;\n  }\n}\n","import { jsonObject, jsonMember } from 'typedjson';\nimport { Hash } from './key';\nimport { ModuleBytes } from './ExecutableDeployItem';\n\n/**\n * Represents a summary of a message topic, including the number of messages and block time.\n */\n@jsonObject\nexport class MessageTopicSummary {\n  /**\n   * The total number of messages in this topic.\n   */\n  @jsonMember({ name: 'message_count', constructor: Number })\n  messageCount: number;\n\n  /**\n   * The block time associated with the topic.\n   */\n  @jsonMember({ name: 'blocktime', constructor: Number })\n  blockTime: number;\n}\n\n/**\n * Represents a checksum for a message, stored as a string.\n */\nexport type MessageChecksum = string;\n\n/**\n * Represents a message topic, including the topic name and its hash.\n */\n@jsonObject\nexport class MessageTopic {\n  /**\n   * The name of the message topic.\n   */\n  @jsonMember({ name: 'topic_name', constructor: String })\n  topicName: string;\n\n  /**\n   * The hash of the message topic name.\n   */\n  @jsonMember({\n    name: 'topic_name_hash',\n    constructor: Hash,\n    deserializer: json => Hash.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  topicNameHash: Hash;\n}\n\n/**\n * Represents the payload of a message, which can either be a string or bytes.\n */\n@jsonObject\nexport class MessagePayload {\n  /**\n   * The string payload of the message, if available.\n   */\n  @jsonMember({ name: 'String', constructor: String })\n  string?: string;\n\n  /**\n   * The bytes payload of the message, if available.\n   */\n  @jsonMember({\n    name: 'Bytes',\n    constructor: ModuleBytes\n  })\n  bytes?: ModuleBytes;\n}\n\n/**\n * Represents a message with a payload, topic, and related metadata.\n */\n@jsonObject\nexport class Message {\n  /**\n   * The payload of the message, which can either be a string or bytes.\n   */\n  @jsonMember({\n    name: 'message',\n    constructor: MessagePayload\n  })\n  message: MessagePayload;\n\n  /**\n   * The name of the topic associated with this message.\n   */\n  @jsonMember({ name: 'topic_name', constructor: String })\n  topicName: string;\n\n  /**\n   * The hash of the topic name, which is used to identify the topic.\n   */\n  @jsonMember({\n    name: 'topic_name_hash',\n    constructor: Hash,\n    deserializer: json => Hash.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  topicNameHash: Hash;\n\n  /**\n   * The entity address associated with the message, often the sender or origin.\n   */\n  @jsonMember({\n    name: 'hash_addr',\n    constructor: Hash,\n    deserializer: json => Hash.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  hashAddr: Hash;\n\n  /**\n   * The index of the block where the message was included.\n   */\n  @jsonMember({ name: 'block_index', constructor: Number })\n  blockIndex: number;\n\n  /**\n   * The index of the topic within the block.\n   */\n  @jsonMember({ name: 'topic_index', constructor: Number })\n  topicIndex: number;\n}\n","import { jsonObject, jsonMember } from 'typedjson';\nimport { PublicKey } from './keypair';\nimport { Hash } from './key';\nimport { Timestamp } from './Time';\n\n/**\n * Represents minimal block information, including metadata such as the creator,\n * era ID, block hash, height, state root hash, and timestamp.\n */\n@jsonObject\nexport class MinimalBlockInfo {\n  /**\n   * The public key of the creator of the block.\n   * This represents the entity that created the block.\n   */\n  @jsonMember({\n    name: 'creator',\n    constructor: PublicKey,\n    deserializer: json => PublicKey.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  creator: PublicKey;\n\n  /**\n   * The era ID of the block, representing the era in which this block was created.\n   */\n  @jsonMember({ name: 'era_id', constructor: Number })\n  eraID: number;\n\n  /**\n   * The hash of the block, used to uniquely identify it.\n   */\n  @jsonMember({\n    name: 'hash',\n    constructor: Hash,\n    deserializer: json => Hash.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  hash: Hash;\n\n  /**\n   * The height of the block, indicating its position in the blockchain.\n   */\n  @jsonMember({ name: 'height', constructor: Number })\n  height: number;\n\n  /**\n   * The state root hash of the block, representing the state of the blockchain\n   * after processing the block.\n   */\n  @jsonMember({\n    name: 'state_root_hash',\n    constructor: Hash,\n    deserializer: json => Hash.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  stateRootHash: Hash;\n\n  /**\n   * The timestamp when the block was created.\n   * This is typically the time when the block was finalized or validated.\n   */\n  @jsonMember({\n    name: 'timestamp',\n    constructor: Timestamp,\n    deserializer: json => Timestamp.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  timestamp: Timestamp;\n}\n","import { jsonArrayMember, jsonMember, jsonObject } from 'typedjson';\nimport { Key } from './key';\nimport { CLValue, CLValueParser } from './clvalue';\n\nconst ErrNamedKeyNotFound = new Error('NamedKey not found');\n\n/**\n * Represents a named key, consisting of a name and an associated key.\n */\n@jsonObject\nexport class NamedKey {\n  /**\n   * The name of the named key.\n   */\n  @jsonMember({ name: 'name', constructor: String })\n  name: string;\n\n  /**\n   * The key associated with the named key.\n   */\n  @jsonMember({\n    name: 'key',\n    constructor: Key,\n    deserializer: (json: string) => {\n      if (!json) return;\n      return Key.newKey(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toPrefixedString();\n    }\n  })\n  key: Key;\n\n  /**\n   * Creates a new instance of `NamedKey` with a name and key.\n   *\n   * @param name The name of the key.\n   * @param key The associated key.\n   */\n  constructor(name: string, key: Key) {\n    this.name = name;\n    this.key = key;\n  }\n}\n\n/**\n * Represents a value of a named key, where both the name and key value are `CLValue` types.\n */\n@jsonObject\nexport class NamedKeyValue {\n  /**\n   * The name of the named key represented as a `CLValue`.\n   */\n  @jsonMember({\n    name: 'name',\n    constructor: CLValue,\n    deserializer: json => {\n      if (!json) return;\n      return CLValueParser.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return CLValueParser.toJSON(value);\n    }\n  })\n  name: CLValue;\n\n  /**\n   * The value of the named key represented as a `CLValue`.\n   */\n  @jsonMember({\n    name: 'named_key',\n    constructor: CLValue,\n    deserializer: json => {\n      if (!json) return;\n      return CLValueParser.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return CLValueParser.toJSON(value);\n    }\n  })\n  namedKey: CLValue;\n\n  /**\n   * Creates a new `NamedKeyValue` instance with a name and named key value.\n   *\n   * @param name The name of the named key as a `CLValue`.\n   * @param namedKey The value of the named key as a `CLValue`.\n   */\n  constructor(name: CLValue, namedKey: CLValue) {\n    this.name = name;\n    this.namedKey = namedKey;\n  }\n}\n\n/**\n * Represents a collection of named keys. Provides methods for mapping and finding named keys.\n */\nexport class NamedKeys {\n  /**\n   * A list of `NamedKey` objects that are part of this collection.\n   */\n  @jsonArrayMember(NamedKey)\n  keys: NamedKey[];\n\n  /**\n   * Creates a new `NamedKeys` instance with an array of `NamedKey` objects.\n   *\n   * @param keys An array of `NamedKey` objects.\n   */\n  constructor(keys: NamedKey[]) {\n    this.keys = keys;\n  }\n\n  /**\n   * Converts the collection of named keys into a `Map`, where the key is the named key's name and the value is the associated key as a string.\n   *\n   * @returns A `Map` with the named key's name as the key and the associated key as the value.\n   */\n  toMap(): Map<string, string> {\n    const result = new Map<string, string>();\n    this.keys.forEach(namedKey => {\n      result.set(namedKey.name, namedKey.key.toString());\n    });\n    return result;\n  }\n\n  /**\n   * Finds a `Key` by its name within the collection of named keys.\n   *\n   * @param target The name of the named key to find.\n   * @returns The `Key` associated with the named key if found.\n   * @throws {Error} If no named key with the specified name is found, throws `ErrNamedKeyNotFound`.\n   */\n  find(target: string): Key {\n    for (const nk of this.keys) {\n      if (nk.name === target) {\n        return nk.key;\n      }\n    }\n    throw ErrNamedKeyNotFound;\n  }\n}\n","import { jsonObject, jsonMember, jsonArrayMember } from 'typedjson';\nimport { EntityAddr, URef } from './key';\n\n/**\n * Represents a key that uniquely identifies the version of an entity, including both the entity version and the protocol version.\n */\n@jsonObject\nexport class EntityVersionKey {\n  /**\n   * The version of the entity.\n   */\n  @jsonMember({ name: 'entity_version', constructor: Number })\n  entityVersion: number;\n\n  /**\n   * The major version of the protocol used by the entity.\n   */\n  @jsonMember({ name: 'protocol_version_major', constructor: Number })\n  protocolVersionMajor: number;\n\n  /**\n   * Creates a new instance of `EntityVersionKey` with an entity version and protocol version major.\n   *\n   * @param entityVersion The version of the entity.\n   * @param protocolVersionMajor The major version of the protocol used by the entity.\n   */\n  constructor(entityVersion: number, protocolVersionMajor: number) {\n    this.entityVersion = entityVersion;\n    this.protocolVersionMajor = protocolVersionMajor;\n  }\n}\n\n/**\n * Represents an entity version and its associated addressable entity hash.\n */\n@jsonObject\nexport class EntityVersionAndHash {\n  /**\n   * The addressable entity hash associated with the entity.\n   * This is used to uniquely identify an entity in a decentralized environment.\n   */\n  @jsonMember({\n    name: 'entity_addr',\n    constructor: EntityAddr,\n    deserializer: json => EntityAddr.fromJSON(json),\n    serializer: (value: EntityAddr) => value.toJSON()\n  })\n  addressableEntity: EntityAddr;\n\n  /**\n   * The key representing the version of the entity.\n   */\n  @jsonMember({\n    name: 'entity_version_key',\n    constructor: EntityVersionKey\n  })\n  entityVersionKey: EntityVersionKey;\n\n  /**\n   * Creates a new instance of `EntityVersionAndHash` with an addressable entity hash and an entity version key.\n   *\n   * @param addressableEntity The addressable entity hash for the entity.\n   * @param entityVersionKey The version key of the entity.\n   */\n  constructor(\n    addressableEntity: EntityAddr,\n    entityVersionKey: EntityVersionKey\n  ) {\n    this.addressableEntity = addressableEntity;\n    this.entityVersionKey = entityVersionKey;\n  }\n}\n\n/**\n * Represents a package with its versions and disabled versions, along with its lock status and associated groups.\n */\n@jsonObject\nexport class Package {\n  /**\n   * A list of versions associated with this package.\n   */\n  @jsonArrayMember(EntityVersionAndHash, { name: 'versions' })\n  versions: EntityVersionAndHash[];\n\n  /**\n   * A list of disabled versions of this package.\n   */\n  @jsonArrayMember(EntityVersionAndHash, { name: 'disabled_versions' })\n  disabledVersions: EntityVersionAndHash[];\n\n  /**\n   * The lock status of the package (e.g., whether it's locked or unlocked).\n   */\n  @jsonMember({ name: 'lock_status', constructor: String })\n  lockStatus: string;\n\n  /**\n   * The groups associated with the package.\n   */\n  @jsonArrayMember(String, { name: 'groups' })\n  groups: string[];\n}\n\n/**\n * Represents a user group with its associated name and users (identified by their URefs).\n */\n@jsonObject\nexport class NamedUserGroup {\n  /**\n   * The name of the user group.\n   */\n  @jsonMember({ name: 'group_name', constructor: String })\n  groupName: string;\n\n  /**\n   * A list of users in the group, represented by their URefs (Universal References).\n   */\n  @jsonArrayMember(URef, {\n    name: 'group_users',\n    serializer: (value: URef[]) => value.map(it => it.toJSON()),\n    deserializer: (json: any) => {\n      if (!json) return;\n      return json.map((it: string) => URef.fromJSON(it));\n    }\n  })\n  groupUsers: URef[];\n\n  /**\n   * Creates a new `NamedUserGroup` instance with a group name and a list of group users (URefs).\n   *\n   * @param groupName The name of the user group.\n   * @param groupUsers The list of users in the group, identified by their URefs.\n   */\n  constructor(groupName: string, groupUsers: URef[]) {\n    this.groupName = groupName;\n    this.groupUsers = groupUsers;\n  }\n}\n","import { jsonMember, jsonObject } from 'typedjson';\nimport { HexBytes } from './HexBytes';\nimport { Hash } from './key';\n\n/**\n * Represents a gas pre-payment in the blockchain system.\n *\n * This container includes details about the receipt, prepayment kind,\n * and associated data required for the gas pre-payment process.\n */\n@jsonObject\nexport class PrepaymentKind {\n  /**\n   * The receipt identifier for the gas pre-payment.\n   *\n   * This is a string representation that uniquely identifies the pre-payment receipt.\n   */\n  @jsonMember({\n    name: 'receipt',\n    constructor: Hash,\n    deserializer: json => Hash.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  receipt: Hash;\n\n  /**\n   * The kind of pre-payment, represented as a byte.\n   *\n   * This value specifies the type or category of the pre-payment.\n   */\n  @jsonMember({\n    name: 'prepayment_data',\n    constructor: HexBytes,\n    deserializer: json => HexBytes.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  prepaymentData: HexBytes;\n\n  /**\n   * The pre-payment data associated with this transaction.\n   *\n   * This is a string containing additional information or metadata for the pre-payment.\n   */\n  @jsonMember({ name: 'prepayment_kind', constructor: Number })\n  prepaymentKind: number;\n}\n","import { jsonObject, jsonMember } from 'typedjson';\nimport { Hash } from './key';\nimport { CLValue } from './clvalue';\nimport { CalltableSerialization } from './CalltableSerialization';\n\n/**\n * Represents the payment limited ( classic before ) pricing mode, including parameters for gas price tolerance,\n * payment amount, and standard payment.\n */\n@jsonObject\nexport class PaymentLimitedMode {\n  /**\n   * The tolerance for gas price fluctuations in classic pricing mode.\n   */\n  @jsonMember({ name: 'gas_price_tolerance', constructor: Number })\n  gasPriceTolerance: number;\n\n  /**\n   * The payment amount associated with classic pricing mode.\n   */\n  @jsonMember({ name: 'payment_amount', constructor: Number })\n  paymentAmount: number;\n\n  /**\n   * Whether the payment is a standard payment.\n   */\n  @jsonMember({ name: 'standard_payment', constructor: Boolean })\n  standardPayment: boolean;\n\n  public toBytes(): Uint8Array {\n    const calltableSerializer = new CalltableSerialization();\n    calltableSerializer.addField(0, CLValue.newCLUint8(0).bytes());\n    calltableSerializer.addField(\n      1,\n      CLValue.newCLUint64(this.paymentAmount).bytes()\n    );\n    calltableSerializer.addField(\n      2,\n      CLValue.newCLUint8(this.gasPriceTolerance).bytes()\n    );\n    calltableSerializer.addField(\n      3,\n      CLValue.newCLValueBool(this.standardPayment).bytes()\n    );\n\n    return calltableSerializer.toBytes();\n  }\n}\n\n/**\n * Represents the fixed pricing mode, including a parameter for gas price tolerance.\n */\n@jsonObject\nexport class FixedMode {\n  /**\n   * The tolerance for gas price fluctuations in fixed pricing mode.\n   */\n  @jsonMember({ name: 'gas_price_tolerance', constructor: Number })\n  gasPriceTolerance: number;\n\n  /**\n   * User-specified additional computation factor (minimum 0).\n   *\n   * - If `0` is provided, no additional logic is applied to the computation limit.\n   * - Each value above `0` tells the node that it needs to treat the transaction\n   *   as if it uses more gas than its serialized size indicates.\n   * - Each increment of `1` increases the \"wasm lane\" size bucket for this transaction by `1`.\n   *\n   * For example:\n   * - If the transaction's size indicates bucket `0` and `additionalComputationFactor = 2`,\n   *   the transaction will be treated as if it belongs to bucket `2`.\n   */\n  @jsonMember({ name: 'additional_computation_factor', constructor: Number })\n  additionalComputationFactor!: number;\n\n  public toBytes(): Uint8Array {\n    const calltableSerializer = new CalltableSerialization();\n    calltableSerializer.addField(0, CLValue.newCLUint8(1).bytes());\n    calltableSerializer.addField(\n      1,\n      CLValue.newCLUint8(this.gasPriceTolerance).bytes()\n    );\n    calltableSerializer.addField(\n      2,\n      CLValue.newCLUint8(this.additionalComputationFactor).bytes()\n    );\n\n    return calltableSerializer.toBytes();\n  }\n}\n\n/**\n * Represents the prepair ( reserved before ) pricing mode, which includes a receipt hash.\n */\n@jsonObject\nexport class PrepaidMode {\n  /**\n   * The receipt associated with the reserved pricing mode.\n   */\n  @jsonMember({\n    name: 'receipt',\n    constructor: Hash,\n    deserializer: json => Hash.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  receipt: Hash;\n\n  public toBytes(): Uint8Array {\n    const calltableSerializer = new CalltableSerialization();\n    calltableSerializer.addField(0, CLValue.newCLUint8(2).bytes());\n    calltableSerializer.addField(1, this.receipt.toBytes());\n\n    return calltableSerializer.toBytes();\n  }\n}\n\n/**\n * Represents the pricing mode, which can be one of the following: PaymentLimited, Fixed, or Prepaid.\n */\n@jsonObject\nexport class PricingMode {\n  /**\n   * The PaymentLimited pricing mode, if applicable.\n   */\n  @jsonMember({ name: 'PaymentLimited', constructor: PaymentLimitedMode })\n  paymentLimited?: PaymentLimitedMode;\n\n  /**\n   * The fixed pricing mode, if applicable.\n   */\n  @jsonMember({ name: 'Fixed', constructor: FixedMode })\n  fixed?: FixedMode;\n\n  /**\n   * The Prepaid pricing mode, if applicable.\n   */\n  @jsonMember({ name: 'Prepaid', constructor: PrepaidMode })\n  prepaid?: PrepaidMode;\n\n  /**\n   * Converts the pricing mode instance into a byte array representation.\n   * This method serializes the current pricing mode into bytes that can be used for transactions.\n   *\n   * @returns A `Uint8Array` representing the serialized pricing mode.\n   */\n  toBytes(): Uint8Array {\n    if (this.paymentLimited) {\n      return this.paymentLimited.toBytes();\n    } else if (this.fixed) {\n      return this.fixed.toBytes();\n    } else if (this.prepaid) {\n      return this.prepaid.toBytes();\n    }\n\n    throw new Error('Unable to serialize PricingMode');\n  }\n}\n","import { TypedJSON } from 'typedjson';\nimport humanizeDuration from 'humanize-duration';\nimport { Args } from './Args';\nimport { Conversions } from './Conversions';\nimport { CLValueUInt512 } from './clvalue';\nimport { IDisabledVersion } from './ContractPackage';\n\n/**\n * Serializes a `Uint8Array` into a hexadecimal string.\n *\n * @param bytes The `Uint8Array` to be serialized.\n * @returns A base-16 encoded string of the provided byte array.\n */\nexport const byteArrayJsonSerializer: (bytes: Uint8Array) => string = (\n  bytes: Uint8Array\n) => {\n  return Conversions.encodeBase16(bytes);\n};\n\n/**\n * Serializes a `Uint8Array` into a hexadecimal string, but only if the value is not `undefined`.\n *\n * @param bytes The `Uint8Array` to be serialized (or `undefined`).\n * @returns A base-16 encoded string of the provided byte array, or `undefined` if input is `undefined`.\n *\n * @note It's suggested to swap the names of this function with `byteArrayJsonSerializer` for better clarity. This function handles `undefined` inputs, while `byteArrayJsonSerializer` should handle only `Uint8Array` directly.\n */\nexport const undefinedSafeByteArrayJsonSerializer: (\n  bytes: Uint8Array | undefined\n) => string | undefined = (bytes: Uint8Array | undefined) => {\n  if (!bytes) {\n    return undefined;\n  }\n  return Conversions.encodeBase16(bytes);\n};\n\n/**\n * Deserializes a hexadecimal string into a `Uint8Array`.\n *\n * @param str The base-16 encoded string to be deserialized.\n * @returns The decoded `Uint8Array` corresponding to the hexadecimal string.\n */\nexport const byteArrayJsonDeserializer: (str: string) => Uint8Array = (\n  str: string\n) => {\n  return Conversions.decodeBase16(str);\n};\n\n/**\n * Deserializes a hexadecimal string into a `Uint8Array`, but only if the value is not `undefined`.\n *\n * @param str The base-16 encoded string to be deserialized (or `undefined`).\n * @returns The decoded `Uint8Array` corresponding to the hexadecimal string, or `undefined` if input is `undefined`.\n */\nexport const undefinedSafeByteArrayJsonDeserializer: (\n  str: string | undefined\n) => Uint8Array | undefined = (str: string | undefined) => {\n  if (!str) {\n    return undefined;\n  }\n  return Conversions.decodeBase16(str);\n};\n\n/**\n * A humanizer configuration for time durations in short English format (days, hours, minutes, seconds, milliseconds).\n */\nconst shortEnglishHumanizer = humanizeDuration.humanizer({\n  spacer: '',\n  serialComma: false,\n  conjunction: ' ',\n  delimiter: ' ',\n  language: 'shortEn',\n  languages: {\n    // Mapping of duration units to shorter names\n    shortEn: {\n      d: () => 'day',\n      h: () => 'h',\n      m: () => 'm',\n      s: () => 's',\n      ms: () => 'ms'\n    }\n  }\n});\n\n/**\n * Returns a human-readable time duration for a given time-to-live (TTL) in milliseconds.\n *\n * @param ttl The TTL in milliseconds.\n * @returns A human-readable string representation of the TTL, such as \"1d 2h 3m 4s\".\n */\nexport const humanizerTTL = (ttl: number) => {\n  return shortEnglishHumanizer(ttl);\n};\n\n/**\n * Converts a human-readable time duration (e.g., \"1d 2h 3m 4s\") back to a time-to-live (TTL) in milliseconds.\n *\n * @param ttl The human-readable string representing the time duration.\n * @returns The TTL in milliseconds.\n * @throws Error if an unsupported TTL unit is encountered.\n */\nexport const dehumanizerTTL = (ttl: string): number => {\n  const dehumanizeUnit = (s: string): number => {\n    if (s.includes('ms')) {\n      return Number(s.replace('ms', ''));\n    }\n    if (s.includes('s') && !s.includes('m')) {\n      return Number(s.replace('s', '')) * 1000;\n    }\n    if (s.includes('m') && !s.includes('s')) {\n      return Number(s.replace('m', '')) * 60 * 1000;\n    }\n    if (s.includes('h')) {\n      return Number(s.replace('h', '')) * 60 * 60 * 1000;\n    }\n    if (s.includes('day')) {\n      return Number(s.replace('day', '')) * 24 * 60 * 60 * 1000;\n    }\n    throw Error('Unsupported TTL unit');\n  };\n\n  return ttl\n    .split(' ')\n    .map(dehumanizeUnit)\n    .reduce((acc, val) => (acc += val));\n};\n\n/**\n * Deserializes an array of runtime arguments to a `RuntimeArgs` object.\n *\n * @param arr The array of serialized runtime arguments or a Named wrapper.\n * @returns A `RuntimeArgs` object containing the deserialized arguments.\n * @throws Error if the input format is invalid.\n */\nexport const deserializeArgs = (arr: any): Args | undefined => {\n  const raSerializer = new TypedJSON(Args);\n\n  if (arr.Named && Array.isArray(arr.Named)) {\n    // If the arguments are wrapped in a \"Named\" property\n    return raSerializer.parse({ args: arr.Named });\n  }\n\n  if (Array.isArray(arr)) {\n    // If the input is directly an array of arguments\n    return raSerializer.parse({ args: arr });\n  }\n\n  throw new Error('Invalid argument format for deserialization.');\n};\n\n/**\n * Serializes a `RuntimeArgs` object to a byte array or an object representation.\n *\n * This function converts the `RuntimeArgs` (or `Args`) object into a serialized format.\n * If `asNamed` is set to `true`, the serialized arguments are wrapped in a `Named` property\n * for more structured output. Otherwise, the plain array of serialized arguments is returned.\n *\n * @param ra - The `Args` object to be serialized. It contains the runtime arguments.\n * @param asNamed - A boolean flag indicating whether to wrap the serialized output in a `Named` property. Defaults to `false`.\n * @returns A serialized representation of the runtime arguments.\n * If `asNamed` is `true`, the output is an object with a `Named` property. Otherwise, it is a plain array.\n *\n */\nexport const serializeArgs = (ra: Args, asNamed = false) => {\n  const raSerializer = new TypedJSON(Args);\n  const json = raSerializer.toPlainJson(ra);\n  const argsArray = Object.values(json as any)[0];\n\n  if (asNamed) {\n    return {\n      Named: argsArray\n    };\n  }\n\n  return argsArray;\n};\n\n/**\n * Deserializes an array of rewards into a Map.\n * @param arr - The array to be deserialized, where each element is a tuple containing a key and an array of rewards.\n * @returns A Map where each key corresponds to an array of CLValueUInt512 rewards.\n * @throws Will throw an error if duplicate keys are detected.\n */\nexport const deserializeRewards = (arr: any) => {\n  const parsed = new Map(\n    Array.from(arr, ([key, value]) => {\n      const valuesArray = value.map((item: any) =>\n        CLValueUInt512.fromJSON(item)\n      );\n      return [key, valuesArray];\n    })\n  );\n\n  if (parsed.size !== Array.from(arr).length) {\n    throw Error(`Duplicate key exists.`);\n  }\n\n  return parsed;\n};\n\n/**\n * Serializes a Map of rewards into an array format suitable for JSON storage.\n * @param map - A Map where each key corresponds to an array of CLValueUInt512 rewards.\n * @returns An array where each element is a tuple containing a key and an array of rewards in JSON format.\n */\nexport const serializeRewards = (map: Map<string, CLValueUInt512[]>) => {\n  return Array.from(map, ([key, value]) => {\n    const serializedValue = value.map(item => item.toJSON());\n    return [key, serializedValue];\n  });\n};\n\n/**\n * Parses disabled versions into a standardized array of tuples.\n *\n * @param disabledVersions - The input array, which can be:\n *   - An array of tuples (`[number, number][]`), or\n *   - An array of objects with `protocol_version_major` and `contract_version` properties.\n * @returns An array of tuples (`[number, number][]`) representing `[protocol_version_major, contract_version]`.\n */\nexport const deserializeDisabledVersions = (\n  disabledVersions: [number, number][] | IDisabledVersion[]\n): [number, number][] => {\n  // V2 Compatible\n  if (Array.isArray(disabledVersions) && Array.isArray(disabledVersions[0])) {\n    return disabledVersions as [number, number][];\n  }\n\n  // V1 Compatible\n  return (disabledVersions as IDisabledVersion[]).map(\n    ({ protocol_version_major, contract_version }) => [\n      contract_version,\n      protocol_version_major\n    ]\n  );\n};\n","import { jsonArrayMember, jsonMember, jsonObject } from 'typedjson';\n\nimport { Account } from './Account';\nimport { Transfer } from './Transfer';\nimport { DeployInfo } from './DeployInfo';\nimport { EraInfo } from './EraInfo';\nimport { Bid } from './Bid';\nimport { UnbondingPurse } from './UnbondingPurse';\nimport { AddressableEntity } from './AddressableEntity';\nimport { BidKind } from './BidKind';\nimport { Package } from './Package';\nimport { MessageChecksum, MessageTopicSummary } from './MessageTopic';\nimport { NamedKeyValue } from './NamedKey';\nimport { EntryPointValue } from './EntryPoint';\nimport { PrepaymentKind } from './Prepayment';\nimport { Contract } from './Contract';\nimport { ContractPackage } from './ContractPackage';\nimport { CLValue, CLValueParser } from './clvalue';\nimport { SystemByteCode } from './ByteCode';\nimport { ContractWasm } from './ContractWasm';\n\n/**\n * Represents a stored value in a decentralized system. The value can be of different types\n * like `Account`, `Contract`, `Transfer`, etc. Each field corresponds to a specific type of\n * stored data in the system.\n */\n@jsonObject\nexport class StoredValue {\n  /**\n   * The stored `CLValue`, which is a general-purpose value that can represent various types of data.\n   */\n  @jsonMember({\n    name: 'CLValue',\n    constructor: CLValue,\n    deserializer: json => {\n      if (!json) return;\n      return CLValueParser.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return CLValueParser.toJSON(value);\n    }\n  })\n  clValue?: CLValue;\n\n  /**\n   * The stored account information.\n   */\n  @jsonMember({ name: 'Account', constructor: Account })\n  account?: Account;\n\n  /**\n   * The stored contract information.\n   */\n  @jsonMember({ name: 'Contract', constructor: Contract })\n  contract?: Contract;\n\n  /**\n   * The WebAssembly (WASM) bytecode for the contract, represented as `AnyT`.\n   */\n  @jsonMember({ name: 'ContractWasm', constructor: ContractWasm })\n  ContractWasm?: ContractWasm;\n\n  /**\n   * The stored contract package information.\n   */\n  @jsonMember({ name: 'ContractPackage', constructor: ContractPackage })\n  contractPackage?: ContractPackage;\n\n  /**\n   * The transfer information, representing a historical transfer.\n   */\n  @jsonMember({\n    name: 'Transfer',\n    constructor: Transfer,\n    deserializer: json => {\n      if (!json) return;\n      return Transfer.fromJSON(json);\n    }\n  })\n  transfer?: Transfer;\n\n  /**\n   * The information related to a deploy operation.\n   */\n  @jsonMember({ name: 'DeployInfo', constructor: DeployInfo })\n  deployInfo?: DeployInfo;\n\n  /**\n   * The information related to an era.\n   */\n  @jsonMember({ name: 'EraInfo', constructor: EraInfo })\n  eraInfo?: EraInfo;\n\n  /**\n   * The stored bid information, typically related to a staking or auction process.\n   */\n  @jsonMember({ name: 'Bid', constructor: Bid })\n  bid?: Bid;\n\n  /**\n   * An array of unbonding purses, which represent assets being unbonded.\n   */\n  @jsonArrayMember(UnbondingPurse, { name: 'Withdraw' })\n  withdraw?: UnbondingPurse[];\n\n  /**\n   * The stored unbonding purse, representing assets being unbonded.\n   */\n  @jsonMember({ name: 'Unbonding', constructor: UnbondingPurse })\n  unbonding?: UnbondingPurse;\n\n  /**\n   * The stored addressable entity information, which is a reference to a contract or other addressable entity.\n   */\n  @jsonMember({ name: 'AddressableEntity', constructor: AddressableEntity })\n  addressableEntity?: AddressableEntity;\n\n  /**\n   * The stored bid kind, representing the type or class of a bid.\n   */\n  @jsonMember({ name: 'BidKind', constructor: BidKind })\n  bidKind?: BidKind;\n\n  /**\n   * The stored package information, typically a contract or executable package.\n   */\n  @jsonMember({ name: 'Package', constructor: Package })\n  package?: Package;\n\n  /**\n   * The stored bytecode, representing compiled contract or executable code.\n   */\n  @jsonMember({\n    name: 'ByteCode',\n    constructor: SystemByteCode,\n    serializer: (value: SystemByteCode) => {\n      if (!value) return;\n      return value.toString();\n    }\n  })\n  byteCode?: SystemByteCode;\n\n  /**\n   * The stored message topic summary, containing a summary of the message topic.\n   */\n  @jsonMember({ name: 'MessageTopic', constructor: MessageTopicSummary })\n  messageTopic?: MessageTopicSummary;\n\n  /**\n   * A checksum of the stored message, typically used for validation purposes.\n   */\n  @jsonMember({ name: 'Message', constructor: String })\n  message?: MessageChecksum;\n\n  /**\n   * The stored named key value, representing a key-value pair within a contract or other entity.\n   */\n  @jsonMember({ name: 'NamedKey', constructor: NamedKeyValue })\n  namedKey?: NamedKeyValue;\n\n  /**\n   * Stores location, type and data for a gas pre-payment.\n   */\n  @jsonMember({ name: 'Prepayment', constructor: PrepaymentKind })\n  prepayment?: PrepaymentKind;\n\n  /**\n   * The stored entry point value, typically representing an entry point in a smart contract.\n   */\n  @jsonMember({ name: 'EntryPoint', constructor: EntryPointValue })\n  entryPoint?: EntryPointValue;\n\n  /**\n   * Raw bytes. Similar to a [`crate::StoredValue::CLValue`] but does not incur overhead of a [`crate::CLValue`] and [`crate::CLType`].\n   */\n  @jsonMember({ name: 'RawBytes', constructor: String })\n  rawBytes?: string;\n}\n","import { jsonObject, jsonMember } from 'typedjson';\nimport { dehumanizerTTL, humanizerTTL } from './SerializationUtils';\n\n/**\n * Represents a timestamp as a specific point in time (Date).\n */\n@jsonObject\nexport class Timestamp {\n  /**\n   * The Date object representing the timestamp.\n   */\n  @jsonMember({ constructor: Date })\n  date: Date;\n\n  /**\n   * Creates a new instance of `Timestamp` with the specified Date.\n   *\n   * @param date The `Date` object representing the timestamp.\n   */\n  constructor(date: Date) {\n    this.date = date;\n  }\n\n  /**\n   * Converts the timestamp to milliseconds (Unix timestamp).\n   *\n   * @returns The timestamp in milliseconds.\n   */\n  toMilliseconds(): number {\n    return this.date.getTime();\n  }\n\n  /**\n   * Converts the timestamp to a JSON string (ISO 8601 format).\n   *\n   * @returns A JSON string representing the timestamp.\n   */\n  toJSON(): string {\n    return this.date.toISOString();\n  }\n\n  /**\n   * Creates a `Timestamp` instance from a JSON string.\n   *\n   * @param data The JSON string representing the timestamp in ISO 8601 format.\n   * @returns A `Timestamp` object.\n   */\n  static fromJSON(data: string): Timestamp {\n    return new Timestamp(new Date(data));\n  }\n\n  /**\n   * Returns the underlying `Date` object of the timestamp.\n   *\n   * @returns The `Date` object representing the timestamp.\n   */\n  toDate(): Date {\n    return this.date;\n  }\n}\n\n/**\n * Represents a duration, typically in milliseconds, with utility methods for parsing and formatting.\n */\n@jsonObject\nexport class Duration {\n  /**\n   * The duration in milliseconds.\n   */\n  @jsonMember({ constructor: Number })\n  duration: number;\n\n  /**\n   * Creates a new instance of `Duration` with the specified duration in milliseconds.\n   *\n   * @param duration The duration in milliseconds.\n   */\n  constructor(duration: number) {\n    this.duration = duration;\n  }\n\n  /**\n   * Converts the duration to a human-readable string.\n   *\n   * @returns A string representing the duration in a human-readable format (e.g., \"1d 2h 3m 4s\").\n   */\n  toJSON(): string {\n    return humanizerTTL(this.duration);\n  }\n\n  /**\n   * Creates a `Duration` instance from a human-readable string representing the duration.\n   *\n   * @param data The human-readable string representing the duration (e.g., \"1d 2h 3m 4s\").\n   * @returns A `Duration` object.\n   */\n  static fromJSON(data: string): Duration {\n    const duration = dehumanizerTTL(data);\n\n    return new Duration(duration);\n  }\n\n  /**\n   * Converts the duration to a string in the format `hh:mm:ss`.\n   *\n   * @returns A string representing the duration in `hh:mm:ss` format.\n   */\n  toDurationString(): string {\n    return new Date(this.duration).toISOString().substring(11, 19);\n  }\n\n  /**\n   * Parses a duration string (e.g., \"1d 2h 3m\") and converts it to milliseconds.\n   *\n   * @param durationStr The string representing the duration in a human-readable format.\n   * @returns The duration in milliseconds.\n   * @throws Error if the duration format is invalid.\n   */\n  static parseDurationString(durationStr: string): number {\n    const parts = durationStr.match(/(\\d+)([smhd])/g);\n    if (!parts) throw new Error('Invalid duration format');\n\n    let totalMs = 0;\n    for (const part of parts) {\n      const value = parseInt(part.slice(0, -1));\n      const unit = part.slice(-1);\n      switch (unit) {\n        case 's':\n          totalMs += value * 1000;\n          break;\n        case 'm':\n          totalMs += value * 60000;\n          break;\n        case 'h':\n          totalMs += value * 3600000;\n          break;\n        case 'd':\n          totalMs += value * 86400000;\n          break;\n      }\n    }\n    return totalMs;\n  }\n\n  /**\n   * Returns the duration in milliseconds.\n   *\n   * @returns The duration in milliseconds.\n   */\n  toMilliseconds(): number {\n    return this.duration;\n  }\n}\n","import { jsonObject, jsonMember, jsonArrayMember, TypedJSON } from 'typedjson';\n\nimport { Hash } from './key';\nimport { Deploy, serializeApprovals } from './Deploy';\nimport { Duration, Timestamp } from './Time';\nimport { InitiatorAddr } from './InitiatorAddr';\nimport { PricingMode } from './PricingMode';\nimport { TransactionTarget } from './TransactionTarget';\nimport { TransactionEntryPoint } from './TransactionEntryPoint';\nimport { TransactionScheduling } from './TransactionScheduling';\nimport { PublicKey, PrivateKey } from './keypair';\nimport { HexBytes } from './HexBytes';\nimport { Args } from './Args';\nimport { deserializeArgs, serializeArgs } from './SerializationUtils';\nimport { byteHash } from './ByteConverters';\nimport { TransactionV1Payload } from './TransactionV1Payload';\nimport { CalltableSerialization } from './CalltableSerialization';\nimport { concat } from '@ethersproject/bytes';\n\n/**\n * Custom error class for handling transaction-related errors.\n */\nexport class TransactionError extends Error {}\n\n/**\n * Error to indicate an invalid transaction hash.\n */\nexport const ErrInvalidTransactionHash = new TransactionError(\n  'invalid transaction hash'\n);\n\n/**\n * Error to indicate an invalid approval signature in a transaction.\n */\nexport const ErrInvalidApprovalSignature = new TransactionError(\n  'invalid approval signature'\n);\n\n/**\n * Error to indicate an issue parsing JSON as a TransactionV1.\n */\nexport const ErrTransactionV1FromJson = new TransactionError(\n  \"The JSON can't be parsed as a TransactionV1.\"\n);\n\n/**\n * Enum representing the categories of transactions.\n */\nexport enum TransactionCategory {\n  Mint = 0,\n  Auction,\n  InstallUpgrade,\n  Large,\n  Medium,\n  Small\n}\n\n/**\n * Enum representing the versions of transactions.\n */\nexport enum TransactionVersion {\n  V1 = 0,\n  Deploy\n}\n\n/**\n * Represents an approval for a transaction with a signer and signature.\n */\n@jsonObject\nexport class Approval {\n  /**\n   * The public key of the signer.\n   */\n  @jsonMember({\n    name: 'signer',\n    constructor: PublicKey,\n    deserializer: json => PublicKey.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  public signer: PublicKey;\n\n  /**\n   * The signature of the transaction signed by the signer.\n   */\n  @jsonMember({\n    name: 'signature',\n    constructor: HexBytes,\n    deserializer: json => HexBytes.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  public signature: HexBytes;\n\n  /**\n   * Constructs an `Approval` instance with a signer and signature.\n   * @param signer The public key of the signer.\n   * @param signature The signature of the transaction.\n   */\n  constructor(signer: PublicKey, signature: HexBytes) {\n    this.signer = signer;\n    this.signature = signature;\n  }\n}\n\n/**\n * Represents a TransactionV1 object, including its hash, payload, and approvals.\n */\n@jsonObject\nexport class TransactionV1 {\n  /**\n   * The hash of the transaction.\n   */\n  @jsonMember({\n    name: 'hash',\n    constructor: Hash,\n    deserializer: json => Hash.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  public hash: Hash;\n\n  /**\n   * The payload of the transaction.\n   * A merge of header and body concepts from before.\n   */\n  @jsonMember({\n    name: 'payload',\n    constructor: TransactionV1Payload\n  })\n  public payload: TransactionV1Payload;\n\n  /**\n   * The approvals for the transaction.\n   */\n  @jsonArrayMember(() => Approval)\n  public approvals: Approval[];\n\n  constructor(\n    hash: Hash,\n    payload: TransactionV1Payload,\n    approvals: Approval[]\n  ) {\n    this.hash = hash;\n    this.payload = payload;\n    this.approvals = approvals;\n  }\n\n  /**\n   * Validates the transaction by checking the transaction hash and the approval signatures.\n   * @throws {TransactionError} Throws errors if validation fails.\n   */\n  public validate(): boolean {\n    const payloadBytes = this.payload!.toBytes();\n    const calculatedHash = new Hash(byteHash(payloadBytes));\n\n    if (!this.hash.equals(calculatedHash)) throw ErrInvalidTransactionHash;\n\n    for (const approval of this.approvals) {\n      if (\n        !approval.signer.verifySignature(\n          this.hash.toBytes(),\n          approval.signature.bytes\n        )\n      ) {\n        throw ErrInvalidApprovalSignature;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Signs the transaction using the provided private key.\n   * @param keys The private key to sign the transaction.\n   */\n  sign(keys: PrivateKey): void {\n    const signatureBytes = keys.signAndAddAlgorithmBytes(this.hash.toBytes());\n    const signature = new HexBytes(signatureBytes);\n\n    if (!this.approvals) {\n      this.approvals = [];\n    }\n\n    this.approvals.push(new Approval(keys.publicKey, signature));\n  }\n\n  private static readonly  HASH_FIELD_INDEX = 0;\n  private static readonly  PAYLOAD_FIELD_INDEX = 1;\n  private static readonly  APPROVALS_FIELD_INDEX = 2;\n\n  /**\n   * Converts the TransactionV1 to a byte array for transmission or storage.\n   * @returns A `Uint8Array` representing the TransactionV1 instance in byte format.\n   */\n  public toBytes(): Uint8Array {\n    return new CalltableSerialization()\n      .addField(TransactionV1.HASH_FIELD_INDEX, this.hash.toBytes())\n      .addField(TransactionV1.PAYLOAD_FIELD_INDEX, this.payload.toBytes())\n      .addField(TransactionV1.APPROVALS_FIELD_INDEX, serializeApprovals(this.approvals))\n      .toBytes();\n  }\n\n  /**\n   * Sets an already generated signature to the transaction.\n   * @param transaction The `TransactionV1` instance.\n   * @param signature The Ed25519 or Secp256K1 signature.\n   * @param publicKey The public key used to generate the signature.\n   * @returns The updated `TransactionV1`.\n   */\n  static setSignature(\n    transaction: TransactionV1,\n    signature: Uint8Array,\n    publicKey: PublicKey\n  ): TransactionV1 {\n    const hex = new HexBytes(signature);\n    transaction.approvals.push(new Approval(publicKey, hex));\n\n    return transaction;\n  }\n\n  /**\n   * Creates a new `TransactionV1` instance.\n   * @param hash The hash of the transaction.\n   * @param payload The payload of the transaction. A merge of header and body concepts from before.\n   * @param approvals The approvals for the transaction.\n   * @returns A new `TransactionV1` instance.\n   */\n  static newTransactionV1(\n    hash: Hash,\n    payload: TransactionV1Payload,\n    approvals: Approval[]\n  ): TransactionV1 {\n    return new TransactionV1(hash, payload, approvals);\n  }\n\n  /**\n   * Creates a new `TransactionV1` instance with a header and body.\n   * @param payload The payload of the transaction. A merge of header and body concepts from before.\n   * @returns A new `TransactionV1` instance.\n   */\n  static makeTransactionV1(payload: TransactionV1Payload): TransactionV1 {\n    const payloadBytes = payload.toBytes();\n    const transactionHash = new Hash(byteHash(payloadBytes));\n    return new TransactionV1(transactionHash, payload, []);\n  }\n\n  /**\n   * Converts a JSON representation of a `TransactionV1` to a `TransactionV1` object.\n   * @param json A JSON representation of a `TransactionV1`.\n   * @returns A `TransactionV1` object.\n   * @throws {TransactionError} If parsing fails.\n   */\n  public static fromJSON(json: any): TransactionV1 {\n    let tx: TransactionV1 | undefined;\n\n    try {\n      const data: Record<string, any> =\n        typeof json === 'string' ? JSON.parse(json) : json;\n      const txData: Record<string, any> | null =\n        data?.transaction?.Version1 ?? data?.Version1 ?? data ?? null;\n\n      if (!(txData?.hash && txData?.payload?.initiator_addr)) {\n        throw ErrTransactionV1FromJson;\n      }\n\n      const serializer = new TypedJSON(TransactionV1);\n      tx = serializer.parse(txData);\n\n      if (!tx) {\n        throw ErrTransactionV1FromJson;\n      }\n    } catch (e) {\n      throw new Error(`Serialization error: ${e.message}`);\n    }\n\n    tx.validate();\n\n    return tx;\n  }\n\n  /**\n   * Converts the `TransactionV1` object to a JSON representation.\n   * @param transaction The `TransactionV1` object.\n   * @returns A JSON version of the `TransactionV1`.\n   */\n  public static toJSON = (transaction: TransactionV1) => {\n    const serializer = new TypedJSON(TransactionV1);\n\n    return serializer.toPlainJson(transaction);\n  };\n}\n\n/**\n * A wrapper for a TransactionV1 or Deploy.\n */\n@jsonObject\nexport class Transaction {\n  /**\n   * The hash of the transaction.\n   */\n  @jsonMember({\n    name: 'hash',\n    constructor: Hash,\n    deserializer: json => Hash.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  public hash: Hash;\n\n  /**\n   * The name of the blockchain chain associated with this transaction.\n   */\n  @jsonMember({ name: 'chain_name', constructor: String })\n  public chainName: string;\n\n  /**\n   * The timestamp when the transaction was created.\n   */\n  @jsonMember({\n    name: 'timestamp',\n    constructor: Timestamp,\n    deserializer: json => Timestamp.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  public timestamp: Timestamp;\n\n  /**\n   * The time-to-live (TTL) duration of the transaction. It defines the expiration time for the transaction.\n   */\n  @jsonMember({\n    name: 'ttl',\n    constructor: Duration,\n    deserializer: json => Duration.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  public ttl: Duration;\n\n  /**\n   * The address of the initiator of the transaction.\n   */\n  @jsonMember({\n    name: 'initiator_addr',\n    constructor: InitiatorAddr,\n    deserializer: json => InitiatorAddr.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  public initiatorAddr: InitiatorAddr;\n\n  /**\n   * The pricing mode used for the transaction, which may involve different cost mechanisms.\n   */\n  @jsonMember({ name: 'pricing_mode', constructor: PricingMode })\n  public pricingMode: PricingMode;\n\n  /**\n   * The arguments for the transaction, which can be a map of values required by the entry point.\n   */\n  @jsonMember(() => Args, {\n    deserializer: deserializeArgs,\n    serializer: (args: Args) => serializeArgs(args, false)\n  })\n  public args: Args;\n\n  /**\n   * The target of the transaction, which specifies where the transaction is directed (e.g., a contract or account).\n   */\n  @jsonMember({\n    name: 'target',\n    constructor: TransactionTarget,\n    serializer: value => value.toJSON(),\n    deserializer: json => TransactionTarget.fromJSON(json)\n  })\n  public target: TransactionTarget;\n\n  /**\n   * The entry point of the transaction, specifying the method or action to be executed.\n   */\n  @jsonMember({\n    name: 'entry_point',\n    constructor: TransactionEntryPoint,\n    serializer: value => value.toJSON(),\n    deserializer: json => TransactionEntryPoint.fromJSON(json)\n  })\n  public entryPoint: TransactionEntryPoint;\n\n  /**\n   * The scheduling information for when the transaction should be executed.\n   */\n  @jsonMember({\n    name: 'scheduling',\n    constructor: TransactionScheduling,\n    serializer: value => value.toJSON(),\n    deserializer: json => TransactionScheduling.fromJSON(json)\n  })\n  public scheduling: TransactionScheduling;\n\n  /**\n   * The list of approvals for this transaction.\n   */\n  @jsonArrayMember(Approval)\n  public approvals: Approval[];\n\n  /**\n   * The original deployment associated with this transaction, if applicable.\n   * This is optional and only populated if the transaction originated from a deploy.\n   */\n  private originDeployV1?: Deploy;\n\n  /**\n   * The original TransactionV1 associated with this transaction, if applicable.\n   * This is optional and only populated if the transaction is based on a TransactionV1.\n   */\n  private originTransactionV1?: TransactionV1;\n\n  /**\n   * Creates a new `Transaction` instance with the specified values.\n   * @param hash The hash of the transaction.\n   * @param chainName The blockchain chain name associated with this transaction.\n   * @param timestamp The timestamp of transaction creation.\n   * @param ttl The time-to-live duration of the transaction.\n   * @param initiatorAddr The address of the transaction initiator.\n   * @param pricingMode The pricing mode for this transaction.\n   * @param args The arguments for the transaction.\n   * @param target The target of the transaction.\n   * @param entryPoint The entry point of the transaction.\n   * @param scheduling The scheduling information for the transaction.\n   * @param approvals The list of approvals for this transaction.\n   * @param originTransactionV1 The original TransactionV1, if applicable.\n   * @param originDeployV1 The original deploy, if applicable.\n   */\n  constructor(\n    hash: Hash,\n    chainName: string,\n    timestamp: Timestamp,\n    ttl: Duration,\n    initiatorAddr: InitiatorAddr,\n    pricingMode: PricingMode,\n    args: Args,\n    target: TransactionTarget,\n    entryPoint: TransactionEntryPoint,\n    scheduling: TransactionScheduling,\n    approvals: Approval[],\n    originTransactionV1?: TransactionV1,\n    originDeployV1?: Deploy\n  ) {\n    this.hash = hash;\n    this.chainName = chainName;\n    this.timestamp = timestamp;\n    this.ttl = ttl;\n    this.initiatorAddr = initiatorAddr;\n    this.pricingMode = pricingMode;\n    this.args = args;\n    this.target = target;\n    this.entryPoint = entryPoint;\n    this.scheduling = scheduling;\n    this.approvals = approvals;\n\n    this.originDeployV1 = originDeployV1;\n    this.originTransactionV1 = originTransactionV1;\n\n    if (!(this.originDeployV1 || this.originTransactionV1)) {\n      throw new Error(\n        'Incorrect Transaction instance. Missing originTransactionV1 or originDeploy'\n      );\n    }\n\n    if (this.originDeployV1 && this.originTransactionV1) {\n      throw new Error(\n        'Incorrect Transaction instance. Should be only one of originTransactionV1 or originDeploy'\n      );\n    }\n  }\n\n  /**\n   * Gets the original deployment associated with this transaction, if available.\n   * @returns The original deploy or `undefined` if not available.\n   */\n  public getDeploy(): Deploy | undefined {\n    return this.originDeployV1;\n  }\n\n  /**\n   * Gets the original TransactionV1 associated with this transaction, if available.\n   * @returns The original TransactionV1 or `undefined` if not available.\n   */\n  public getTransactionV1(): TransactionV1 | undefined {\n    return this.originTransactionV1;\n  }\n\n  public getTransactionWrapper(): TransactionWrapper {\n    return new TransactionWrapper(\n      this.originDeployV1,\n      this.originTransactionV1\n    );\n  }\n\n  /**\n   * Validates the transaction by checking the transaction hash and the approval signatures.\n   * @throws {TransactionError} Throws errors if validation fails.\n   */\n  public validate(): boolean {\n    if (this.originTransactionV1) {\n      return this.originTransactionV1.validate();\n    } else if (this.originDeployV1) {\n      return this.originDeployV1.validate();\n    }\n\n    throw new Error('Incorrect Transaction instance. Missing origin value');\n  }\n\n  /**\n   * Signs the transaction using the provided private key.\n   * @param key The private key to sign the transaction.\n   */\n  sign(key: PrivateKey): void {\n    const signatureBytes = key.signAndAddAlgorithmBytes(this.hash.toBytes());\n    this.setSignature(signatureBytes, key.publicKey);\n  }\n\n  /**\n   * Sets an already generated signature to the transaction.\n   * @param signature The Ed25519 or Secp256K1 signature.\n   * @param publicKey The public key used to generate the signature.\n   */\n  setSignature(signature: Uint8Array, publicKey: PublicKey) {\n    const hex = new HexBytes(signature);\n    const approval = new Approval(publicKey, hex);\n\n    if (this.originTransactionV1) {\n      this.originTransactionV1.approvals.push(approval);\n    } else if (this.originDeployV1) {\n      this.originDeployV1.approvals.push(approval);\n    } else {\n      throw new Error('Incorrect Transaction instance. Missing origin value');\n    }\n  }\n\n  /**\n   * Converts the Transaction to a byte array for transmission or storage.\n   * @returns A `Uint8Array` representing the Transaction instance in byte format.\n   */\n  public toBytes(): Uint8Array {\n    if(this.originDeployV1) {\n      return concat([\n        Uint8Array.of(0x00),\n        this.originDeployV1.toBytes()\n      ]);\n    } else if(this.originTransactionV1) {\n      return concat([\n        Uint8Array.of(0x01),\n        this.originTransactionV1.toBytes()\n      ]);\n    } else {\n      throw new Error('Incorrect Transaction instance. Missing origin value');\n    }\n  }\n\n  /**\n   * Converts a `TransactionV1` to a `Transaction` object.\n   * @param v1 The `TransactionV1` to convert.\n   * @returns A new `Transaction` instance created from the given `TransactionV1`.\n   */\n  static fromTransactionV1(v1: TransactionV1): Transaction {\n    return new Transaction(\n      v1.hash,\n      v1.payload.chainName,\n      v1.payload.timestamp,\n      v1.payload.ttl,\n      v1.payload.initiatorAddr,\n      v1.payload.pricingMode,\n      v1.payload.fields.args,\n      v1.payload.fields.target,\n      v1.payload.fields.entryPoint,\n      v1.payload.fields.scheduling,\n      v1.approvals,\n      v1, // originTransactionV1\n      undefined // originDeployV1 is not applicable for this method\n    );\n  }\n\n  /**\n   * Converts a `TransactionV1` to a `Transaction` object.\n   * @param deploy The `Deploy` to convert.\n   * @returns A new `Transaction` instance created from the given `Deploy`.\n   */\n  static fromDeploy(deploy: Deploy): Transaction {\n    return Deploy.newTransactionFromDeploy(deploy);\n  }\n\n  static fromJSON(json: any): Transaction {\n    try {\n      const txV1 = TransactionV1.fromJSON(json);\n\n      return Transaction.fromTransactionV1(txV1);\n    } catch (e) {}\n\n    try {\n      const deploy = Deploy.fromJSON(json);\n\n      return Transaction.fromDeploy(deploy);\n    } catch (e) {}\n\n    throw new Error(\"The JSON can't be parsed as a Transaction.\");\n  }\n\n  toJSON() {\n    if (this.originTransactionV1) {\n      return TransactionV1.toJSON(this.originTransactionV1);\n    }\n\n    if (this.originDeployV1) {\n      return Deploy.toJSON(this.originDeployV1);\n    }\n\n    throw new Error('Incorrect Transaction instance. Missing origin value');\n  }\n}\n\n/**\n * Wrapper class for transactions, allowing for both `Deploy` and `TransactionV1` to be stored\n * in the same object. This can be useful when working with multiple versions of transactions.\n */\n@jsonObject\nexport class TransactionWrapper {\n  /**\n   * The deployment object associated with the transaction, if applicable.\n   * This will contain the details of the deploy transaction.\n   */\n  @jsonMember(() => Deploy, { name: 'Deploy' })\n  deploy?: Deploy;\n\n  /**\n   * The version 1 transaction object, if applicable.\n   * This will contain the details of a TransactionV1, which represents the first version of a transaction.\n   */\n  @jsonMember({\n    name: 'Version1',\n    constructor: TransactionV1,\n    deserializer: json => {\n      if (!json) return;\n      return TransactionV1.fromJSON(json);\n    }\n  })\n  transactionV1?: TransactionV1;\n\n  /**\n   * Constructs a new `TransactionWrapper` instance with the provided `Deploy` and `TransactionV1` values.\n   * @param deploy The `Deploy` object, if applicable.\n   * @param transactionV1 The `TransactionV1` object, if applicable.\n   */\n  constructor(deploy?: Deploy, transactionV1?: TransactionV1) {\n    this.deploy = deploy;\n    this.transactionV1 = transactionV1;\n  }\n\n  static toJSON(wrapper: TransactionWrapper) {\n    const serializer = new TypedJSON(TransactionWrapper);\n    return serializer.toPlainJson(wrapper);\n  }\n}\n\n/**\n * Represents a transaction hash, which can either be associated with a `Deploy` or a `TransactionV1`.\n * This class helps in wrapping transaction hashes from different transaction types.\n */\n@jsonObject\nexport class TransactionHash {\n  /**\n   * The hash associated with the deploy transaction, if applicable.\n   * This will contain the hash of the `Deploy` transaction.\n   */\n  @jsonMember({\n    name: 'Deploy',\n    constructor: Hash,\n    deserializer: json => {\n      if (!json) return;\n      return Hash.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  public deploy?: Hash;\n\n  /**\n   * The hash associated with the version 1 transaction, if applicable.\n   * This will contain the hash of the `TransactionV1`.\n   */\n  @jsonMember({\n    name: 'Version1',\n    constructor: Hash,\n    deserializer: json => {\n      if (!json) return;\n      return Hash.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  public transactionV1?: Hash;\n\n  /**\n   * Constructs a new `TransactionHash` instance, which can hold either a `Deploy` hash or a `TransactionV1` hash.\n   * @param deploy The hash of the deploy transaction, if applicable.\n   * @param transactionV1 The hash of the version 1 transaction, if applicable.\n   */\n  constructor(deploy?: Hash, transactionV1?: Hash) {\n    this.deploy = deploy;\n    this.transactionV1 = transactionV1;\n  }\n\n  /**\n   * Converts the `TransactionHash` to a hexadecimal string representation.\n   *\n   * @returns {string} The hexadecimal string of the deploy or transactionV1,\n   *                   or an empty string if neither is available.\n   */\n  public toString(): string {\n    if (this.deploy) {\n      return this.deploy.toHex();\n    } else if (this.transactionV1) {\n      return this.transactionV1.toHex();\n    }\n\n    return '';\n  }\n}\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\n\nimport { InitiatorAddr } from './InitiatorAddr';\nimport { PaymentLimitedMode, PricingMode } from './PricingMode';\nimport {\n  ByPackageHashInvocationTarget,\n  ByPackageNameInvocationTarget,\n  SessionTarget,\n  StoredTarget,\n  TransactionInvocationTarget,\n  TransactionRuntime,\n  TransactionTarget\n} from './TransactionTarget';\nimport {\n  TransactionEntryPoint,\n  TransactionEntryPointEnum\n} from './TransactionEntryPoint';\nimport { TransactionScheduling } from './TransactionScheduling';\nimport { Args } from './Args';\nimport { PublicKey } from './keypair';\nimport { AccountHash, ContractHash, Hash } from './key';\nimport { Transaction, TransactionV1 } from './Transaction';\nimport { TransactionV1Payload } from './TransactionV1Payload';\nimport { Duration, Timestamp } from './Time';\nimport { CLValue } from './clvalue';\nimport {\n  ExecutableDeployItem,\n  StoredContractByHash,\n  StoredContractByName,\n  StoredVersionedContractByHash,\n  StoredVersionedContractByName,\n  TransferDeployItem\n} from './ExecutableDeployItem';\nimport { Deploy, DeployHeader } from './Deploy';\nimport { AuctionManagerContractHashMap } from '../utils';\nimport { AuctionManagerEntryPoint, CasperNetworkName } from '../@types';\n\n/**\n * Abstract base class for building Transaction V1 instances.\n */\nabstract class TransactionBuilder<T extends TransactionBuilder<T>> {\n  protected _initiatorAddr!: InitiatorAddr;\n  protected _chainName!: string;\n  protected _timestamp = new Timestamp(new Date());\n  protected _ttl = new Duration(1800000);\n  protected _pricingMode!: PricingMode;\n  protected _invocationTarget!: TransactionTarget;\n  protected _entryPoint!: TransactionEntryPoint;\n  protected _scheduling: TransactionScheduling = new TransactionScheduling({}); // Standard\n  protected _runtimeArgs: Args;\n  protected _contractHash: string;\n\n  /**\n   * Sets the initiator address using a public key.\n   */\n  public from(publicKey: PublicKey): T {\n    this._initiatorAddr = new InitiatorAddr(publicKey);\n    return (this as unknown) as T;\n  }\n\n  /**\n   * Sets the initiator address using an account hash.\n   */\n  public fromAccountHash(accountHashKey: AccountHash): T {\n    this._initiatorAddr = new InitiatorAddr(undefined, accountHashKey);\n    return (this as unknown) as T;\n  }\n\n  /**\n   * Sets the chain name for the transaction.\n   */\n  public chainName(chainName: string): T {\n    this._chainName = chainName;\n    return (this as unknown) as T;\n  }\n\n  /**\n   * Sets the contract hash for the transaction.\n   */\n  public contractHash(contractHash: string): T {\n    this._contractHash = contractHash;\n    return (this as unknown) as T;\n  }\n\n  /**\n   * Sets the timestamp for the transaction.\n   */\n  public timestamp(timestamp: Timestamp): T {\n    this._timestamp = timestamp;\n    return (this as unknown) as T;\n  }\n\n  /**\n   * Sets the time-to-live for the transaction.\n   */\n  public ttl(ttl: number): T {\n    this._ttl = new Duration(ttl);\n    return (this as unknown) as T;\n  }\n\n  /**\n   * Sets the payment amount for the transaction.\n   */\n  public payment(paymentAmount: number, gasPriceTolerance = 1): T {\n    const pricingMode = new PricingMode();\n    const paymentLimited = new PaymentLimitedMode();\n    paymentLimited.standardPayment = true;\n    paymentLimited.paymentAmount = paymentAmount;\n    paymentLimited.gasPriceTolerance = gasPriceTolerance;\n\n    pricingMode.paymentLimited = paymentLimited;\n    this._pricingMode = pricingMode;\n    return (this as unknown) as T;\n  }\n\n  protected _getDefaultDeployHeader(): DeployHeader {\n    const deployHeader = DeployHeader.default();\n    deployHeader.account = this._initiatorAddr.publicKey;\n    deployHeader.chainName = this._chainName;\n    deployHeader.timestamp = this._timestamp;\n    deployHeader.ttl = this._ttl;\n\n    return deployHeader;\n  }\n\n  protected _getStandardPayment(): ExecutableDeployItem {\n    if (!this._pricingMode.paymentLimited?.paymentAmount) {\n      throw new Error('PaymentAmount is not specified');\n    }\n\n    return ExecutableDeployItem.standardPayment(\n      this._pricingMode.paymentLimited.paymentAmount.toString()\n    );\n  }\n\n  /**\n   * Builds and returns the Transaction instance.\n   */\n  public build(): Transaction {\n    const transactionPayload = TransactionV1Payload.build({\n      initiatorAddr: this._initiatorAddr,\n      timestamp: this._timestamp,\n      ttl: this._ttl,\n      chainName: this._chainName,\n      pricingMode: this._pricingMode,\n      args: this._runtimeArgs,\n      transactionTarget: this._invocationTarget,\n      entryPoint: this._entryPoint,\n      scheduling: this._scheduling\n    });\n\n    const transactionV1 = TransactionV1.makeTransactionV1(transactionPayload);\n    return Transaction.fromTransactionV1(transactionV1);\n  }\n}\n\n/**\n * Builder for creating Native Transfer transactions.\n */\nexport class NativeTransferBuilder extends TransactionBuilder<\n  NativeTransferBuilder\n> {\n  private _target!: CLValue;\n  private _publicKey: PublicKey;\n  private _amount: CLValue = CLValue.newCLUInt512('0');\n  private _amountRow: BigNumber | string = '0';\n  private _idTransfer?: number;\n\n  constructor() {\n    super();\n    this._invocationTarget = new TransactionTarget({}); // Native\n    this._entryPoint = new TransactionEntryPoint(\n      TransactionEntryPointEnum.Transfer\n    );\n  }\n\n  /**\n   * Sets the target public key for the transfer.\n   */\n  public target(publicKey: PublicKey): NativeTransferBuilder {\n    this._publicKey = publicKey;\n    this._target = CLValue.newCLPublicKey(publicKey);\n    return this;\n  }\n\n  /**\n   * Sets the target account hash for the transfer.\n   */\n  public targetAccountHash(accountHashKey: AccountHash): NativeTransferBuilder {\n    this._target = CLValue.newCLByteArray(accountHashKey.toBytes());\n    return this;\n  }\n\n  /**\n   * Sets the amount to transfer.\n   */\n  public amount(amount: BigNumber | string): NativeTransferBuilder {\n    this._amountRow = amount;\n    this._amount = CLValue.newCLUInt512(amount);\n    return this;\n  }\n\n  /**\n   * Sets the transfer ID.\n   */\n  public id(id: number): NativeTransferBuilder {\n    this._idTransfer = id;\n    return this;\n  }\n\n  /**\n   * Builds and returns the Native Transfer transaction.\n   */\n  public build(): Transaction {\n    const runtimeArgs = Args.fromMap({});\n\n    runtimeArgs.insert('target', this._target);\n    runtimeArgs.insert('amount', this._amount);\n\n    if (this._idTransfer) {\n      runtimeArgs.insert(\n        'id',\n        CLValue.newCLOption(CLValue.newCLUint64(this._idTransfer))\n      );\n    }\n\n    this._runtimeArgs = runtimeArgs;\n    return super.build();\n  }\n\n  /**\n   * Builds and returns the Native Transfer transaction.\n   */\n  public buildFor1_5(): Transaction {\n    const session = new ExecutableDeployItem();\n    session.transfer = TransferDeployItem.newTransfer(\n      this._amountRow,\n      this._publicKey,\n      undefined,\n      this._idTransfer\n    );\n\n    const payment = ExecutableDeployItem.standardPayment('100000000');\n\n    const deploy = Deploy.makeDeploy(\n      this._getDefaultDeployHeader(),\n      payment,\n      session\n    );\n\n    return Transaction.fromDeploy(deploy);\n  }\n}\n\nexport class NativeAddBidBuilder extends TransactionBuilder<\n  NativeAddBidBuilder\n> {\n  private _validator!: CLValue;\n  private _amount!: CLValue;\n  private _delegationRate!: CLValue;\n  private _minimumDelegationAmount?: CLValue;\n  private _maximumDelegationAmount?: CLValue;\n  private _reservedSlots?: CLValue;\n\n  constructor() {\n    super();\n    this._invocationTarget = new TransactionTarget({}); // Native\n    this._entryPoint = new TransactionEntryPoint(\n      TransactionEntryPointEnum.AddBid\n    );\n  }\n\n  public validator(publicKey: PublicKey): NativeAddBidBuilder {\n    this._validator = CLValue.newCLPublicKey(publicKey);\n    return this;\n  }\n\n  public amount(amount: BigNumber | string): NativeAddBidBuilder {\n    this._amount = CLValue.newCLUInt512(amount);\n    return this;\n  }\n\n  public delegationRate(delegationRate: number): NativeAddBidBuilder {\n    this._delegationRate = CLValue.newCLUint8(delegationRate);\n    return this;\n  }\n\n  public minimumDelegationAmount(\n    minimumDelegationAmount: BigNumberish\n  ): NativeAddBidBuilder {\n    this._minimumDelegationAmount = CLValue.newCLUint64(\n      minimumDelegationAmount\n    );\n    return this;\n  }\n\n  public maximumDelegationAmount(\n    maximumDelegationAmount: BigNumberish\n  ): NativeAddBidBuilder {\n    this._maximumDelegationAmount = CLValue.newCLUint64(\n      maximumDelegationAmount\n    );\n    return this;\n  }\n\n  public reservedSlots(reservedSlots: BigNumber): NativeAddBidBuilder {\n    this._reservedSlots = CLValue.newCLUInt32(reservedSlots);\n    return this;\n  }\n\n  public build(): Transaction {\n    const runtimeArgs = Args.fromMap({});\n\n    runtimeArgs.insert('public_key', this._validator);\n    runtimeArgs.insert('amount', this._amount);\n    runtimeArgs.insert('delegation_rate', this._delegationRate);\n\n    if (this._minimumDelegationAmount) {\n      runtimeArgs.insert(\n        'minimum_delegation_amount',\n        this._minimumDelegationAmount\n      );\n    }\n\n    if (this._maximumDelegationAmount) {\n      runtimeArgs.insert(\n        'maximum_delegation_amount',\n        this._maximumDelegationAmount\n      );\n    }\n\n    if (this._reservedSlots) {\n      runtimeArgs.insert('reserved_slots', this._reservedSlots);\n    }\n\n    this._runtimeArgs = runtimeArgs;\n\n    return super.build();\n  }\n\n  public buildFor1_5(): Transaction {\n    if (!this._initiatorAddr.publicKey) {\n      throw new Error('Initiator addr is not specified');\n    }\n\n    const runtimeArgs = Args.fromMap({});\n\n    runtimeArgs.insert('public_key', this._validator);\n    runtimeArgs.insert('amount', this._amount);\n    runtimeArgs.insert('delegation_rate', this._delegationRate);\n\n    if (this._minimumDelegationAmount) {\n      runtimeArgs.insert(\n        'minimum_delegation_amount',\n        this._minimumDelegationAmount\n      );\n    }\n\n    if (this._maximumDelegationAmount) {\n      runtimeArgs.insert(\n        'maximum_delegation_amount',\n        this._maximumDelegationAmount\n      );\n    }\n\n    if (this._reservedSlots) {\n      runtimeArgs.insert('reserved_slots', this._reservedSlots);\n    }\n\n    this._runtimeArgs = runtimeArgs;\n\n    const contractHash =\n      this._contractHash ??\n      AuctionManagerContractHashMap[this._chainName as CasperNetworkName] ??\n      AuctionManagerContractHashMap.casper;\n\n    if (!contractHash) {\n      throw new Error(\n        `Contract hash is undefined. Check _contractHash or _chainName: ${this._chainName}`\n      );\n    }\n\n    const session = new ExecutableDeployItem();\n    session.storedContractByHash = new StoredContractByHash(\n      ContractHash.newContract(contractHash),\n      AuctionManagerEntryPoint.addBid,\n      runtimeArgs\n    );\n\n    const deploy = Deploy.makeDeploy(\n      this._getDefaultDeployHeader(),\n      this._getStandardPayment(),\n      session\n    );\n\n    return Transaction.fromDeploy(deploy);\n  }\n}\n\nexport class NativeWithdrawBidBuilder extends TransactionBuilder<\n  NativeWithdrawBidBuilder\n> {\n  private _validator!: CLValue;\n  private _amount: CLValue = CLValue.newCLUInt512('0');\n\n  constructor() {\n    super();\n    this._invocationTarget = new TransactionTarget({}); // Native\n    this._entryPoint = new TransactionEntryPoint(\n      TransactionEntryPointEnum.WithdrawBid\n    );\n  }\n\n  public validator(publicKey: PublicKey): NativeWithdrawBidBuilder {\n    this._validator = CLValue.newCLPublicKey(publicKey);\n    return this;\n  }\n\n  public amount(amount: BigNumber | string): NativeWithdrawBidBuilder {\n    this._amount = CLValue.newCLUInt512(amount);\n    return this;\n  }\n\n  public build(): Transaction {\n    this._runtimeArgs = Args.fromMap({\n      public_key: this._validator,\n      amount: this._amount\n    });\n\n    return super.build();\n  }\n\n  public buildFor1_5(): Transaction {\n    this._runtimeArgs = Args.fromMap({\n      public_key: this._validator,\n      amount: this._amount\n    });\n\n    const contractHash =\n      this._contractHash ??\n      AuctionManagerContractHashMap[this._chainName as CasperNetworkName] ??\n      AuctionManagerContractHashMap.casper;\n\n    if (!contractHash) {\n      throw new Error(\n        `Contract hash is undefined. Check _contractHash or _chainName: ${this._chainName}`\n      );\n    }\n\n    const session = new ExecutableDeployItem();\n    session.storedContractByHash = new StoredContractByHash(\n      ContractHash.newContract(contractHash),\n      AuctionManagerEntryPoint.withdrawBid,\n      this._runtimeArgs\n    );\n\n    const deploy = Deploy.makeDeploy(\n      this._getDefaultDeployHeader(),\n      this._getStandardPayment(),\n      session\n    );\n\n    return Transaction.fromDeploy(deploy);\n  }\n}\n\nexport class NativeDelegateBuilder extends TransactionBuilder<\n  NativeDelegateBuilder\n> {\n  private _validator!: CLValue;\n  private _amount: CLValue = CLValue.newCLUInt512('0');\n\n  constructor() {\n    super();\n    this._invocationTarget = new TransactionTarget({});\n    this._entryPoint = new TransactionEntryPoint(\n      TransactionEntryPointEnum.Delegate\n    );\n  }\n\n  public validator(publicKey: PublicKey): NativeDelegateBuilder {\n    this._validator = CLValue.newCLPublicKey(publicKey);\n    return this;\n  }\n\n  public amount(amount: BigNumber | string): NativeDelegateBuilder {\n    this._amount = CLValue.newCLUInt512(amount);\n    return this;\n  }\n\n  public build(): Transaction {\n    if (!this._initiatorAddr.publicKey) {\n      throw new Error('Initiator addr is not specified');\n    }\n\n    this._runtimeArgs = Args.fromMap({\n      delegator: CLValue.newCLPublicKey(this._initiatorAddr.publicKey),\n      validator: this._validator,\n      amount: this._amount\n    });\n\n    return super.build();\n  }\n\n  public buildFor1_5(): Transaction {\n    if (!this._initiatorAddr.publicKey) {\n      throw new Error('Initiator addr is not specified');\n    }\n\n    const contractHash =\n      this._contractHash ??\n      AuctionManagerContractHashMap[this._chainName as CasperNetworkName] ??\n      AuctionManagerContractHashMap.casper;\n\n    if (!contractHash) {\n      throw new Error(\n        `Contract hash is undefined. Check _contractHash or _chainName: ${this._chainName}`\n      );\n    }\n\n    const session = new ExecutableDeployItem();\n    session.storedContractByHash = new StoredContractByHash(\n      ContractHash.newContract(contractHash),\n      AuctionManagerEntryPoint.delegate,\n      Args.fromMap({\n        validator: this._validator,\n        delegator: CLValue.newCLPublicKey(this._initiatorAddr.publicKey),\n        amount: this._amount\n      })\n    );\n\n    const deploy = Deploy.makeDeploy(\n      this._getDefaultDeployHeader(),\n      this._getStandardPayment(),\n      session\n    );\n\n    return Transaction.fromDeploy(deploy);\n  }\n}\n\nexport class NativeUndelegateBuilder extends TransactionBuilder<\n  NativeUndelegateBuilder\n> {\n  private _validator!: CLValue;\n  private _amount: CLValue = CLValue.newCLUInt512('0');\n\n  constructor() {\n    super();\n    this._invocationTarget = new TransactionTarget({});\n    this._entryPoint = new TransactionEntryPoint(\n      TransactionEntryPointEnum.Undelegate\n    );\n  }\n\n  public validator(publicKey: PublicKey): NativeUndelegateBuilder {\n    this._validator = CLValue.newCLPublicKey(publicKey);\n    return this;\n  }\n\n  public amount(amount: BigNumber | string): NativeUndelegateBuilder {\n    this._amount = CLValue.newCLUInt512(amount);\n    return this;\n  }\n\n  public build(): Transaction {\n    if (!this._initiatorAddr.publicKey) {\n      throw new Error('Initiator addr is not specified');\n    }\n\n    this._runtimeArgs = Args.fromMap({\n      delegator: CLValue.newCLPublicKey(this._initiatorAddr.publicKey),\n      validator: this._validator,\n      amount: this._amount\n    });\n\n    return super.build();\n  }\n\n  public buildFor1_5(): Transaction {\n    if (!this._initiatorAddr.publicKey) {\n      throw new Error('Initiator addr is not specified');\n    }\n\n    const contractHash =\n      this._contractHash ??\n      AuctionManagerContractHashMap[this._chainName as CasperNetworkName] ??\n      AuctionManagerContractHashMap.casper;\n\n    if (!contractHash) {\n      throw new Error(\n        `Contract hash is undefined. Check _contractHash or _chainName: ${this._chainName}`\n      );\n    }\n\n    const session = new ExecutableDeployItem();\n    session.storedContractByHash = new StoredContractByHash(\n      ContractHash.newContract(contractHash),\n      AuctionManagerEntryPoint.undelegate,\n      Args.fromMap({\n        validator: this._validator,\n        delegator: CLValue.newCLPublicKey(this._initiatorAddr.publicKey),\n        amount: this._amount\n      })\n    );\n\n    const deploy = Deploy.makeDeploy(\n      this._getDefaultDeployHeader(),\n      this._getStandardPayment(),\n      session\n    );\n\n    return Transaction.fromDeploy(deploy);\n  }\n}\n\nexport class NativeRedelegateBuilder extends TransactionBuilder<\n  NativeRedelegateBuilder\n> {\n  private _validator!: CLValue;\n  private _newValidator!: CLValue;\n  private _amount: CLValue = CLValue.newCLUInt512('0');\n\n  constructor() {\n    super();\n    this._invocationTarget = new TransactionTarget({});\n    this._entryPoint = new TransactionEntryPoint(\n      TransactionEntryPointEnum.Redelegate\n    );\n  }\n\n  public validator(publicKey: PublicKey): NativeRedelegateBuilder {\n    this._validator = CLValue.newCLPublicKey(publicKey);\n    return this;\n  }\n\n  public newValidator(publicKey: PublicKey): NativeRedelegateBuilder {\n    this._newValidator = CLValue.newCLPublicKey(publicKey);\n    return this;\n  }\n\n  public amount(amount: BigNumber | string): NativeRedelegateBuilder {\n    this._amount = CLValue.newCLUInt512(amount);\n    return this;\n  }\n\n  public build(): Transaction {\n    if (!this._initiatorAddr.publicKey) {\n      throw new Error('Initiator addr is not specified');\n    }\n\n    this._runtimeArgs = Args.fromMap({\n      delegator: CLValue.newCLPublicKey(this._initiatorAddr.publicKey),\n      validator: this._validator,\n      amount: this._amount,\n      new_validator: this._newValidator\n    });\n\n    return super.build();\n  }\n\n  public buildFor1_5(): Transaction {\n    if (!this._initiatorAddr.publicKey) {\n      throw new Error('Initiator addr is not specified');\n    }\n\n    const contractHash =\n      this._contractHash ??\n      AuctionManagerContractHashMap[this._chainName as CasperNetworkName] ??\n      AuctionManagerContractHashMap.casper;\n\n    if (!contractHash) {\n      throw new Error(\n        `Contract hash is undefined. Check _contractHash or _chainName: ${this._chainName}`\n      );\n    }\n\n    const session = new ExecutableDeployItem();\n    session.storedContractByHash = new StoredContractByHash(\n      ContractHash.newContract(contractHash),\n      AuctionManagerEntryPoint.redelegate,\n      Args.fromMap({\n        validator: this._validator,\n        new_validator: this._newValidator,\n        delegator: CLValue.newCLPublicKey(this._initiatorAddr.publicKey),\n        amount: this._amount\n      })\n    );\n\n    const deploy = Deploy.makeDeploy(\n      this._getDefaultDeployHeader(),\n      this._getStandardPayment(),\n      session\n    );\n\n    return Transaction.fromDeploy(deploy);\n  }\n}\n\nexport class NativeActivateBidBuilder extends TransactionBuilder<\n  NativeActivateBidBuilder\n> {\n  private _validator!: CLValue;\n\n  constructor() {\n    super();\n    this._invocationTarget = new TransactionTarget({}); // Native\n    this._entryPoint = new TransactionEntryPoint(\n      TransactionEntryPointEnum.ActivateBid\n    );\n  }\n\n  public validator(publicKey: PublicKey): NativeActivateBidBuilder {\n    this._validator = CLValue.newCLPublicKey(publicKey);\n    return this;\n  }\n\n  public build(): Transaction {\n    this._runtimeArgs = Args.fromMap({\n      validator: this._validator\n    });\n\n    return super.build();\n  }\n\n  public buildFor1_5(): Transaction {\n    this._runtimeArgs = Args.fromMap({\n      validator: this._validator\n    });\n\n    const contractHash =\n      this._contractHash ??\n      AuctionManagerContractHashMap[this._chainName as CasperNetworkName] ??\n      AuctionManagerContractHashMap.casper;\n\n    if (!contractHash) {\n      throw new Error(\n        `Contract hash is undefined. Check _contractHash or _chainName: ${this._chainName}`\n      );\n    }\n\n    const session = new ExecutableDeployItem();\n    session.storedContractByHash = new StoredContractByHash(\n      ContractHash.newContract(contractHash),\n      AuctionManagerEntryPoint.activateBid,\n      this._runtimeArgs\n    );\n\n    const deploy = Deploy.makeDeploy(\n      this._getDefaultDeployHeader(),\n      this._getStandardPayment(),\n      session\n    );\n\n    return Transaction.fromDeploy(deploy);\n  }\n}\n\nexport class NativeChangeBidPublicKeyBuilder extends TransactionBuilder<\n  NativeChangeBidPublicKeyBuilder\n> {\n  private _public_key!: CLValue;\n  private _new_public_key!: CLValue;\n\n  constructor() {\n    super();\n    this._invocationTarget = new TransactionTarget({});\n    this._entryPoint = new TransactionEntryPoint(\n      TransactionEntryPointEnum.ChangeBidPublicKey\n    );\n  }\n\n  public previousPublicKey(\n    publicKey: PublicKey\n  ): NativeChangeBidPublicKeyBuilder {\n    this._public_key = CLValue.newCLPublicKey(publicKey);\n    return this;\n  }\n\n  public newPublicKey(publicKey: PublicKey): NativeChangeBidPublicKeyBuilder {\n    this._new_public_key = CLValue.newCLPublicKey(publicKey);\n    return this;\n  }\n\n  public build(): Transaction {\n    this._runtimeArgs = Args.fromMap({\n      public_key: this._public_key,\n      new_public_key: this._new_public_key\n    });\n\n    return super.build();\n  }\n}\n\nexport class ContractCallBuilder extends TransactionBuilder<\n  ContractCallBuilder\n> {\n  constructor() {\n    super();\n  }\n\n  private _transactionInvocationTarget: TransactionInvocationTarget;\n\n  public byHash(contractHash: string): ContractCallBuilder {\n    const invocationTarget = new TransactionInvocationTarget();\n    invocationTarget.byHash = Hash.fromHex(contractHash);\n    this._transactionInvocationTarget = invocationTarget;\n\n    const storedTarget = new StoredTarget();\n    storedTarget.id = invocationTarget;\n    storedTarget.runtime = TransactionRuntime.vmCasperV1();\n\n    this._invocationTarget = new TransactionTarget(undefined, storedTarget);\n    return this;\n  }\n\n  public byName(name: string): ContractCallBuilder {\n    const invocationTarget = new TransactionInvocationTarget();\n    invocationTarget.byName = name;\n    this._transactionInvocationTarget = invocationTarget;\n\n    const storedTarget = new StoredTarget();\n    storedTarget.id = invocationTarget;\n    storedTarget.runtime = TransactionRuntime.vmCasperV1();\n\n    this._invocationTarget = new TransactionTarget(undefined, storedTarget);\n    return this;\n  }\n\n  public byPackageHash(\n    contractHash: string,\n    version?: number\n  ): ContractCallBuilder {\n    const packageHashInvocationTarget = new ByPackageHashInvocationTarget();\n    packageHashInvocationTarget.addr = Hash.fromHex(contractHash);\n    packageHashInvocationTarget.version = version;\n    const transactionInvocationTarget = new TransactionInvocationTarget();\n    transactionInvocationTarget.byPackageHash = packageHashInvocationTarget;\n    this._transactionInvocationTarget = transactionInvocationTarget;\n\n    const storedTarget = new StoredTarget();\n\n    storedTarget.id = transactionInvocationTarget;\n    storedTarget.runtime = TransactionRuntime.vmCasperV1();\n\n    this._invocationTarget = new TransactionTarget(undefined, storedTarget);\n    return this;\n  }\n\n  public byPackageName(name: string, version?: number): ContractCallBuilder {\n    const packageNameInvocationTarget = new ByPackageNameInvocationTarget();\n    packageNameInvocationTarget.name = name;\n    packageNameInvocationTarget.version = version;\n    const transactionInvocationTarget = new TransactionInvocationTarget();\n    transactionInvocationTarget.byPackageName = packageNameInvocationTarget;\n    this._transactionInvocationTarget = transactionInvocationTarget;\n\n    const storedTarget = new StoredTarget();\n\n    storedTarget.id = transactionInvocationTarget;\n    storedTarget.runtime = TransactionRuntime.vmCasperV1();\n\n    this._invocationTarget = new TransactionTarget(undefined, storedTarget);\n\n    return this;\n  }\n\n  public entryPoint(name: string): ContractCallBuilder {\n    this._entryPoint = new TransactionEntryPoint(\n      TransactionEntryPointEnum.Custom,\n      name\n    );\n    return this;\n  }\n\n  public runtimeArgs(args: Args): ContractCallBuilder {\n    this._runtimeArgs = args;\n    return this;\n  }\n\n  public buildFor1_5(): Transaction {\n    if (!this._entryPoint.customEntryPoint) {\n      throw new Error('EntryPoint is not specified');\n    }\n\n    const session = new ExecutableDeployItem();\n\n    if (this._transactionInvocationTarget.byHash) {\n      session.storedContractByHash = new StoredContractByHash(\n        ContractHash.newContract(\n          this._transactionInvocationTarget.byHash.toHex()\n        ),\n        this._entryPoint.customEntryPoint,\n        this._runtimeArgs\n      );\n    } else if (this._transactionInvocationTarget.byPackageHash) {\n      session.storedVersionedContractByHash = new StoredVersionedContractByHash(\n        ContractHash.newContract(\n          this._transactionInvocationTarget.byPackageHash.addr.toHex()\n        ),\n        this._entryPoint.customEntryPoint,\n        this._runtimeArgs,\n        this._transactionInvocationTarget.byPackageHash.version\n      );\n    } else if (this._transactionInvocationTarget.byName) {\n      session.storedContractByName = new StoredContractByName(\n        this._transactionInvocationTarget.byName,\n        this._entryPoint.customEntryPoint,\n        this._runtimeArgs\n      );\n    } else if (this._transactionInvocationTarget.byPackageName) {\n      session.storedVersionedContractByName = new StoredVersionedContractByName(\n        this._transactionInvocationTarget.byPackageName.name,\n        this._entryPoint.customEntryPoint,\n        this._runtimeArgs,\n        this._transactionInvocationTarget.byPackageName.version\n      );\n    }\n\n    const deploy = Deploy.makeDeploy(\n      this._getDefaultDeployHeader(),\n      this._getStandardPayment(),\n      session\n    );\n\n    return Transaction.fromDeploy(deploy);\n  }\n}\n\nexport class SessionBuilder extends TransactionBuilder<SessionBuilder> {\n  private _isInstallOrUpgrade = false;\n\n  constructor() {\n    super();\n    this._entryPoint = new TransactionEntryPoint(\n      TransactionEntryPointEnum.Call\n    );\n  }\n\n  public wasm(wasmBytes: Uint8Array): SessionBuilder {\n    const sessionTarget = new SessionTarget();\n    sessionTarget.moduleBytes = wasmBytes;\n    sessionTarget.isInstallUpgrade = this._isInstallOrUpgrade;\n    sessionTarget.runtime = TransactionRuntime.vmCasperV1();\n\n    this._invocationTarget = new TransactionTarget(\n      undefined,\n      undefined,\n      sessionTarget\n    );\n\n    return this;\n  }\n\n  public installOrUpgrade(): SessionBuilder {\n    this._isInstallOrUpgrade = true;\n    if (this._invocationTarget?.session) {\n      this._invocationTarget.session.isInstallUpgrade = true;\n    }\n    return this;\n  }\n\n  public runtimeArgs(args: Args): SessionBuilder {\n    this._runtimeArgs = args;\n    return this;\n  }\n\n  public buildFor1_5(): Transaction {\n    if (!this._invocationTarget.session?.moduleBytes) {\n      throw new Error('EntryPoint is not specified');\n    }\n\n    const session = ExecutableDeployItem.newModuleBytes(\n      this._invocationTarget.session.moduleBytes,\n      this._runtimeArgs\n    );\n\n    const deploy = Deploy.makeDeploy(\n      this._getDefaultDeployHeader(),\n      this._getStandardPayment(),\n      session\n    );\n\n    return Transaction.fromDeploy(deploy);\n  }\n}\n","import { jsonObject, jsonMember } from 'typedjson';\nimport { CLValue, CLValueString } from './clvalue';\nimport { CalltableSerialization } from './CalltableSerialization';\n\n/**\n * Enum representing the available transaction entry points, each representing a different operation in the system.\n */\nexport enum TransactionEntryPointEnum {\n  Custom = 'Custom',\n  Transfer = 'Transfer',\n  AddBid = 'AddBid',\n  WithdrawBid = 'WithdrawBid',\n  Delegate = 'Delegate',\n  Undelegate = 'Undelegate',\n  Redelegate = 'Redelegate',\n  ActivateBid = 'ActivateBid',\n  ChangeBidPublicKey = 'ChangeBidPublicKey',\n  Call = 'Call',\n  AddReservations = 'AddReservations',\n  CancelReservations = 'CancelReservations'\n}\n\n/**\n * Enum representing the unique tags associated with each transaction entry point.\n * These tags are used to simplify storage and facilitate efficient comparison of entry points.\n */\nexport enum TransactionEntryPointTag {\n  Call = 0,\n  Custom = 1,\n  Transfer = 2,\n  AddBid = 3,\n  WithdrawBid = 4,\n  Delegate = 5,\n  Undelegate = 6,\n  Redelegate = 7,\n  ActivateBid = 8,\n  ChangeBidPublicKey = 9,\n  AddReservations = 10,\n  CancelReservations = 11\n}\n\n/**\n * Represents a transaction entry point, which defines an action to be executed within the system.\n * This class supports predefined entry points as well as custom-defined actions.\n */\n@jsonObject\nexport class TransactionEntryPoint {\n  /**\n   * The type of transaction entry point, represented as an enum.\n   */\n  @jsonMember({ constructor: String })\n  type: TransactionEntryPointEnum;\n\n  /**\n   * Custom entry point identifier, used when the `type` is `Custom`.\n   */\n  @jsonMember({ constructor: String })\n  customEntryPoint?: string;\n\n  /**\n   * Initializes a new `TransactionEntryPoint` instance.\n   *\n   * @param type - The type of transaction entry point.\n   * @param customEntryPoint - An optional identifier for custom entry points.\n   */\n  constructor(type: TransactionEntryPointEnum, customEntryPoint?: string) {\n    if (type === TransactionEntryPointEnum.Custom && !customEntryPoint) {\n      throw new Error(\n        'When specifying Custom entry point, customEntryPoint must be provided'\n      );\n    }\n    this.type = type;\n    this.customEntryPoint = customEntryPoint;\n  }\n\n  /**\n   * Retrieves the unique tag associated with the transaction entry point.\n   * Tags are used to identify entry points in a compact and efficient manner.\n   *\n   * @returns The tag number for the entry point.\n   * @throws An error if the entry point is unknown.\n   */\n  public tag(): number {\n    switch (this.type) {\n      case TransactionEntryPointEnum.Transfer:\n        return TransactionEntryPointTag.Transfer;\n      case TransactionEntryPointEnum.AddBid:\n        return TransactionEntryPointTag.AddBid;\n      case TransactionEntryPointEnum.WithdrawBid:\n        return TransactionEntryPointTag.WithdrawBid;\n      case TransactionEntryPointEnum.Delegate:\n        return TransactionEntryPointTag.Delegate;\n      case TransactionEntryPointEnum.Undelegate:\n        return TransactionEntryPointTag.Undelegate;\n      case TransactionEntryPointEnum.Redelegate:\n        return TransactionEntryPointTag.Redelegate;\n      case TransactionEntryPointEnum.ActivateBid:\n        return TransactionEntryPointTag.ActivateBid;\n      case TransactionEntryPointEnum.ChangeBidPublicKey:\n        return TransactionEntryPointTag.ChangeBidPublicKey;\n      case TransactionEntryPointEnum.Call:\n        return TransactionEntryPointTag.Call;\n      case TransactionEntryPointEnum.AddReservations:\n        return TransactionEntryPointTag.AddReservations;\n      case TransactionEntryPointEnum.CancelReservations:\n        return TransactionEntryPointTag.CancelReservations;\n      case TransactionEntryPointEnum.Custom:\n        return TransactionEntryPointTag.Custom;\n      default:\n        throw new Error('Unknown TransactionEntryPointTag');\n    }\n  }\n\n  /**\n   * Serializes the transaction entry point into a byte array.\n   *\n   * @returns A `Uint8Array` representing the transaction entry point and any associated data.\n   */\n  toBytes(): Uint8Array {\n    const calltableSerialization = new CalltableSerialization();\n    const tag = this.tag();\n    calltableSerialization.addField(0, Uint8Array.from([tag]));\n\n    if (\n      this.type === TransactionEntryPointEnum.Custom &&\n      this.customEntryPoint\n    ) {\n      const entryPointBytes = CLValue.newCLString(\n        this.customEntryPoint\n      ).bytes();\n      calltableSerialization.addField(1, entryPointBytes);\n    }\n\n    return calltableSerialization.toBytes();\n  }\n\n  /**\n   * Converts the transaction entry point to a JSON-compatible format.\n   *\n   * @returns A JSON object representing the transaction entry point.\n   */\n  toJSON(): unknown {\n    if (\n      this.type === TransactionEntryPointEnum.Custom &&\n      this.customEntryPoint\n    ) {\n      return { Custom: this.customEntryPoint };\n    }\n\n    return this.type;\n  }\n\n  /**\n   * Creates a `TransactionEntryPoint` instance from a JSON representation.\n   *\n   * @param json - The JSON representation of the transaction entry point.\n   * @returns A `TransactionEntryPoint` instance.\n   * @throws An error if the JSON is invalid or the entry point is unknown.\n   */\n  static fromJSON(json: any): TransactionEntryPoint {\n    if (json?.Custom) {\n      return new TransactionEntryPoint(\n        TransactionEntryPointEnum.Custom,\n        json.Custom\n      );\n    }\n\n    switch (json) {\n      case TransactionEntryPointEnum.Transfer:\n        return new TransactionEntryPoint(TransactionEntryPointEnum.Transfer);\n      case TransactionEntryPointEnum.AddBid:\n        return new TransactionEntryPoint(TransactionEntryPointEnum.AddBid);\n      case TransactionEntryPointEnum.WithdrawBid:\n        return new TransactionEntryPoint(TransactionEntryPointEnum.WithdrawBid);\n      case TransactionEntryPointEnum.Delegate:\n        return new TransactionEntryPoint(TransactionEntryPointEnum.Delegate);\n      case TransactionEntryPointEnum.Undelegate:\n        return new TransactionEntryPoint(TransactionEntryPointEnum.Undelegate);\n      case TransactionEntryPointEnum.Redelegate:\n        return new TransactionEntryPoint(TransactionEntryPointEnum.Redelegate);\n      case TransactionEntryPointEnum.ActivateBid:\n        return new TransactionEntryPoint(TransactionEntryPointEnum.ActivateBid);\n      case TransactionEntryPointEnum.ChangeBidPublicKey:\n        return new TransactionEntryPoint(\n          TransactionEntryPointEnum.ChangeBidPublicKey\n        );\n      case TransactionEntryPointEnum.Call:\n        return new TransactionEntryPoint(TransactionEntryPointEnum.Call);\n      case TransactionEntryPointEnum.AddReservations:\n        return new TransactionEntryPoint(\n          TransactionEntryPointEnum.AddReservations\n        );\n      case TransactionEntryPointEnum.CancelReservations:\n        return new TransactionEntryPoint(\n          TransactionEntryPointEnum.CancelReservations\n        );\n      default:\n        throw new Error('Unknown entry point');\n    }\n  }\n\n  /**\n   * Deserializes a `TransactionEntryPoint` from its byte representation.\n   *\n   * This method takes a serialized byte array and reconstructs a `TransactionEntryPoint` object.\n   * It supports multiple entry point types, including both predefined and custom entry points.\n   *\n   * @param bytes - The byte array representing the serialized `TransactionEntryPoint`.\n   * @returns A deserialized `TransactionEntryPoint` instance.\n   * @throws Will throw an error if the byte array is invalid or has missing fields.\n   *\n   * ### Example\n   * ```typescript\n   * const serializedBytes = new Uint8Array([0, 1, 2, 3, ...]);\n   * const entryPoint = TransactionEntryPoint.fromBytes(serializedBytes);\n   * console.log(entryPoint.type); // Logs the entry point type\n   * ```\n   */\n  static fromBytes(bytes: Uint8Array): TransactionEntryPoint {\n    const calltableSerialization = CalltableSerialization.fromBytes(bytes);\n    const tagBytes = calltableSerialization.getField(0);\n\n    if (!tagBytes || tagBytes.length !== 1) {\n      throw new Error('Invalid tag bytes');\n    }\n\n    const tag = tagBytes[0];\n\n    const type = (() => {\n      switch (tag) {\n        case TransactionEntryPointTag.Transfer:\n          return TransactionEntryPointEnum.Transfer;\n        case TransactionEntryPointTag.AddBid:\n          return TransactionEntryPointEnum.AddBid;\n        case TransactionEntryPointTag.WithdrawBid:\n          return TransactionEntryPointEnum.WithdrawBid;\n        case TransactionEntryPointTag.Delegate:\n          return TransactionEntryPointEnum.Delegate;\n        case TransactionEntryPointTag.Undelegate:\n          return TransactionEntryPointEnum.Undelegate;\n        case TransactionEntryPointTag.Redelegate:\n          return TransactionEntryPointEnum.Redelegate;\n        case TransactionEntryPointTag.ActivateBid:\n          return TransactionEntryPointEnum.ActivateBid;\n        case TransactionEntryPointTag.ChangeBidPublicKey:\n          return TransactionEntryPointEnum.ChangeBidPublicKey;\n        case TransactionEntryPointTag.Call:\n          return TransactionEntryPointEnum.Call;\n        case TransactionEntryPointTag.AddReservations:\n          return TransactionEntryPointEnum.AddReservations;\n        case TransactionEntryPointTag.CancelReservations:\n          return TransactionEntryPointEnum.CancelReservations;\n        case TransactionEntryPointTag.Custom:\n          return TransactionEntryPointEnum.Custom;\n        default:\n          throw new Error('Unknown tag');\n      }\n    })();\n\n    if (type === TransactionEntryPointEnum.Custom) {\n      const customBytes = calltableSerialization.getField(1);\n\n      if (!customBytes) {\n        throw new Error('Missing custom entry point bytes for Custom type');\n      }\n\n      const customSerialization = CalltableSerialization.fromBytes(customBytes);\n\n      const customFlag = customSerialization.getField(0);\n\n      if (!customFlag || customFlag[0] !== 1) {\n        throw new Error('Invalid flag for Custom type');\n      }\n\n      const customEntryPointBytes = customSerialization.getField(1);\n\n      if (!customEntryPointBytes) {\n        throw new Error('Invalid custom entry point bytes');\n      }\n\n      const customEntryPoint = CLValueString.fromBytes(\n        customEntryPointBytes\n      ).result.toString();\n\n      return new TransactionEntryPoint(type, customEntryPoint);\n    }\n\n    return new TransactionEntryPoint(type);\n  }\n}\n","import { jsonObject, jsonMember } from 'typedjson';\n\nimport { Timestamp } from './Time';\nimport { CLValue } from './clvalue';\nimport { CalltableSerialization } from './CalltableSerialization';\nimport { fromBytesU64, toBytesU64 } from './ByteConverters';\n\n/**\n * Enum representing the scheduling tags for transaction scheduling types.\n */\nexport enum TransactionSchedulingTag {\n  /** Native scheduling, meaning no future scheduling is applied. */\n  Native = 0,\n  /** Future scheduling based on the era ID. */\n  FutureEra,\n  /** Future scheduling based on a specific timestamp. */\n  FutureTimestamp\n}\n\n/**\n * Represents the scheduling for a transaction in a future era.\n */\n@jsonObject\nexport class FutureEraScheduling {\n  /**\n   * The ID of the future era when the transaction is scheduled to occur.\n   */\n  @jsonMember({ constructor: Number, name: 'EraID' })\n  eraID: number;\n\n  /**\n   * Creates a new instance of `FutureEraScheduling`.\n   *\n   * @param eraID The era ID when the transaction is scheduled.\n   */\n  constructor(eraID: number) {\n    this.eraID = eraID;\n  }\n\n  public toBytes(): Uint8Array {\n    const calltableSerialization = new CalltableSerialization();\n    calltableSerialization.addField(0, Uint8Array.of(1));\n    calltableSerialization.addField(1, CLValue.newCLUint64(this.eraID).bytes());\n\n    return calltableSerialization.toBytes();\n  }\n}\n\n/**\n * Represents the scheduling for a transaction in a future timestamp.\n */\n@jsonObject\nexport class FutureTimestampScheduling {\n  /**\n   * The timestamp when the transaction is scheduled to occur.\n   */\n  @jsonMember({\n    name: 'FutureTimestamp',\n    constructor: Timestamp,\n    deserializer: json => Timestamp.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  timestamp: Timestamp;\n\n  /**\n   * Creates a new instance of `FutureTimestampScheduling`.\n   *\n   * @param timestamp The timestamp when the transaction is scheduled.\n   */\n  constructor(timestamp: Timestamp) {\n    this.timestamp = timestamp;\n  }\n\n  public toBytes(): Uint8Array {\n    const calltableSerialization = new CalltableSerialization();\n    calltableSerialization.addField(0, Uint8Array.of(2));\n    calltableSerialization.addField(\n      1,\n      toBytesU64(Date.parse(this.timestamp.toJSON()))\n    );\n\n    return calltableSerialization.toBytes();\n  }\n}\n\n/**\n * Represents a transaction scheduling, which could be either immediate (standard), scheduled for a future era, or scheduled for a future timestamp.\n */\n@jsonObject\nexport class TransactionScheduling {\n  /**\n   * Represents the standard (immediate) scheduling with no future scheduling.\n   */\n  @jsonMember({ name: 'Standard', constructor: Object })\n  standard?: object;\n\n  /**\n   * Represents scheduling to a future era with a specified `eraID`.\n   */\n  @jsonMember({ name: 'FutureEra', constructor: FutureEraScheduling })\n  futureEra?: FutureEraScheduling;\n\n  /**\n   * Represents scheduling to a future timestamp with a specified `timestamp`.\n   */\n  @jsonMember({\n    name: 'FutureTimestamp',\n    constructor: FutureTimestampScheduling\n  })\n  futureTimestamp?: FutureTimestampScheduling;\n\n  /**\n   * Creates a new instance of `TransactionScheduling`.\n   *\n   * @param standard The standard scheduling with no delay.\n   * @param futureEra The future era scheduling.\n   * @param futureTimestamp The future timestamp scheduling.\n   */\n  constructor(\n    standard?: object,\n    futureEra?: FutureEraScheduling,\n    futureTimestamp?: FutureTimestampScheduling\n  ) {\n    this.standard = standard;\n    this.futureEra = futureEra;\n    this.futureTimestamp = futureTimestamp;\n  }\n\n  /**\n   * Determines the tag that corresponds to the current scheduling type.\n   *\n   * @returns The corresponding tag for the scheduling type.\n   */\n  tag(): TransactionSchedulingTag {\n    if (this.standard) return TransactionSchedulingTag.Native;\n    if (this.futureEra) return TransactionSchedulingTag.FutureEra;\n    if (this.futureTimestamp) return TransactionSchedulingTag.FutureTimestamp;\n    return 0;\n  }\n\n  /**\n   * Serializes the transaction scheduling into a byte array representation.\n   *\n   * @returns A `Uint8Array` representing the transaction scheduling.\n   */\n  toBytes(): Uint8Array {\n    if (this.standard) {\n      const calltableSerialization = new CalltableSerialization();\n      calltableSerialization.addField(0, Uint8Array.of(0));\n      return calltableSerialization.toBytes();\n    } else if (this.futureEra) {\n      return this.futureEra.toBytes();\n    } else if (this.futureTimestamp) {\n      return this.futureTimestamp.toBytes();\n    }\n\n    throw new Error('Unable to serialize TransactionScheduling');\n  }\n\n  /**\n   * Creates a `TransactionScheduling` instance from a JSON object.\n   *\n   * @param json The JSON object to deserialize into a `TransactionScheduling` instance.\n   * @returns The deserialized `TransactionScheduling` object.\n   * @throws Error if the JSON format is invalid.\n   */\n  static fromJSON(json: any): TransactionScheduling {\n    if (json === 'Standard') {\n      return new TransactionScheduling({});\n    }\n    if (typeof json === 'object') {\n      if ('FutureEra' in json) {\n        return new TransactionScheduling(\n          undefined,\n          new FutureEraScheduling(json.FutureEra)\n        );\n      }\n      if ('FutureTimestamp' in json) {\n        return new TransactionScheduling(\n          undefined,\n          undefined,\n          new FutureTimestampScheduling(json.FutureEra)\n        );\n      }\n    }\n    throw new Error('Invalid JSON format for TransactionScheduling');\n  }\n\n  /**\n   * Converts the transaction scheduling into a JSON-compatible format.\n   *\n   * @returns The JSON representation of the transaction scheduling.\n   * @throws Error if the scheduling type is unknown.\n   */\n  toJSON(): unknown {\n    if (this.standard) {\n      return 'Standard';\n    }\n    if (this.futureTimestamp) {\n      return {\n        FutureTimestamp: this.futureTimestamp.timestamp.date.toISOString()\n      };\n    }\n    if (this.futureEra) {\n      return { FutureEra: this.futureEra.eraID };\n    }\n    throw new Error('Unknown scheduling type');\n  }\n\n  /**\n   * Deserializes a `Uint8Array` into a `TransactionScheduling` instance.\n   *\n   * This method parses a byte array representation of a `TransactionScheduling`\n   * object, determines the type of scheduling based on the tag, and reconstructs\n   * the appropriate instance.\n   *\n   * @param bytes - The byte array to be deserialized.\n   * @returns A `TransactionScheduling` instance based on the serialized data.\n   * @throws Error - If the byte array is invalid, missing required fields, or contains\n   *                 an unrecognized scheduling tag.\n   *\n   * ### Tags and Their Associated Schedulers:\n   * - `TransactionSchedulingTag.Native`: Represents a native scheduling target.\n   * - `TransactionSchedulingTag.FutureEra`: Represents a scheduling target tied to a future era.\n   * - `TransactionSchedulingTag.FutureTimestamp`: Represents a scheduling target tied to a future timestamp.\n   *\n   * ### Example\n   * ```typescript\n   * const bytes = new Uint8Array([...]); // Provide valid TransactionScheduling bytes\n   * const scheduling = TransactionScheduling.fromBytes(bytes);\n   * console.log(scheduling); // Parsed TransactionScheduling instance\n   * ```\n   */\n  static fromBytes(bytes: Uint8Array): TransactionScheduling {\n    const calltable = CalltableSerialization.fromBytes(bytes);\n\n    const tagBytes = calltable.getField(0);\n    if (!tagBytes || tagBytes.length !== 1) {\n      throw new Error(\n        'Invalid or missing tag in serialized TransactionScheduling'\n      );\n    }\n    const tag = tagBytes[0];\n\n    switch (tag) {\n      case TransactionSchedulingTag.Native:\n        return new TransactionScheduling({});\n\n      case TransactionSchedulingTag.FutureEra: {\n        const eraIDBytes = calltable.getField(1);\n        if (!eraIDBytes) {\n          throw new Error('Missing eraID field for FutureEra scheduling');\n        }\n        const eraID = fromBytesU64(eraIDBytes).toNumber();\n        return new TransactionScheduling(\n          undefined,\n          new FutureEraScheduling(eraID)\n        );\n      }\n\n      case TransactionSchedulingTag.FutureTimestamp: {\n        const timestampBytes = calltable.getField(1);\n        if (!timestampBytes) {\n          throw new Error(\n            'Missing timestamp field for FutureTimestamp scheduling'\n          );\n        }\n        const timestampMs = fromBytesU64(timestampBytes).toNumber();\n        const timestamp = new Timestamp(new Date(timestampMs));\n        return new TransactionScheduling(\n          undefined,\n          undefined,\n          new FutureTimestampScheduling(timestamp)\n        );\n      }\n\n      default:\n        throw new Error(`Unknown TransactionSchedulingTag: ${tag}`);\n    }\n  }\n}\n","import isNull from 'lodash/isNull';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { concat } from '@ethersproject/bytes';\n\nimport { jsonMember, jsonObject, TypedJSON } from 'typedjson';\nimport { Hash } from './key';\nimport {\n  CLTypeOption,\n  CLTypeUInt32,\n  CLValue,\n  CLValueOption,\n  CLValueString\n} from './clvalue';\nimport { ExecutableDeployItem } from './ExecutableDeployItem';\nimport { CalltableSerialization } from './CalltableSerialization';\nimport {\n  byteArrayJsonDeserializer,\n  byteArrayJsonSerializer\n} from './SerializationUtils';\n\n/**\n * Represents a runtime environment for Casper transactions.\n * This class distinguishes between different versions of the Casper Virtual Machine (VM).\n */\n@jsonObject\nexport class TransactionRuntime {\n  /**\n   * Internal tag representing Casper VM Version 1.\n   */\n  private static readonly VM_CASPER_V1_TAG = 0;\n\n  /**\n   * Internal tag representing Casper VM Version 2.\n   */\n  private static readonly VM_CASPER_V2_TAG = 1;\n\n  /**\n   * The tag used to identify the current VM version.\n   */\n  private _tag: number = TransactionRuntime.VM_CASPER_V1_TAG;\n\n  /**\n   * The index of the field used for tag serialization.\n   */\n  private static readonly TAG_FIELD_INDEX = 0;\n\n  /**\n   * Creates an instance of `TransactionRuntime` from a JSON string.\n   *\n   * @param json - The JSON string representing the type of the transaction runtime.\n   * @returns A `TransactionRuntime` instance matching the specified type.\n   * @throws Will throw an error if the provided JSON does not match known VM versions.\n   */\n  public static fromJSON(json: string): TransactionRuntime {\n    switch (json) {\n      case 'VmCasperV1':\n        return TransactionRuntime.vmCasperV1();\n      case 'VmCasperV2':\n        return TransactionRuntime.vmCasperV2();\n      default:\n        throw new Error(`Unknown TransactionRuntime '${json}'`);\n    }\n  }\n\n  /**\n   * Serializes the current `TransactionRuntime` to a JSON string.\n   *\n   * @returns A JSON string representing the type of the transaction runtime.\n   * @throws Will throw an error if the tag does not match known VM versions.\n   */\n  public toJSON(): string {\n    switch (this._tag) {\n      case TransactionRuntime.VM_CASPER_V1_TAG:\n        return 'VmCasperV1';\n      case TransactionRuntime.VM_CASPER_V2_TAG:\n        return 'VmCasperV2';\n      default:\n        throw new Error(`Unknown TransactionRuntime '${this._tag}'`);\n    }\n  }\n\n  /**\n   * Creates a new instance representing the Casper Version 1 Virtual Machine.\n   *\n   * @returns A `TransactionRuntime` instance configured for VM Version 1.\n   */\n  public static vmCasperV1(): TransactionRuntime {\n    const instance = new TransactionRuntime();\n    instance._tag = TransactionRuntime.VM_CASPER_V1_TAG;\n    return instance;\n  }\n\n  /**\n   * Creates a new instance representing the Casper Version 2 Virtual Machine.\n   *\n   * @returns A `TransactionRuntime` instance configured for VM Version 2.\n   */\n  public static vmCasperV2(): TransactionRuntime {\n    const instance = new TransactionRuntime();\n    instance._tag = TransactionRuntime.VM_CASPER_V2_TAG;\n    return instance;\n  }\n\n  /**\n   * Serializes the current `TransactionRuntime` to a byte array.\n   *\n   * @returns A `Uint8Array` containing the serialized transaction runtime data.\n   */\n  public toBytes(): Uint8Array {\n    return new CalltableSerialization()\n      .addField(TransactionRuntime.TAG_FIELD_INDEX, Uint8Array.of(this._tag))\n      .toBytes();\n  }\n}\n\n/**\n * Represents the invocation target for a transaction identified by a package hash.\n */\n@jsonObject\nexport class ByPackageHashInvocationTarget {\n  /**\n   * The address of the package in the form of a hash.\n   */\n  @jsonMember({\n    name: 'addr',\n    constructor: Hash,\n    deserializer: json => Hash.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  addr: Hash;\n\n  /**\n   * The version of the package, if specified.\n   */\n  @jsonMember({ name: 'version', isRequired: false, constructor: Number })\n  version?: number;\n\n  public toBytes(): Uint8Array {\n    const calltableSerialization = new CalltableSerialization();\n\n    const versionBytes = this.version\n      ? CLValue.newCLOption(\n          CLValue.newCLUInt32(BigNumber.from(this.version))\n        ).bytes()\n      : new CLValueOption(null, new CLTypeOption(CLTypeUInt32)).bytes();\n\n    calltableSerialization.addField(0, Uint8Array.of(2));\n    calltableSerialization.addField(1, this.addr.toBytes());\n    calltableSerialization.addField(2, versionBytes);\n\n    return calltableSerialization.toBytes();\n  }\n}\n\n/**\n * Represents the invocation target for a transaction identified by a package name.\n */\n@jsonObject\nexport class ByPackageNameInvocationTarget {\n  /**\n   * The name of the package.\n   */\n  @jsonMember({ name: 'name', constructor: String })\n  name: string;\n\n  /**\n   * The version of the package, if specified.\n   */\n  @jsonMember({ name: 'version', isRequired: false, constructor: Number })\n  version?: number;\n\n  public toBytes(): Uint8Array {\n    const calltableSerialization = new CalltableSerialization();\n\n    const versionBytes = this.version\n      ? CLValue.newCLOption(\n          CLValue.newCLUInt32(BigNumber.from(this.version))\n        ).bytes()\n      : new CLValueOption(null, new CLTypeOption(CLTypeUInt32)).bytes();\n\n    calltableSerialization.addField(0, Uint8Array.of(3));\n    calltableSerialization.addField(1, CLValue.newCLString(this.name).bytes());\n    calltableSerialization.addField(2, versionBytes);\n\n    return calltableSerialization.toBytes();\n  }\n}\n\n/**\n * Represents a transaction invocation target, which can be one of the following:\n * - By hash\n * - By name\n * - By package hash\n * - By package name\n */\n@jsonObject\nexport class TransactionInvocationTarget {\n  /**\n   * Invocation target by hash, if specified.\n   */\n  @jsonMember({\n    name: 'ByHash',\n    isRequired: false,\n    constructor: Hash,\n    deserializer: json => {\n      if (!json) return;\n      return Hash.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  byHash?: Hash;\n\n  /**\n   * Invocation target by name, if specified.\n   */\n  @jsonMember({ name: 'ByName', isRequired: false, constructor: String })\n  byName?: string;\n\n  /**\n   * Invocation target by package hash, if specified.\n   */\n  @jsonMember({\n    name: 'ByPackageHash',\n    isRequired: false,\n    constructor: ByPackageHashInvocationTarget\n  })\n  byPackageHash?: ByPackageHashInvocationTarget;\n\n  /**\n   * Invocation target by package name, if specified.\n   */\n  @jsonMember({\n    name: 'ByPackageName',\n    isRequired: false,\n    constructor: ByPackageNameInvocationTarget\n  })\n  byPackageName?: ByPackageNameInvocationTarget;\n\n  public toBytes(): Uint8Array {\n    if (this.byHash) {\n      const calltableSerializer = new CalltableSerialization();\n      calltableSerializer.addField(0, Uint8Array.of(0));\n      calltableSerializer.addField(1, this.byHash.toBytes());\n      return calltableSerializer.toBytes();\n    } else if (this.byName) {\n      const calltableSerializer = new CalltableSerialization();\n      calltableSerializer.addField(0, Uint8Array.of(1));\n      calltableSerializer.addField(1, CLValue.newCLString(this.byName).bytes());\n      return calltableSerializer.toBytes();\n    } else if (this.byPackageHash) {\n      return this.byPackageHash.toBytes();\n    } else if (this.byPackageName) {\n      return this.byPackageName.toBytes();\n    }\n\n    throw new Error(\n      'Can not convert TransactionInvocationTarget to bytes. Missing values from initialization'\n    );\n  }\n\n  /**\n   * Deserializes a `Uint8Array` into a `TransactionInvocationTarget` instance.\n   *\n   * This method reconstructs a `TransactionInvocationTarget` object from its serialized byte array representation.\n   * The type of invocation target is determined by the tag extracted from the serialized data.\n   *\n   * @param bytes - The serialized byte array representing a `TransactionInvocationTarget`.\n   * @returns A deserialized `TransactionInvocationTarget` instance.\n   * @throws Error - If the byte array is invalid, missing required fields, or contains an unrecognized tag.\n   *\n   * ### Tags and Their Associated Targets:\n   * - `0`: Represents an invocation target identified by a hash (`ByHash`).\n   * - `1`: Represents an invocation target identified by a name (`ByName`).\n   * - `2`: Represents an invocation target identified by a package hash and an optional version (`ByPackageHash`).\n   * - `3`: Represents an invocation target identified by a package name and an optional version (`ByPackageName`).\n   *\n   * ### Example\n   * ```typescript\n   * const bytes = new Uint8Array([...]); // Provide valid TransactionInvocationTarget bytes\n   * const invocationTarget = TransactionInvocationTarget.fromBytes(bytes);\n   * console.log(invocationTarget); // Parsed TransactionInvocationTarget instance\n   * ```\n   */\n  static fromBytes(bytes: Uint8Array): TransactionInvocationTarget {\n    const calltable = CalltableSerialization.fromBytes(bytes);\n\n    const tagBytes = calltable.getField(0);\n    if (!tagBytes || tagBytes.length !== 1) {\n      throw new Error(\n        'Invalid or missing tag in serialized TransactionInvocationTarget'\n      );\n    }\n    const tag = tagBytes[0];\n    const invocationTarget = new TransactionInvocationTarget();\n\n    switch (tag) {\n      case 0: {\n        const hashBytes = calltable.getField(1);\n        if (!hashBytes) {\n          throw new Error('Missing hash field for ByHash target');\n        }\n        invocationTarget.byHash = Hash.fromBytes(hashBytes).result;\n        return invocationTarget;\n      }\n\n      case 1: {\n        const nameBytes = calltable.getField(1);\n        if (!nameBytes) {\n          throw new Error('Missing name field for ByName target');\n        }\n        invocationTarget.byName = CLValueString.fromBytes(\n          nameBytes\n        ).result.toString();\n        return invocationTarget;\n      }\n\n      case 2: {\n        const packageHashBytes = calltable.getField(1);\n        const versionBytes = calltable.getField(2);\n\n        if (!packageHashBytes || !versionBytes) {\n          throw new Error('Missing fields for ByPackageHash target');\n        }\n\n        const packageHash = Hash.fromBytes(packageHashBytes);\n        const version = CLValueOption.fromBytes(\n          versionBytes,\n          new CLTypeOption(CLTypeUInt32)\n        ).result.toString();\n        const byPackageHash = new ByPackageHashInvocationTarget();\n        byPackageHash.addr = packageHash.result;\n        byPackageHash.version = BigNumber.from(version).toNumber();\n        invocationTarget.byPackageHash = byPackageHash;\n        return invocationTarget;\n      }\n\n      case 3: {\n        const nameBytes = calltable.getField(1);\n        const versionBytes = calltable.getField(2);\n\n        if (!nameBytes || !versionBytes) {\n          throw new Error('Missing fields for ByPackageName target');\n        }\n\n        const name = CLValueString.fromBytes(nameBytes).result.toString();\n        const version = CLValueOption.fromBytes(\n          versionBytes,\n          new CLTypeOption(CLTypeUInt32)\n        ).result.toString();\n        const byPackageName = new ByPackageNameInvocationTarget();\n        byPackageName.version = BigNumber.from(version).toNumber();\n        byPackageName.name = name;\n        invocationTarget.byPackageName = byPackageName;\n        return invocationTarget;\n      }\n\n      default:\n        throw new Error(`Unknown TransactionInvocationTarget tag: ${tag}`);\n    }\n  }\n}\n\n/**\n * Represents a stored target, which includes both the invocation target and runtime.\n */\n@jsonObject\nexport class StoredTarget {\n  /**\n   * The invocation target for the stored transaction.\n   */\n  @jsonMember({ name: 'id', constructor: TransactionInvocationTarget })\n  id: TransactionInvocationTarget;\n\n  /**\n   * The runtime associated with the stored transaction.\n   */\n  @jsonMember({\n    name: 'runtime',\n    constructor: TransactionRuntime,\n    deserializer: json => {\n      if (!json) return;\n      return TransactionRuntime.fromJSON(json);\n    },\n    serializer: (value: TransactionRuntime) => value.toJSON()\n  })\n  runtime: TransactionRuntime;\n\n  public toBytes() {\n    const calltableSerializer = new CalltableSerialization();\n    calltableSerializer.addField(0, Uint8Array.of(1));\n    calltableSerializer.addField(1, this.id.toBytes());\n    calltableSerializer.addField(2, this.runtime.toBytes());\n\n    return calltableSerializer.toBytes();\n  }\n}\n\n/**\n * Represents a session target, which includes both the module bytes and runtime.\n */\n@jsonObject\nexport class SessionTarget {\n  /**\n   * The module bytes associated with the session target.\n   */\n  @jsonMember({\n    name: 'module_bytes',\n    constructor: Uint8Array,\n    deserializer: byteArrayJsonDeserializer,\n    serializer: byteArrayJsonSerializer\n  })\n  moduleBytes: Uint8Array;\n\n  /**\n   * The runtime associated with the session target.\n   */\n  @jsonMember({\n    name: 'runtime',\n    constructor: TransactionRuntime,\n    deserializer: json => {\n      if (!json) return;\n      return TransactionRuntime.fromJSON(json);\n    },\n    serializer: (value: TransactionRuntime) => value.toJSON()\n  })\n  runtime: TransactionRuntime;\n\n  /**\n   * The runtime associated with the session target.\n   */\n  @jsonMember({ name: 'is_install_upgrade', constructor: Boolean })\n  isInstallUpgrade: boolean;\n\n  public toBytes(): Uint8Array {\n    const moduleBytesLength = new Uint8Array(\n      new Uint32Array([this.moduleBytes.length]).buffer\n    );\n\n    const calltableSerializer = new CalltableSerialization();\n    calltableSerializer.addField(0, Uint8Array.of(2));\n    calltableSerializer.addField(\n      1,\n      new Uint8Array([this.isInstallUpgrade ? 0x01 : 0x00])\n    );\n    calltableSerializer.addField(2, this.runtime.toBytes());\n    calltableSerializer.addField(\n      3,\n      concat([moduleBytesLength, this.moduleBytes])\n    );\n\n    return calltableSerializer.toBytes();\n  }\n}\n\n/**\n * Represents a transaction target, which could be one of the following types:\n * - Native (no specific target)\n * - Stored (contract or stored item target)\n * - Session (session-based target)\n */\n@jsonObject\nexport class TransactionTarget {\n  /**\n   * Native transaction target, representing a transaction with no specific target.\n   */\n  @jsonMember({ constructor: Object, name: 'Native' })\n  native?: object;\n\n  /**\n   * Stored transaction target, representing a transaction that targets a stored contract or item.\n   */\n  @jsonMember({ name: 'Stored', constructor: StoredTarget })\n  stored?: StoredTarget;\n\n  /**\n   * Session transaction target, representing a session-based transaction.\n   */\n  @jsonMember({ name: 'Session', constructor: SessionTarget })\n  session?: SessionTarget;\n\n  /**\n   * Constructs a `TransactionTarget` instance with the specified values for native, stored, or session targets.\n   *\n   * @param native The native transaction target, if applicable.\n   * @param stored The stored transaction target, if applicable.\n   * @param session The session transaction target, if applicable.\n   */\n  constructor(native?: object, stored?: StoredTarget, session?: SessionTarget) {\n    this.native = native;\n    this.stored = stored;\n    this.session = session;\n  }\n\n  /**\n   * Serializes the `TransactionTarget` into a byte array.\n   *\n   * @returns A `Uint8Array` representing the serialized transaction target.\n   */\n  toBytes(): Uint8Array {\n    if (this.native) {\n      const calltableSerializer = new CalltableSerialization();\n      calltableSerializer.addField(0, Uint8Array.of(0));\n\n      return calltableSerializer.toBytes();\n    } else if (this.stored) {\n      return this.stored.toBytes();\n    } else if (this.session) {\n      return this.session.toBytes();\n    }\n\n    throw new Error(\n      'Can not convert TransactionTarget to bytes. Missing values ( native | stored | session ) from initialization'\n    );\n  }\n\n  /**\n   * Deserializes a `TransactionTarget` from a JSON object.\n   *\n   * @param json The JSON object to deserialize.\n   * @returns A `TransactionTarget` instance.\n   * @throws Error if the JSON object format is invalid.\n   */\n  static fromJSON(json: any): TransactionTarget {\n    const target = new TransactionTarget();\n\n    if (typeof json === 'string' && json === 'Native') {\n      target.native = {};\n    } else if (json.Stored) {\n      const serializer = new TypedJSON(StoredTarget);\n      target.stored = serializer.parse(json.Stored);\n    } else if (json.Session) {\n      const serializer = new TypedJSON(SessionTarget);\n      target.session = serializer.parse(json.Session);\n    }\n\n    return target;\n  }\n\n  /**\n   * Converts the `TransactionTarget` into a JSON-compatible format.\n   *\n   * @returns The JSON representation of the `TransactionTarget`.\n   * @throws Error if the target type is unknown.\n   */\n  toJSON(): any {\n    if (this.native !== undefined) {\n      return 'Native';\n    } else if (this.stored !== undefined) {\n      const serializer = new TypedJSON(StoredTarget);\n      return {\n        Stored: serializer.toPlainJson(this.stored)\n      };\n    } else if (this.session !== undefined) {\n      const serializer = new TypedJSON(SessionTarget);\n      return {\n        Session: serializer.toPlainJson(this.session)\n      };\n    } else {\n      throw new Error('unknown target type');\n    }\n  }\n\n  /**\n   * Creates a new `TransactionTarget` from a session-based transaction.\n   *\n   * @param session The `ExecutableDeployItem` that defines the session-based transaction.\n   * @returns A new `TransactionTarget` instance derived from the session.\n   */\n  public static newTransactionTargetFromSession(\n    session: ExecutableDeployItem\n  ): TransactionTarget {\n    const transactionTarget = new TransactionTarget();\n    if (session.transfer !== undefined) {\n      transactionTarget.native = {};\n      return transactionTarget;\n    }\n\n    if (session.moduleBytes !== undefined) {\n      const sessionTarget = new SessionTarget();\n      sessionTarget.moduleBytes = session.moduleBytes.moduleBytes;\n      sessionTarget.runtime = TransactionRuntime.vmCasperV1();\n\n      transactionTarget.session = sessionTarget;\n      return transactionTarget;\n    }\n\n    if (session.storedContractByHash !== undefined) {\n      const storedTarget = new StoredTarget();\n      const invocationTarget = new TransactionInvocationTarget();\n      invocationTarget.byHash = session.storedContractByHash.hash.hash;\n      storedTarget.runtime = TransactionRuntime.vmCasperV1();\n      storedTarget.id = invocationTarget;\n\n      transactionTarget.stored = storedTarget;\n      return transactionTarget;\n    }\n\n    if (session.storedContractByName !== undefined) {\n      const storedTarget = new StoredTarget();\n      const invocationTarget = new TransactionInvocationTarget();\n      invocationTarget.byName = session.storedContractByName.name;\n\n      storedTarget.runtime = TransactionRuntime.vmCasperV1();\n      storedTarget.id = invocationTarget;\n\n      transactionTarget.stored = storedTarget;\n\n      return transactionTarget;\n    }\n\n    if (session.storedVersionedContractByHash !== undefined) {\n      let version: number | undefined;\n      if (\n        session.storedVersionedContractByHash.version !== undefined &&\n        !isNull(session.storedVersionedContractByHash.version)\n      ) {\n        const versionNum = parseInt(\n          session.storedVersionedContractByHash.version.toString(),\n          10\n        );\n        if (!isNaN(versionNum)) {\n          version = versionNum;\n        }\n      }\n\n      const packageHashInvocationTarget = new ByPackageHashInvocationTarget();\n      packageHashInvocationTarget.addr =\n        session.storedVersionedContractByHash.hash.hash;\n      packageHashInvocationTarget.version = version;\n\n      const invocationTarget = new TransactionInvocationTarget();\n      invocationTarget.byPackageHash = packageHashInvocationTarget;\n\n      const storedTarget = new StoredTarget();\n      storedTarget.runtime = TransactionRuntime.vmCasperV1();\n      storedTarget.id = invocationTarget;\n\n      transactionTarget.stored = storedTarget;\n\n      return transactionTarget;\n    }\n\n    if (session.storedVersionedContractByName !== undefined) {\n      let version: number | undefined;\n      if (\n        session.storedVersionedContractByName.version !== undefined &&\n        !isNull(session.storedVersionedContractByName.version)\n      ) {\n        const versionNum = parseInt(\n          session.storedVersionedContractByName.version.toString(),\n          10\n        );\n        if (!isNaN(versionNum)) {\n          version = versionNum;\n        }\n      }\n\n      const packageNameInvocationTarget = new ByPackageNameInvocationTarget();\n      packageNameInvocationTarget.name =\n        session.storedVersionedContractByName.name;\n      packageNameInvocationTarget.version = version;\n\n      const invocationTarget = new TransactionInvocationTarget();\n      invocationTarget.byPackageName = packageNameInvocationTarget;\n\n      const storedTarget = new StoredTarget();\n      storedTarget.runtime = TransactionRuntime.vmCasperV1();\n      storedTarget.id = invocationTarget;\n\n      transactionTarget.stored = storedTarget;\n\n      return transactionTarget;\n    }\n\n    return new TransactionTarget();\n  }\n}\n","import { jsonMember, jsonObject } from 'typedjson';\n\nimport { InitiatorAddr } from './InitiatorAddr';\nimport { Duration, Timestamp } from './Time';\nimport { PricingMode } from './PricingMode';\nimport { Args, NamedArg } from './Args';\nimport { TransactionTarget } from './TransactionTarget';\nimport { TransactionEntryPoint } from './TransactionEntryPoint';\nimport { TransactionScheduling } from './TransactionScheduling';\nimport { CalltableSerialization } from './CalltableSerialization';\nimport { deserializeArgs, serializeArgs } from './SerializationUtils';\nimport { CLValue } from './clvalue';\nimport {\n  expandBuffer,\n  writeBytes,\n  writeInteger,\n  writeUShort\n} from './ByteConverters';\n\n/**\n * Interface representing the parameters required to build a `TransactionV1Payload`.\n * Contains all necessary data to construct a valid V1 transaction payload.\n */\ninterface ITransactionPayloadBuildParams {\n  /**\n   * The address of the transaction initiator.\n   */\n  initiatorAddr: InitiatorAddr;\n\n  /**\n   * Arguments for the transaction.\n   */\n  args: Args;\n\n  /**\n   * The time-to-live (TTL) duration of the transaction.\n   */\n  ttl: Duration;\n\n  /**\n   * Entry point for the transaction execution.\n   */\n  entryPoint: TransactionEntryPoint;\n\n  /**\n   * Pricing mode for the transaction.\n   */\n  pricingMode: PricingMode;\n\n  /**\n   * Timestamp indicating when the transaction was created.\n   */\n  timestamp: Timestamp;\n\n  /**\n   * Target destination of the transaction.\n   */\n  transactionTarget: TransactionTarget;\n\n  /**\n   * Scheduling details for the transaction.\n   */\n  scheduling: TransactionScheduling;\n\n  /**\n   * Name of the chain the transaction should be executed on.\n   */\n  chainName: string;\n}\n\n/**\n * Class representing a collection of fields used in transaction serialization.\n * This class handles serialization and deserialization of transaction data fields.\n */\n@jsonObject\nexport class PayloadFields {\n  /**\n   * Arguments for the transaction.\n   */\n  @jsonMember(() => Args, {\n    deserializer: deserializeArgs,\n    serializer: (args: Args) => serializeArgs(args, true)\n  })\n  public args: Args;\n\n  /**\n   * Target destination of the transaction.\n   */\n  @jsonMember({\n    name: 'target',\n    constructor: TransactionTarget,\n    deserializer: json => TransactionTarget.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  public target: TransactionTarget;\n\n  /**\n   * Entry point for the transaction execution.\n   */\n  @jsonMember({\n    name: 'entry_point',\n    constructor: TransactionEntryPoint,\n    deserializer: json => TransactionEntryPoint.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  public entryPoint: TransactionEntryPoint;\n\n  /**\n   * Scheduling details for the transaction execution.\n   */\n  @jsonMember({\n    name: 'scheduling',\n    constructor: TransactionScheduling,\n    deserializer: json => TransactionScheduling.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  public scheduling: TransactionScheduling;\n\n  /**\n   * Internal map to store serialized fields, where the key is the field identifier.\n   */\n  private fields: Map<number, Uint8Array> = new Map();\n\n  /**\n   * Builds a `PayloadFields` instance from provided transaction details.\n   *\n   * @param args - Transaction arguments.\n   * @param transactionTarget - Transaction target.\n   * @param transactionEntryPoint - Transaction entry point.\n   * @param transactionScheduling - Scheduling information for the transaction.\n   * @returns A new `PayloadFields` instance.\n   * @throws Error if any of the required parameters are missing or invalid.\n   */\n  public static build(\n    args: Args,\n    transactionTarget: TransactionTarget,\n    transactionEntryPoint: TransactionEntryPoint,\n    transactionScheduling: TransactionScheduling\n  ): PayloadFields {\n    const missingFields = [];\n    if (!args) missingFields.push('args');\n    if (!transactionTarget) missingFields.push('transactionTarget');\n    if (!transactionEntryPoint) missingFields.push('transactionEntryPoint');\n    if (!transactionScheduling) missingFields.push('transactionScheduling');\n\n    if (missingFields.length > 0) {\n      throw new Error(\n        `Failed to build PayloadFields: Missing or invalid fields: ${missingFields.join(\n          ', '\n        )}.`\n      );\n    }\n\n    const payloadFields = new PayloadFields();\n    payloadFields.args = args;\n    payloadFields.target = transactionTarget;\n    payloadFields.entryPoint = transactionEntryPoint;\n    payloadFields.scheduling = transactionScheduling;\n\n    return payloadFields;\n  }\n\n  /**\n   * Adds a serialized field to the payload.\n   *\n   * @param field - Field identifier.\n   * @param value - Serialized value of the field.\n   */\n  public addField(field: number, value: Uint8Array): void {\n    this.fields.set(field, value);\n  }\n\n  /**\n   * Retrieves the value of a specific field.\n   *\n   * @param fieldIndex - Identifier of the field.\n   * @returns Serialized value of the field.\n   */\n  public getFieldValue(fieldIndex: number): Uint8Array | undefined {\n    return this.fields.get(fieldIndex);\n  }\n\n  /**\n   * Serializes the fields of the object into a `Uint8Array` for transmission or storage.\n   *\n   * This method iterates over the `fields` map, serializing each key-value pair. The key is\n   * written as a 16-bit unsigned integer, and the value is written as a sequence of bytes.\n   * The resulting byte array contains all serialized fields in order, preceded by the number of fields.\n   *\n   * @returns A `Uint8Array` containing the serialized representation of the fields.\n   *\n   */\n  toBytes(): Uint8Array {\n    const bufferSize = 1024;\n    let fieldsBytes = new ArrayBuffer(bufferSize);\n    let view = new DataView(fieldsBytes);\n    let offset = 0;\n\n    offset = writeInteger(view, offset, this.fields.size);\n\n    for (const [field, value] of Array.from(this.fields.entries())) {\n      if (offset + 2 > fieldsBytes.byteLength) {\n        fieldsBytes = expandBuffer(fieldsBytes, offset + 2);\n        view = new DataView(fieldsBytes);\n      }\n      offset = writeUShort(view, offset, field);\n\n      if (offset + value.length > fieldsBytes.byteLength) {\n        fieldsBytes = expandBuffer(fieldsBytes, offset + value.length);\n        view = new DataView(fieldsBytes);\n      }\n      offset = writeBytes(view, offset, value);\n    }\n\n    return new Uint8Array(fieldsBytes, 0, offset);\n  }\n}\n\n/**\n * Class representing the payload for a V1 transaction.\n */\n@jsonObject\nexport class TransactionV1Payload {\n  /**\n   * Address of the transaction initiator.\n   */\n  @jsonMember({\n    name: 'initiator_addr',\n    constructor: InitiatorAddr,\n    deserializer: json => InitiatorAddr.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  public initiatorAddr: InitiatorAddr;\n\n  /**\n   * Timestamp when the transaction was created.\n   */\n  @jsonMember({\n    name: 'timestamp',\n    constructor: Timestamp,\n    deserializer: json => Timestamp.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  public timestamp: Timestamp;\n\n  /**\n   * Time-to-live (TTL) duration of the transaction.\n   */\n  @jsonMember({\n    name: 'ttl',\n    constructor: Duration,\n    deserializer: json => Duration.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  public ttl: Duration;\n\n  /**\n   * Pricing mode used for the transaction.\n   */\n  @jsonMember({ name: 'pricing_mode', constructor: PricingMode })\n  public pricingMode: PricingMode;\n\n  /**\n   * Name of the chain the transaction should be executed on.\n   */\n  @jsonMember({ name: 'chain_name', constructor: String })\n  public chainName: string;\n\n  /**\n   * Serialized fields associated with the transaction.\n   */\n  @jsonMember({\n    name: 'fields',\n    constructor: PayloadFields\n  })\n  public fields: PayloadFields;\n\n  /**\n   * Serializes the transaction payload into a `Uint8Array`.\n   *\n   * @returns A `Uint8Array` representing the serialized transaction payload.\n   */\n  toBytes(): Uint8Array {\n    const bufferSize = 1024;\n    let runtimeArgsBuffer = new ArrayBuffer(bufferSize);\n    let runtimeArgsView = new DataView(runtimeArgsBuffer);\n    let offset = 0;\n\n    runtimeArgsView.setUint8(offset, 0x00);\n    offset += 1;\n\n    if (offset + 4 > runtimeArgsBuffer.byteLength) {\n      runtimeArgsBuffer = expandBuffer(runtimeArgsBuffer, offset + 4);\n      runtimeArgsView = new DataView(runtimeArgsBuffer);\n    }\n    runtimeArgsView.setUint32(offset, this.fields.args.args.size, true);\n    offset += 4;\n\n    for (const [name, value] of Array.from(this.fields.args.args.entries())) {\n      const namedArg = new NamedArg(name, value);\n      const argBytes = NamedArg.toBytesWithNamedArg(namedArg);\n\n      if (offset + argBytes.length > runtimeArgsBuffer.byteLength) {\n        runtimeArgsBuffer = expandBuffer(\n          runtimeArgsBuffer,\n          offset + argBytes.length\n        );\n        runtimeArgsView = new DataView(runtimeArgsBuffer);\n      }\n      new Uint8Array(runtimeArgsBuffer, offset).set(argBytes);\n      offset += argBytes.length;\n    }\n\n    const runtimeArgsBytes = new Uint8Array(runtimeArgsBuffer, 0, offset);\n\n    const fields = new PayloadFields();\n\n    const runtimeArgsWithLength = new Uint8Array(runtimeArgsBytes.length + 4);\n    new DataView(runtimeArgsWithLength.buffer).setUint32(\n      0,\n      runtimeArgsBytes.length,\n      true\n    );\n    runtimeArgsWithLength.set(runtimeArgsBytes, 4);\n    fields.addField(0, runtimeArgsWithLength);\n\n    const targetBytes = this.fields.target.toBytes();\n    const targetWithLength = new Uint8Array(targetBytes.length + 4);\n    new DataView(targetWithLength.buffer).setUint32(\n      0,\n      targetBytes.length,\n      true\n    );\n    targetWithLength.set(targetBytes, 4);\n    fields.addField(1, targetWithLength);\n\n    const entryPointBytes = this.fields.entryPoint.toBytes();\n    const entryPointWithLength = new Uint8Array(entryPointBytes.length + 4);\n    new DataView(entryPointWithLength.buffer).setUint32(\n      0,\n      entryPointBytes.length,\n      true\n    );\n    entryPointWithLength.set(entryPointBytes, 4);\n    fields.addField(2, entryPointWithLength);\n\n    const schedulingBytes = this.fields.scheduling.toBytes();\n    const schedulingWithLength = new Uint8Array(schedulingBytes.length + 4);\n    new DataView(schedulingWithLength.buffer).setUint32(\n      0,\n      schedulingBytes.length,\n      true\n    );\n    schedulingWithLength.set(schedulingBytes, 4);\n    fields.addField(3, schedulingWithLength);\n\n    return new CalltableSerialization()\n      .addField(0, this.initiatorAddr.toBytes())\n      .addField(1, CLValue.newCLUint64(this.timestamp.toMilliseconds()).bytes())\n      .addField(2, CLValue.newCLUint64(this.ttl.duration).bytes())\n      .addField(3, CLValue.newCLString(this.chainName).bytes())\n      .addField(4, this.pricingMode.toBytes())\n      .addField(5, fields.toBytes())\n      .toBytes();\n  }\n\n  /**\n   * Constructs a `TransactionV1Payload` instance with specified parameters.\n   *\n   * @param params - Parameters for building the transaction payload.\n   * @returns A new `TransactionV1Payload` instance.\n   */\n  public static build({\n    initiatorAddr,\n    args,\n    ttl,\n    entryPoint,\n    pricingMode,\n    timestamp,\n    transactionTarget,\n    scheduling,\n    chainName\n  }: ITransactionPayloadBuildParams): TransactionV1Payload {\n    const payloadFields = PayloadFields.build(\n      args,\n      transactionTarget,\n      entryPoint,\n      scheduling\n    );\n\n    const payload = new TransactionV1Payload();\n    payload.initiatorAddr = initiatorAddr;\n    payload.ttl = ttl;\n    payload.pricingMode = pricingMode;\n    payload.timestamp = timestamp;\n    payload.chainName = chainName;\n    payload.fields = payloadFields;\n\n    return payload;\n  }\n}\n","import { jsonObject, jsonMember, TypedJSON } from 'typedjson';\nimport { TransactionHash } from './Transaction';\nimport { InitiatorAddr } from './InitiatorAddr';\nimport { AccountHash, Hash, URef } from './key';\nimport { CLValueUInt512 } from './clvalue';\nimport { BigNumber } from '@ethersproject/bignumber';\n\n/**\n * Represents the details of a version 1 (V1) transfer transaction.\n */\n@jsonObject\nexport class TransferV1 {\n  /**\n   * The amount being transferred in a version 1 transaction.\n   */\n  @jsonMember({\n    constructor: CLValueUInt512,\n    deserializer: json => CLValueUInt512.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  public amount: CLValueUInt512;\n\n  /**\n   * The deploy hash associated with the transfer.\n   */\n  @jsonMember({\n    name: 'deploy_hash',\n    constructor: Hash,\n    deserializer: json => Hash.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  public deployHash: Hash;\n\n  /**\n   * The account hash representing the sender of the transfer.\n   */\n  @jsonMember({\n    constructor: AccountHash,\n    deserializer: json => AccountHash.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  public from: AccountHash;\n\n  /**\n   * The gas used for the transfer.\n   */\n  @jsonMember({\n    constructor: Number,\n    deserializer: json => BigNumber.from(json).toNumber(),\n    serializer: value => BigNumber.from(value).toString()\n  })\n  public gas: number;\n\n  /**\n   * The optional ID of the transfer.\n   */\n  @jsonMember({ constructor: Number })\n  public id?: number;\n\n  /**\n   * The source URef (Universal Reference) of the transfer.\n   */\n  @jsonMember({\n    constructor: URef,\n    deserializer: json => URef.fromJSON(json),\n    serializer: (value: URef) => value.toJSON()\n  })\n  public source: URef;\n\n  /**\n   * The target URef (Universal Reference) of the transfer.\n   */\n  @jsonMember({\n    constructor: URef,\n    deserializer: json => URef.fromJSON(json),\n    serializer: (value: URef) => value.toJSON()\n  })\n  public target: URef;\n\n  /**\n   * The optional account hash representing the recipient of the transfer.\n   */\n  @jsonMember({\n    constructor: AccountHash,\n    deserializer: json => {\n      if (!json) return;\n      return AccountHash.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  public to?: AccountHash;\n}\n\n/**\n * Represents the details of a version 2 (V2) transfer transaction.\n */\n@jsonObject\nexport class TransferV2 {\n  /**\n   * The amount being transferred in a version 2 transaction.\n   */\n  @jsonMember({\n    constructor: CLValueUInt512,\n    deserializer: json => CLValueUInt512.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  public amount: CLValueUInt512;\n\n  /**\n   * The transaction hash associated with the transfer.\n   */\n  @jsonMember({ name: 'transaction_hash', constructor: TransactionHash })\n  public transactionHash: TransactionHash;\n\n  /**\n   * The initiator address of the transfer, containing details about the sender.\n   */\n  @jsonMember({\n    constructor: InitiatorAddr,\n    deserializer: json => InitiatorAddr.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  public from: InitiatorAddr;\n\n  /**\n   * The gas used for the transfer.\n   */\n  @jsonMember({\n    constructor: Number,\n    deserializer: json => BigNumber.from(json).toNumber(),\n    serializer: value => BigNumber.from(value).toString()\n  })\n  public gas: number;\n\n  /**\n   * The optional ID of the transfer.\n   */\n  @jsonMember({ constructor: Number })\n  public id?: number;\n\n  /**\n   * The source URef (Universal Reference) of the transfer.\n   */\n  @jsonMember({\n    constructor: URef,\n    deserializer: json => URef.fromJSON(json),\n    serializer: (value: URef) => value.toJSON()\n  })\n  public source: URef;\n\n  /**\n   * The target URef (Universal Reference) of the transfer.\n   */\n  @jsonMember({\n    constructor: URef,\n    deserializer: json => URef.fromJSON(json),\n    serializer: (value: URef) => value.toJSON()\n  })\n  public target: URef;\n\n  /**\n   * The optional account hash representing the recipient of the transfer.\n   */\n  @jsonMember({\n    constructor: AccountHash,\n    deserializer: json => {\n      if (!json) return;\n      return AccountHash.fromJSON(json);\n    },\n    serializer: (value: AccountHash) => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  public to?: AccountHash;\n}\n\n/**\n * Represents a versioned transfer transaction, which can be either version 1 (V1) or version 2 (V2).\n */\n@jsonObject\nclass TransferVersioned {\n  /**\n   * The version 1 transfer details, if applicable.\n   */\n  @jsonMember({ name: 'Version1', constructor: TransferV1 })\n  public Version1?: TransferV1;\n\n  /**\n   * The version 2 transfer details, if applicable.\n   */\n  @jsonMember({ name: 'Version2', constructor: TransferV2 })\n  public Version2?: TransferV2;\n}\n\n/**\n * Represents a transfer transaction, which can be either version 1 (V1) or version 2 (V2).\n */\n@jsonObject\nexport class Transfer {\n  /**\n   * The amount being transferred in the transaction.\n   */\n  @jsonMember({\n    constructor: CLValueUInt512,\n    deserializer: json => CLValueUInt512.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  public amount: CLValueUInt512;\n\n  /**\n   * The transaction hash associated with the transfer.\n   */\n  @jsonMember({ name: 'transaction_hash', constructor: TransactionHash })\n  public transactionHash: TransactionHash;\n\n  /**\n   * The initiator address of the transfer, containing details about the sender.\n   */\n  @jsonMember({\n    constructor: InitiatorAddr,\n    deserializer: json => InitiatorAddr.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  public from: InitiatorAddr;\n\n  /**\n   * The gas used for the transfer.\n   */\n  @jsonMember({\n    constructor: Number,\n    deserializer: json => BigNumber.from(json).toNumber(),\n    serializer: value => BigNumber.from(value).toString()\n  })\n  public gas: number;\n\n  /**\n   * The optional ID of the transfer.\n   */\n  @jsonMember({ constructor: Number })\n  public id?: number;\n\n  /**\n   * The source URef (Universal Reference) of the transfer.\n   */\n  @jsonMember({\n    constructor: URef,\n    deserializer: json => URef.fromJSON(json),\n    serializer: (value: URef) => value.toJSON()\n  })\n  public source: URef;\n\n  /**\n   * The target URef (Universal Reference) of the transfer.\n   */\n  @jsonMember({\n    constructor: URef,\n    deserializer: json => URef.fromJSON(json),\n    serializer: (value: URef) => value.toJSON()\n  })\n  public target: URef;\n\n  /**\n   * The optional account hash representing the recipient of the transfer.\n   */\n  @jsonMember({\n    constructor: AccountHash,\n    deserializer: json => {\n      if (!json) return;\n      return AccountHash.fromJSON(json);\n    },\n    serializer: (value: AccountHash) => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  public to?: AccountHash;\n\n  private originTransferV1?: TransferV1;\n  private originTransferV2?: TransferV2;\n\n  /**\n   * Gets the version 1 transfer details if available.\n   *\n   * @returns The version 1 transfer details, or `undefined` if not present.\n   */\n  public getTransferV1(): TransferV1 | undefined {\n    return this.originTransferV1;\n  }\n\n  /**\n   * Gets the version 2 transfer details if available.\n   *\n   * @returns The version 2 transfer details, or `undefined` if not present.\n   */\n  public getTransferV2(): TransferV2 | undefined {\n    return this.originTransferV2;\n  }\n\n  /**\n   * Deserializes a `Transfer` instance from JSON.\n   * It can handle both version 1 and version 2 transfer formats.\n   *\n   * @param data The JSON data representing the transfer.\n   * @returns A `Transfer` instance.\n   * @throws Error if the transfer format is invalid or unrecognized.\n   */\n  public static fromJSON(data: any): Transfer {\n    const versioned = TypedJSON.parse(data, TransferVersioned);\n\n    if (versioned?.Version2) {\n      const transfer = new Transfer();\n      transfer.amount = versioned.Version2.amount;\n      transfer.transactionHash = versioned.Version2.transactionHash;\n      transfer.from = versioned.Version2.from;\n      transfer.gas = versioned.Version2.gas;\n      transfer.id = versioned.Version2.id;\n      transfer.source = versioned.Version2.source;\n      transfer.target = versioned.Version2.target;\n      transfer.to = versioned.Version2.to;\n      transfer.originTransferV2 = versioned.Version2;\n      return transfer;\n    }\n\n    if (versioned?.Version1) {\n      return Transfer.fromTransferV1(versioned.Version1);\n    }\n\n    const v1Compatible = TypedJSON.parse(data, TransferV1);\n\n    if (v1Compatible) {\n      return Transfer.fromTransferV1(v1Compatible);\n    }\n\n    throw new Error('Incorrect RPC response structure');\n  }\n\n  /**\n   * Creates a `Transfer` instance from version 1 transfer data.\n   *\n   * @param transferV1 The version 1 transfer details.\n   * @returns A `Transfer` instance created from the version 1 data.\n   */\n  private static fromTransferV1(transferV1: TransferV1): Transfer {\n    const transfer = new Transfer();\n    transfer.amount = transferV1.amount;\n    transfer.transactionHash = new TransactionHash(transferV1.deployHash);\n    transfer.from = new InitiatorAddr(undefined, transferV1.from);\n    transfer.gas = transferV1.gas;\n    transfer.id = transferV1.id;\n    transfer.source = transferV1.source;\n    transfer.target = transferV1.target;\n    transfer.to = transferV1.to;\n    transfer.originTransferV1 = transferV1;\n    return transfer;\n  }\n}\n","import { jsonObject, jsonMember, TypedJSON } from 'typedjson';\n\nimport { AccountHash, Key } from './key';\nimport { UnbondingPurse } from './UnbondingPurse';\nimport { AddressableEntity } from './AddressableEntity';\nimport { Package } from './Package';\nimport { BidKind } from './BidKind';\nimport { MessageChecksum, MessageTopicSummary } from './MessageTopic';\nimport { DeployInfo } from './DeployInfo';\nimport { CLValue, CLValueUInt512 } from './clvalue';\nimport { Args } from './Args';\nimport { deserializeArgs, serializeArgs } from './SerializationUtils';\nimport {\n  BidKindRawData,\n  PackageRawData,\n  RawDataMessage,\n  RawDataMessageTopic,\n  RawDataNamedKey,\n  RawUInt512,\n  RawWriteAccount1XTransform,\n  RawWriteAccount2XTransform,\n  RawWriteCLValue,\n  RawWriteCLValueV2,\n  RawWriteContract,\n  RawWriteContractPackage,\n  RawWriteDeployInfo,\n  RawWriteTransferTransform,\n  RawWriteUnbonding,\n  RawWriteWithdrawals,\n  TranformAddressableEntityRawData,\n  WriteTransfer\n} from './TransformRaw';\nimport { Contract } from './Contract';\nimport { ContractPackage } from './ContractPackage';\n\n/**\n * Represents different types of transformation that can be applied.\n * Used for parsing and processing transformation data in a transaction.\n */\n@jsonObject\nexport class TransformKind {\n  private data: any;\n\n  /**\n   * Constructs a new `TransformKind` instance.\n   *\n   * @param data The transformation data as a string.\n   */\n  constructor(data: any) {\n    this.data = data;\n  }\n\n  /**\n   * Getter for transformation data.\n   *\n   * @returns The transformation data.\n   */\n  public get transformationData(): any {\n    return this.data;\n  }\n\n  /**\n   * Creates a `TransformKind` instance from a JSON string.\n   *\n   * @param json The transformation data as a string.\n   * @returns The `TransformKind` instance.\n   */\n  static fromJSON(json: any): TransformKind | undefined {\n    if (!json) {\n      throw new Error('TransformKind: fromJSON on empty string');\n    }\n    return new TransformKind(json);\n  }\n\n  /**\n   * Converts the transformation data into a JSON string.\n   *\n   * @returns The transformation data as a string.\n   */\n  public toJSON(): any {\n    return this.data;\n  }\n\n  /**\n   * Checks if the transformation is a WriteTransfer.\n   *\n   * @returns `true` if the transformation is a WriteTransfer, otherwise `false`.\n   */\n  public isWriteTransfer(): boolean {\n    return this.isTransformation('WriteTransfer');\n  }\n\n  /**\n   * Checks if the transformation is a WriteAccount.\n   *\n   * @returns `true` if the transformation is a WriteAccount, otherwise `false`.\n   */\n  public isWriteAccount(): boolean {\n    return (\n      this.isTransformation('WriteAccount') ||\n      (this.isTransformation('Write') && this.isTransformation('Account'))\n    );\n  }\n\n  /**\n   * Checks if the transformation is a WriteCLValue.\n   *\n   * @returns `true` if the transformation is a WriteCLValue, otherwise `false`.\n   */\n  public isCLValueWrite(): boolean {\n    return this.isTransformation('WriteCLValue');\n  }\n\n  /**\n   * Checks if the transformation is a WriteContract.\n   *\n   * @returns `true` if the transformation is a WriteContract, otherwise `false`.\n   */\n  public isWriteContract(): boolean {\n    /**\n     * v1 compatible check\n     */\n    if (this.isTransformation('WriteContract')) {\n      return true;\n    }\n\n    /**\n     * v2 compatible check\n     */\n    const serializer = new TypedJSON(RawWriteContract);\n    const jsonRes = serializer.parse(this.data);\n\n    return !!jsonRes?.Write?.Contract;\n  }\n\n  /**\n   * Checks if the transformation is a WriteWithdraw.\n   *\n   * @returns `true` if the transformation is a WriteWithdraw, otherwise `false`.\n   */\n  public isWriteWithdraw(): boolean {\n    return this.isTransformation('WriteWithdraw');\n  }\n\n  /**\n   * Checks if the transformation is a WriteUnbonding.\n   *\n   * @returns `true` if the transformation is a WriteUnbonding, otherwise `false`.\n   */\n  public isWriteUnbonding(): boolean {\n    return this.isTransformation('WriteUnbonding');\n  }\n\n  /**\n   * Checks if the transformation is a WriteCLValue.\n   *\n   * @returns `true` if the transformation is a WriteCLValue, otherwise `false`.\n   */\n  public isWriteCLValue(): boolean {\n    return this.isTransformation('CLValue');\n  }\n\n  /**\n   * Checks if the transformation is a WritePackage.\n   *\n   * @returns `true` if the transformation is a WritePackage, otherwise `false`.\n   */\n  public isWritePackage(): boolean {\n    return this.isTransformation('Package');\n  }\n\n  /**\n   * Checks if the transformation is a WriteAddressableEntity.\n   *\n   * @returns `true` if the transformation is a WriteAddressableEntity, otherwise `false`.\n   */\n  public isWriteAddressableEntity(): boolean {\n    return this.isTransformation('AddressableEntity');\n  }\n\n  /**\n   * Checks if the transformation is a WriteBidKind.\n   *\n   * @returns `true` if the transformation is a WriteBidKind, otherwise `false`.\n   */\n  public isWriteBidKind(): boolean {\n    return this.isTransformation('BidKind');\n  }\n\n  /**\n   * Checks if the transformation is a WriteNamedKey.\n   *\n   * @returns `true` if the transformation is a WriteNamedKey, otherwise `false`.\n   */\n  public isWriteNamedKey(): boolean {\n    return this.isTransformation('NamedKey');\n  }\n\n  /**\n   * Checks if the transformation is a WriteMessage.\n   *\n   * @returns `true` if the transformation is a WriteMessage, otherwise `false`.\n   */\n  public isWriteMessage(): boolean {\n    return this.isTransformation('Message');\n  }\n\n  /**\n   * Checks if the transformation is a WriteMessageTopic.\n   *\n   * @returns `true` if the transformation is a WriteMessageTopic, otherwise `false`.\n   */\n  public isWriteMessageTopic(): boolean {\n    return this.isTransformation('MessageTopic');\n  }\n\n  /**\n   * Checks if the transformation is a WriteBid.\n   *\n   * @returns `true` if the transformation is a WriteBid, otherwise `false`.\n   */\n  public isWriteBid(): boolean {\n    return this.isTransformation('WriteBid');\n  }\n\n  /**\n   * Checks if the transformation is an AddUInt512.\n   *\n   * @returns `true` if the transformation is AddUInt512, otherwise `false`.\n   */\n  public isAddUint512(): boolean {\n    return this.isTransformation('AddUInt512');\n  }\n\n  /**\n   * Checks if the transformation is a WriteDeployInfo.\n   *\n   * @returns `true` if the transformation is a WriteDeployInfo, otherwise `false`.\n   */\n  public isWriteDeployInfo(): boolean {\n    return this.isTransformation('WriteDeployInfo');\n  }\n\n  /**\n   * Checks if the transformation is a WriteContractPackage.\n   *\n   * @returns `true` if the transformation is a WriteContractPackage, otherwise `false`.\n   */\n  public isWriteContractPackage(): boolean {\n    /**\n     * v1 compatible check\n     */\n    if (this.isTransformation('WriteContractPackage')) {\n      return true;\n    }\n\n    /**\n     * v2 compatible check\n     */\n    const serializer = new TypedJSON(RawWriteContractPackage);\n    const jsonRes = serializer.parse(this.data);\n\n    return !!jsonRes?.Write?.ContractPackage;\n  }\n\n  /**\n   * Attempts to parse the transformation as a WriteTransfer.\n   *\n   * @returns A `WriteTransfer` object if the data matches, otherwise throw an error`.\n   */\n  public parseAsWriteTransfer(): WriteTransfer {\n    const serializer = new TypedJSON(RawWriteTransferTransform);\n    const jsonRes = serializer.parse(this.data);\n\n    if (!jsonRes || !jsonRes.WriteTransfer) {\n      throw new Error(`Error parsing as WriteTransfer`);\n    }\n\n    return jsonRes.WriteTransfer;\n  }\n  /**\n   * Attempts to parse the transformation as a WriteWithdraw.\n   *\n   * @returns An array of `UnbondingPurse` objects if the data matches, otherwise `[]`.\n   */\n  public parseAsWriteWithdraws(): UnbondingPurse[] {\n    const serializer = new TypedJSON(RawWriteWithdrawals);\n    const jsonRes = serializer.parse(this.data);\n\n    if (!jsonRes || !jsonRes.UnbondingPurses) {\n      return [];\n    }\n\n    return jsonRes.UnbondingPurses;\n  }\n\n  /**\n   * Attempts to parse the transformation as a WriteAddressableEntity.\n   *\n   * @returns An `AddressableEntity` object if the data matches, otherwise throw an error`.\n   */\n  public parseAsWriteAddressableEntity(): AddressableEntity {\n    const serializer = new TypedJSON(TranformAddressableEntityRawData);\n    const jsonRes = serializer.parse(this.data);\n\n    if (!jsonRes?.Write?.AddressableEntity) {\n      throw new Error(`Error parsing as AddressableEntity`);\n    }\n\n    return jsonRes.Write.AddressableEntity;\n  }\n\n  /**\n   * Attempts to parse the transformation as a WritePackage.\n   *\n   * @returns A `Package` object if the data matches, otherwise `throw an error`.\n   */\n  public parseAsWritePackage(): Package {\n    const serializer = new TypedJSON(PackageRawData);\n    const jsonRes = serializer.parse(this.data);\n\n    if (!jsonRes?.Write?.Package) {\n      throw new Error(`Error parsing as Package`);\n    }\n\n    return jsonRes.Write.Package;\n  }\n\n  /**\n   * Attempts to parse the transformation as a WriteBidKind.\n   *\n   * @returns A `BidKind` object if the data matches, otherwise `throw an error`.\n   */\n  public parseAsWriteBidKind(): BidKind {\n    const serializer = new TypedJSON(BidKindRawData);\n    const jsonRes = serializer.parse(this.data);\n\n    if (!jsonRes?.Write?.BidKind) {\n      throw new Error(`Error parsing as BidKind`);\n    }\n\n    return jsonRes.Write.BidKind;\n  }\n\n  /**\n   * Attempts to parse the transformation as a WriteNamedKey.\n   *\n   * @returns A `NamedKeyKind` object if the data matches, otherwise `throw an error`.\n   */\n  public parseAsWriteNamedKey(): NamedKeyKind | null {\n    const serializer = new TypedJSON(RawDataNamedKey);\n    const jsonRes = serializer.parse(this.data);\n\n    if (!jsonRes || !jsonRes.Write || !jsonRes.Write.NamedKey) {\n      throw new Error(`Error parsing as NamedKeyKind`);\n    }\n\n    return jsonRes.Write.NamedKey;\n  }\n\n  /**\n   * Attempts to parse the transformation as a WriteMessage.\n   *\n   * @returns A `MessageChecksum` if the data matches, otherwise `throw an error`.\n   */\n  public parseAsWriteMessage(): MessageChecksum {\n    const serializer = new TypedJSON(RawDataMessage);\n    const jsonRes = serializer.parse(this.data);\n\n    if (!jsonRes || !jsonRes.Write || !jsonRes.Write.Message) {\n      throw new Error(`Error parsing as MessageChecksum`);\n    }\n\n    return jsonRes.Write.Message;\n  }\n\n  /**\n   * Attempts to parse the transformation as a WriteMessageTopic.\n   *\n   * @returns A `MessageTopicSummary` if the data matches, otherwise `throw an error`.\n   */\n  public parseAsWriteMessageTopic(): MessageTopicSummary {\n    const serializer = new TypedJSON(RawDataMessageTopic);\n    const jsonRes = serializer.parse(this.data);\n\n    if (!jsonRes || !jsonRes.Write || !jsonRes.Write.MessageTopic) {\n      throw new Error(`Error parsing as MessageTopicSummary`);\n    }\n\n    return jsonRes.Write.MessageTopic;\n  }\n\n  /**\n   * Attempts to parse the transformation as a WriteUnbonding.\n   *\n   * @returns An array of `UnbondingPurse` objects if the data matches, otherwise `throw an error`.\n   */\n  public parseAsWriteUnbondings(): UnbondingPurse[] | null {\n    const serializer = new TypedJSON(RawWriteUnbonding);\n    const jsonRes = serializer.parse(this.data);\n\n    if (!jsonRes || !jsonRes.UnbondingPurses) {\n      throw new Error(`Error parsing as UnbondingPurse array`);\n    }\n\n    return jsonRes.UnbondingPurses;\n  }\n\n  /**\n   * Attempts to parse the transformation as a UInt512.\n   *\n   * @returns A `CLValueUInt512` object if the data matches, otherwise `throw an error`.\n   */\n  public parseAsUInt512(): CLValueUInt512 {\n    const serializer = new TypedJSON(RawUInt512);\n    const jsonRes = serializer.parse(this.data);\n\n    if (!jsonRes || !jsonRes.UInt512) {\n      throw new Error(`Error parsing as CLValueUInt512`);\n    }\n\n    return jsonRes.UInt512;\n  }\n\n  /**\n   * Attempts to parse the transformation data as a WriteAccount transformation.\n   *\n   * This method supports two JSON formats:\n   *\n   * - **2.x Format:**\n   *   ```json\n   *   {\n   *     \"Write\": {\n   *       \"Account\": {\n   *         \"account_hash\": \"...\"\n   *       }\n   *     }\n   *   }\n   *   ```\n   *   If the parsed `accountHash` is not equal to the zero account hash, this value is returned.\n   *\n   * - **1.x Format:**\n   *   ```json\n   *   {\n   *     \"WriteAccount\": \"...\"\n   *   }\n   *   ```\n   *   If the 2.x format is not matched or the parsed account hash equals the zero hash,\n   *   the method falls back to this format.\n   *\n   * @returns The parsed `AccountHash`.\n   * @throws Error if the transformation data cannot be parsed as a valid WriteAccount.\n   */\n  public parseAsWriteAccount(): AccountHash {\n    const ZERO_ACCOUNT_HASH =\n      'account-hash-0000000000000000000000000000000000000000000000000000000000000000';\n\n    const serializer2x = new TypedJSON(RawWriteAccount2XTransform);\n    const parsed2x = serializer2x.parse(this.data);\n\n    if (\n      parsed2x?.Write?.Account?.accountHash &&\n      parsed2x.Write.Account.accountHash.toPrefixedString() !==\n        ZERO_ACCOUNT_HASH\n    ) {\n      return parsed2x.Write.Account.accountHash;\n    }\n\n    // Fallback: attempt to parse using the 1.x transformation format.\n    const serializer1x = new TypedJSON(RawWriteAccount1XTransform);\n    const parsed1x = serializer1x.parse(this.data);\n\n    if (!parsed1x?.WriteAccount) {\n      throw new Error('Error parsing as WriteAccount');\n    }\n\n    return parsed1x.WriteAccount;\n  }\n  /**\n   * Attempts to parse the transformation as a WriteDeployInfo.\n   *\n   * @returns A `DeployInfo` object if the data matches, otherwise `throw an error`.\n   */\n  public parseAsWriteDeployInfo(): DeployInfo {\n    const serializer = new TypedJSON(RawWriteDeployInfo);\n    const jsonRes = serializer.parse(this.data);\n\n    if (!jsonRes || !jsonRes.WriteDeployInfo) {\n      throw new Error(`Error parsing as DeployInfo`);\n    }\n\n    return jsonRes.WriteDeployInfo;\n  }\n\n  /**\n   * Attempts to parse the transformation as a WriteCLValue.\n   *\n   * @returns The `Args` object if the data matches, otherwise `throw an error`.\n   */\n  public parseAsWriteCLValue(): CLValue {\n    const serializer = new TypedJSON(RawWriteCLValue);\n    const jsonRes = serializer.parse(this.data);\n\n    if (jsonRes && jsonRes.WriteCLValue) {\n      return jsonRes.WriteCLValue;\n    }\n\n    const serializer2 = new TypedJSON(RawWriteCLValueV2);\n    const jsonRes2 = serializer2.parse(this.data);\n\n    if (!jsonRes2 || !jsonRes2.Write || !jsonRes2?.Write.CLValue) {\n      throw new Error(`Error parsing as RawWriteCLValueV2`);\n    }\n\n    return jsonRes2.Write?.CLValue;\n  }\n\n  /**\n   * Attempts to parse the transformation as a WriteContract.\n   *\n   * @returns A `Contract` object if the data matches, otherwise `throw an error`.\n   */\n  public parseAsWriteContract(): Contract {\n    const serializer = new TypedJSON(RawWriteContract);\n    const jsonRes = serializer.parse(this.data);\n\n    if (!jsonRes || !jsonRes.Write?.Contract) {\n      throw new Error(`Error parsing as WriteContract`);\n    }\n\n    return jsonRes.Write.Contract;\n  }\n\n  /**\n   * Attempts to parse the transformation as a WriteContractPackage.\n   *\n   * @returns A `ContractPackage` object if the data matches, otherwise `throw an error`.\n   */\n  public parseAsWriteContractPackage(): ContractPackage {\n    const serializer = new TypedJSON(RawWriteContractPackage);\n    const jsonRes = serializer.parse(this.data);\n\n    if (!jsonRes || !jsonRes.Write?.ContractPackage) {\n      throw new Error(`Error parsing as WriteContractPackage`);\n    }\n\n    return jsonRes.Write.ContractPackage;\n  }\n\n  /**\n   * Recursively checks if any key in the provided object (including nested objects)\n   * contains the specified name.\n   *\n   * @param obj - The object to search through.\n   * @param name - The transformation name to search for within the keys.\n   * @returns true if a key containing the name is found; otherwise, false.\n   */\n  private containsKeyRecursive(obj: any, name: string): boolean {\n    for (const key in obj) {\n      if (key.includes(name)) {\n        return true;\n      }\n      if (typeof obj[key] === 'object' && obj[key] !== null) {\n        if (this.containsKeyRecursive(obj[key], name)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Checks if `TransformKind` has the transformation specified by name.\n   *\n   * @param `name` - transformation name (aka WriteTransfer)\n   * @returns `true` if the transformation is a WriteTransfer, otherwise `false`.\n   */\n  public isTransformation(name: string): boolean {\n    if (typeof this.data === 'string') {\n      return this.data.includes(name);\n    } else if (typeof this.data === 'object' && this.data !== null) {\n      return this.containsKeyRecursive(this.data, name);\n    }\n    return false;\n  }\n}\n\n/**\n * Represents a transformation, which includes a key and a transformation kind.\n */\n@jsonObject\nexport class Transform {\n  /**\n   * The key associated with the transformation.\n   */\n  @jsonMember({\n    name: 'key',\n    constructor: Key,\n    deserializer: (json: string) => {\n      if (!json) return;\n      return Key.newKey(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toPrefixedString();\n    }\n  })\n  public key: Key;\n\n  /**\n   * The kind of transformation being applied.\n   */\n  @jsonMember({\n    name: 'kind',\n    constructor: TransformKind,\n    deserializer: json => {\n      if (!json) return;\n      return TransformKind.fromJSON(json);\n    },\n    serializer: (value: TransformKind) => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  public kind: TransformKind;\n\n  /**\n   * Constructs a new `Transform` instance.\n   *\n   * @param key The key associated with the transformation.\n   * @param kind The kind of transformation.\n   */\n  constructor(key: Key, kind: TransformKind) {\n    this.key = key;\n    this.kind = kind;\n  }\n}\n\n/**\n * Represents a key transformation in a transaction.\n */\n@jsonObject\nexport class TransformKey {\n  /**\n   * The key associated with the transformation.\n   */\n  @jsonMember({\n    name: 'key',\n    constructor: Key,\n    deserializer: (json: string) => {\n      if (!json) return;\n      return Key.newKey(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toPrefixedString();\n    }\n  })\n  public key: Key;\n\n  /**\n   * The transformation kind.\n   */\n  @jsonMember({\n    name: 'transform',\n    constructor: TransformKind,\n    deserializer: json => {\n      if (!json) return;\n      return TransformKind.fromJSON(json);\n    },\n    serializer: (value: TransformKind) => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  public transform: TransformKind;\n}\n\n/**\n * Represents a named key transformation in a transaction.\n */\n@jsonObject\nexport class NamedKeyKind {\n  /**\n   * The named key transformation data represented as `Args`.\n   */\n  @jsonMember(() => Args, {\n    deserializer: deserializeArgs,\n    serializer: (args: Args) => serializeArgs(args, false)\n  })\n  public namedKey: Args;\n\n  /**\n   * The name of the key represented as `Args`.\n   */\n  @jsonMember(() => Args, {\n    deserializer: deserializeArgs,\n    serializer: (args: Args) => serializeArgs(args, false)\n  })\n  public name: Args;\n}\n","import { jsonArrayMember, jsonMember, jsonObject } from 'typedjson';\n\nimport { UnbondingPurse } from './UnbondingPurse';\nimport { NamedKeyKind } from './Transform';\nimport { AddressableEntity } from './AddressableEntity';\nimport { Package } from './Package';\nimport { BidKind } from './BidKind';\nimport { MessageTopicSummary } from './MessageTopic';\nimport { CLValue, CLValueParser, CLValueUInt512 } from './clvalue';\nimport { DeployInfo } from './DeployInfo';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { AccountHash, Hash, URef } from './key';\nimport { Contract } from './Contract';\nimport { ContractPackage } from './ContractPackage';\n\n/**\n * Represents a transfer operation in a transaction.\n */\n@jsonObject\nexport class WriteTransfer {\n  /**\n   * The optional ID of the transfer.\n   */\n  @jsonMember({ name: 'id', constructor: Number, preserveNull: true })\n  public id?: number;\n\n  /**\n   * The recipient of the transfer, represented as an `AccountHash`.\n   */\n  @jsonMember({\n    name: 'to',\n    constructor: AccountHash,\n    preserveNull: true,\n    deserializer: json => {\n      if (!json) return;\n      return AccountHash.fromJSON(json);\n    },\n    serializer: (value: AccountHash) => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  public to?: AccountHash;\n\n  /**\n   * The deploy hash associated with the transfer.\n   */\n  @jsonMember({\n    name: 'deploy_hash',\n    constructor: Hash,\n    deserializer: json => {\n      if (!json) return;\n      return Hash.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  public deployHash: Hash;\n\n  /**\n   * The sender of the transfer, represented as an `AccountHash`.\n   */\n  @jsonMember({\n    name: 'from',\n    constructor: AccountHash,\n    deserializer: json => AccountHash.fromJSON(json),\n    serializer: (value: AccountHash) => value.toJSON()\n  })\n  public from: AccountHash;\n\n  /**\n   * The amount being transferred, represented as a `CLValueUInt512`.\n   */\n  @jsonMember({\n    name: 'amount',\n    constructor: CLValueUInt512,\n    deserializer: json => CLValueUInt512.fromJSON(json),\n    serializer: (value: CLValueUInt512) => value.toJSON()\n  })\n  public amount: CLValueUInt512;\n\n  /**\n   * The source URef (Universal Reference) of the transfer.\n   */\n  @jsonMember({\n    name: 'source',\n    constructor: URef,\n    deserializer: json => URef.fromJSON(json),\n    serializer: (value: URef) => value.toJSON()\n  })\n  public source: URef;\n\n  /**\n   * The target URef (Universal Reference) of the transfer.\n   */\n  @jsonMember({\n    name: 'target',\n    constructor: URef,\n    deserializer: json => URef.fromJSON(json),\n    serializer: (value: URef) => value.toJSON()\n  })\n  public target: URef;\n\n  /**\n   * The gas used for the transfer.\n   */\n  @jsonMember({\n    name: 'gas',\n    constructor: Number,\n    deserializer: json => BigNumber.from(json).toNumber(),\n    serializer: value => BigNumber.from(value).toString()\n  })\n  public gas: number;\n}\n\n/**\n * Represents raw data for a write operation involving withdrawals.\n */\n@jsonObject\nexport class RawWriteWithdrawals {\n  /**\n   * The list of unbonding purses in the withdrawal write operation.\n   */\n  @jsonArrayMember(UnbondingPurse, { name: 'WriteWithdraw' })\n  UnbondingPurses?: UnbondingPurse[];\n}\n\n/**\n * Represents raw data for a write transfer operation.\n */\n@jsonObject\nexport class RawWriteTransferTransform {\n  /**\n   * The write transfer operation.\n   */\n  @jsonMember({ name: 'WriteTransfer', constructor: WriteTransfer })\n  WriteTransfer?: WriteTransfer;\n}\n\n/**\n * Represents a transform for an addressable entity.\n */\n@jsonObject\nexport class TranformAddressableEntity {\n  /**\n   * The addressable entity involved in the transform.\n   */\n  @jsonMember({ name: 'AddressableEntity', constructor: AddressableEntity })\n  AddressableEntity?: AddressableEntity;\n}\n\n/**\n * Represents raw data for a write operation on an addressable entity.\n */\n@jsonObject\nexport class TranformAddressableEntityRawData {\n  /**\n   * The write operation containing an addressable entity transform.\n   */\n  @jsonMember({ name: 'Write', constructor: TranformAddressableEntity })\n  Write?: TranformAddressableEntity;\n}\n\n/**\n * Represents transform data for a package entity.\n */\n@jsonObject\nexport class TranformPackageData {\n  /**\n   * The package data in the transform.\n   */\n  @jsonMember({ name: 'Package', constructor: Package })\n  Package?: Package;\n}\n\n/**\n * Represents raw data for a write operation involving a package.\n */\n@jsonObject\nexport class PackageRawData {\n  /**\n   * The write operation containing package data.\n   */\n  @jsonMember({ name: 'Write', constructor: TranformPackageData })\n  Write?: TranformPackageData;\n}\n\n/**\n * Represents transform data for a bid kind.\n */\n@jsonObject\nexport class TranformBidKindData {\n  /**\n   * The bid kind data in the transform.\n   */\n  @jsonMember({ name: 'BidKind', constructor: BidKind })\n  BidKind?: BidKind;\n}\n\n/**\n * Represents raw data for a write operation on a bid kind.\n */\n@jsonObject\nexport class BidKindRawData {\n  /**\n   * The write operation containing bid kind data.\n   */\n  @jsonMember({ name: 'Write', constructor: TranformBidKindData })\n  Write?: TranformBidKindData;\n}\n\n/**\n * Represents a write operation involving a named key.\n */\n@jsonObject\nclass WriteNamedKey {\n  /**\n   * The named key in the write operation.\n   */\n  @jsonMember(() => NamedKeyKind, { name: 'NamedKey' })\n  NamedKey?: NamedKeyKind;\n}\n\n/**\n * Represents raw data for a write operation on a named key.\n */\n@jsonObject\nexport class RawDataNamedKey {\n  /**\n   * The write operation containing the named key data.\n   */\n  @jsonMember({ constructor: WriteNamedKey, name: 'Write' })\n  Write?: WriteNamedKey;\n}\n\n/**\n * Represents a write operation involving a message.\n */\n@jsonObject\nexport class WriteMessage {\n  /**\n   * The message content in the write operation.\n   */\n  @jsonMember({ constructor: String, name: 'Message' })\n  Message?: string;\n}\n\n/**\n * Represents raw data for a write operation on a message.\n */\n@jsonObject\nexport class RawDataMessage {\n  /**\n   * The write operation containing message data.\n   */\n  @jsonMember({ constructor: WriteMessage, name: 'Write' })\n  Write?: WriteMessage;\n}\n\n/**\n * Represents a write operation involving a message topic.\n */\n@jsonObject\nexport class WriteMessageTopic {\n  /**\n   * The message topic in the write operation.\n   */\n  @jsonMember({ constructor: MessageTopicSummary, name: 'MessageTopic' })\n  MessageTopic?: MessageTopicSummary;\n}\n\n/**\n * Represents raw data for a write operation on a message topic.\n */\n@jsonObject\nexport class RawDataMessageTopic {\n  /**\n   * The write operation containing message topic data.\n   */\n  @jsonMember({ constructor: WriteMessageTopic, name: 'Write' })\n  Write?: WriteMessageTopic;\n}\n\n/**\n * Represents raw write data for unbonding purses.\n */\n@jsonObject\nexport class RawWriteUnbonding {\n  /**\n   * The list of unbonding purses in the write operation.\n   */\n  @jsonArrayMember(UnbondingPurse, { name: 'WriteUnbonding' })\n  UnbondingPurses?: UnbondingPurse[];\n}\n\n/**\n * Represents raw write data for a UInt512 value.\n */\n@jsonObject\nexport class RawUInt512 {\n  /**\n   * The UInt512 value in the write operation.\n   */\n  @jsonMember({\n    name: 'AddUInt512',\n    constructor: CLValueUInt512,\n    deserializer: json => {\n      if (!json) return;\n      return CLValueUInt512.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  UInt512?: CLValueUInt512;\n}\n\n/**\n * Represents raw write data for deploying information.\n */\n@jsonObject\nexport class RawWriteDeployInfo {\n  /**\n   * The deploy information in the write operation.\n   */\n  @jsonMember({ constructor: DeployInfo, name: 'WriteDeployInfo' })\n  WriteDeployInfo?: DeployInfo;\n}\n\n/**\n * Represents raw write data for a CLValue.\n * Used for serializing and deserializing the arguments of a CLValue write operation.\n */\n@jsonObject\nexport class RawWriteCLValue {\n  /**\n   * The write operation on a CLValue represented as `Args`.\n   */\n  @jsonMember(() => CLValue, {\n    deserializer: json => {\n      if (!json) return;\n      return CLValueParser.fromJSON(json);\n    },\n    serializer: (value: CLValue) => {\n      if (!value) return;\n      return CLValueParser.toJSON(value);\n    },\n    name: 'WriteCLValue'\n  })\n  WriteCLValue?: CLValue;\n}\n\n/**\n * Represents a write operation in a transaction.\n */\n@jsonObject\nexport class WriteCLValue {\n  /**\n   * The CLValue write operation represented as `Args`.\n   */\n  @jsonMember(() => CLValue, {\n    deserializer: json => {\n      if (!json) return;\n      return CLValueParser.fromJSON(json);\n    },\n    serializer: (value: CLValue) => {\n      if (!value) return;\n      return CLValueParser.toJSON(value);\n    },\n    name: 'CLValue'\n  })\n  CLValue?: CLValue;\n}\n\n/**\n * Represents raw write data for version 2 of a CLValue.\n */\n@jsonObject\nexport class RawWriteCLValueV2 {\n  /**\n   * The write operation represented as `Write`.\n   */\n  @jsonMember({\n    name: 'Write',\n    constructor: WriteCLValue\n  })\n  Write?: WriteCLValue;\n}\n\n@jsonObject\nexport class WriteContract {\n  @jsonMember({\n    name: 'Contract',\n    constructor: Contract\n  })\n  Contract?: Contract;\n}\n\n@jsonObject\nexport class RawWriteContract {\n  @jsonMember({\n    name: 'Write',\n    constructor: WriteContract\n  })\n  Write?: WriteContract;\n}\n\n@jsonObject\nexport class WriteContractPackage {\n  @jsonMember({\n    name: 'ContractPackage',\n    constructor: ContractPackage\n  })\n  ContractPackage?: ContractPackage;\n}\n\n@jsonObject\nexport class RawWriteContractPackage {\n  @jsonMember({\n    name: 'Write',\n    constructor: WriteContractPackage\n  })\n  Write?: WriteContractPackage;\n}\n\n/**\n * Represents the inner Account object in a 2.x Write transformation.\n */\n@jsonObject\nexport class RawWriteAccount2XTransformAccount {\n  @jsonMember({\n    name: 'account_hash',\n    constructor: AccountHash,\n    deserializer: json => {\n      if (!json) return;\n      return AccountHash.fromJSON(json);\n    },\n    serializer: (value: AccountHash) => {\n      return value.toJSON();\n    }\n  })\n  accountHash: AccountHash;\n}\n\n/**\n * Represents the nested Write.Account object in a 2.x Write transformation.\n */\n@jsonObject\nexport class RawWriteAccount2XTransformWrite {\n  @jsonMember({\n    name: 'Account',\n    constructor: RawWriteAccount2XTransformAccount\n  })\n  Account: RawWriteAccount2XTransformAccount;\n}\n\n/**\n * Represents a 2.x Write transformation.\n *\n * Expected JSON shape:\n * {\n *   \"Write\": {\n *     \"Account\": {\n *       \"account_hash\": \"...\"\n *     }\n *   }\n * }\n */\n@jsonObject\nexport class RawWriteAccount2XTransform {\n  @jsonMember({ name: 'Write', constructor: RawWriteAccount2XTransformWrite })\n  Write: RawWriteAccount2XTransformWrite;\n}\n\n/**\n * Represents a 1.x Write transformation.\n *\n * Expected JSON shape:\n * {\n *   \"WriteAccount\": \"...\"\n * }\n */\n@jsonObject\nexport class RawWriteAccount1XTransform {\n  @jsonMember({\n    name: 'WriteAccount',\n    constructor: AccountHash,\n    deserializer: json => {\n      if (!json) return;\n      return AccountHash.fromJSON(json);\n    },\n    serializer: (value: AccountHash) => {\n      return value.toJSON();\n    }\n  })\n  WriteAccount: AccountHash;\n}\n","import { jsonObject, jsonMember } from 'typedjson';\nimport { URef } from './key';\nimport { PublicKey } from './keypair';\nimport { CLValueUInt512 } from './clvalue';\n\n/**\n * Represents an unbonding purse, which contains information about the unbonding process of a bonded amount.\n */\n@jsonObject\nexport class UnbondingPurse {\n  /**\n   * The amount being unbonded, represented as `CLValueUInt512`.\n   */\n  @jsonMember({\n    name: 'amount',\n    constructor: CLValueUInt512,\n    deserializer: json => CLValueUInt512.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  amount: CLValueUInt512;\n\n  /**\n   * The bonding purse from which the unbonding is taking place, represented as a `URef`.\n   */\n  @jsonMember({\n    name: 'bonding_purse',\n    constructor: URef,\n    deserializer: json => URef.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  bondingPurse: URef;\n\n  /**\n   * The era when the unbonding purse was created.\n   */\n  @jsonMember({ name: 'era_of_creation', constructor: Number })\n  eraOfCreation: number;\n\n  /**\n   * The public key of the unbonder, representing the individual initiating the unbonding process.\n   */\n  @jsonMember({\n    name: 'unbonder_public_key',\n    constructor: PublicKey,\n    deserializer: json => PublicKey.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  unbonderPublicKey: PublicKey;\n\n  /**\n   * The public key of the validator associated with the unbonding.\n   */\n  @jsonMember({\n    name: 'validator_public_key',\n    constructor: PublicKey,\n    deserializer: json => PublicKey.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  validatorPublicKey: PublicKey;\n\n  /**\n   * The public key of a new validator, if applicable. This may be used for transferring the bonded amount to a new validator.\n   */\n  @jsonMember({\n    name: 'new_validator',\n    constructor: PublicKey,\n    deserializer: json => {\n      if (!json) return;\n      return PublicKey.fromJSON(json);\n    },\n    serializer: value => {\n      if (!value) return;\n      return value.toJSON();\n    }\n  })\n  newValidator?: PublicKey;\n}\n","import { jsonObject, jsonMember } from 'typedjson';\nimport { PublicKey } from './keypair';\nimport { CLValueUInt512 } from './clvalue';\n\n/**\n * Represents the weight of a validator at the end of an era.\n */\n@jsonObject\nexport class ValidatorWeightEraEnd {\n  /**\n   * The public key of the validator whose weight is being recorded.\n   */\n  @jsonMember({\n    constructor: PublicKey,\n    deserializer: json => PublicKey.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  validator: PublicKey;\n\n  /**\n   * The weight of the validator at the end of the era, represented as `CLValueUInt512`.\n   */\n  @jsonMember({\n    constructor: CLValueUInt512,\n    deserializer: json => CLValueUInt512.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  weight: CLValueUInt512;\n}\n\n/**\n * Represents the weight of a validator in the auction.\n */\n@jsonObject\nexport class ValidatorWeightAuction {\n  /**\n   * The public key of the validator whose weight is being recorded in the auction.\n   */\n  @jsonMember({\n    name: 'public_key',\n    constructor: PublicKey,\n    deserializer: json => PublicKey.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  validator: PublicKey;\n\n  /**\n   * The weight of the validator in the auction, represented as `CLValueUInt512`.\n   */\n  @jsonMember({\n    constructor: CLValueUInt512,\n    deserializer: json => CLValueUInt512.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  weight: CLValueUInt512;\n}\n","/**\n * Represents an 'Any' value in the Casper type system.\n * This type can store any arbitrary data as a byte array, making it highly flexible.\n */\nexport class CLValueAny {\n  private data: Uint8Array;\n\n  /**\n   * Initializes a new instance of the CLValueAny class.\n   * @param data - The Uint8Array to be stored as the 'Any' value.\n   */\n  constructor(data: Uint8Array) {\n    this.data = data;\n  }\n\n  /**\n   * Retrieves the byte representation of the 'Any' value.\n   * @returns A Uint8Array representing the stored data.\n   */\n  public bytes(): Uint8Array {\n    return this.data;\n  }\n\n  /**\n   * Provides a string representation of the 'Any' value.\n   * The byte array is decoded as a UTF-8 string.\n   * @returns A string decoded from the stored byte array.\n   */\n  public toString(): string {\n    return new TextDecoder().decode(this.data);\n  }\n\n  /**\n   * Converts the instance to a JSON-compatible byte array.\n   *\n   * @returns {Uint8Array} The byte representation of the instance.\n   */\n  public toJSON(): Uint8Array {\n    return this.bytes();\n  }\n}\n","import { IResultWithBytes } from './CLValue';\n\n/**\n * Represents a boolean value in the Casper type system.\n * This class encapsulates a boolean value and provides methods for byte conversion and CLValue integration.\n */\nexport class CLValueBool {\n  private value: boolean;\n\n  /**\n   * Initializes a new instance of the CLValueBool class.\n   * @param value - The boolean value to be stored.\n   */\n  constructor(value: boolean) {\n    this.value = value;\n  }\n\n  /**\n   * Converts the boolean value to its byte representation.\n   * @returns A Uint8Array with a single byte: 1 for true, 0 for false.\n   */\n  public bytes(): Uint8Array {\n    return new Uint8Array([this.value ? 1 : 0]);\n  }\n\n  /**\n   * Provides a string representation of the boolean value.\n   * @returns The string 'true' or 'false'.\n   */\n  public toString(): string {\n    return this.value ? 'true' : 'false';\n  }\n\n  /**\n   * Converts the instance to a JSON boolean.\n   *\n   * @returns {boolean} The boolean value of the instance.\n   */\n  public toJSON(): boolean {\n    return this.value;\n  }\n\n  /**\n   * Retrieves the boolean value.\n   * @returns The stored boolean value.\n   */\n  public getValue(): boolean {\n    return this.value;\n  }\n\n  /**\n   * Creates a CLValueBool instance from a Uint8Array.\n   * Parses the first byte in the array to determine the boolean value.\n   * @param source - The Uint8Array containing the byte representation of the boolean value.\n   * @returns An object containing the new CLValueBool instance and any remaining bytes.\n   * @throws Will throw an error if the source array is empty or contains an invalid boolean byte.\n   */\n  public static fromBytes(source: Uint8Array): IResultWithBytes<CLValueBool> {\n    if (source.length === 0) {\n      throw new Error('Empty byte array');\n    }\n\n    if (source[0] === 1) {\n      return { result: new CLValueBool(true), bytes: source.subarray(1) };\n    } else if (source[0] === 0) {\n      return { result: new CLValueBool(false), bytes: source.subarray(1) };\n    } else {\n      throw new Error('Invalid bool value');\n    }\n  }\n}\n","import { CLTypeByteArray } from './cltype';\nimport { IResultWithBytes } from './CLValue';\n\n/**\n * Represents a byte array value in the Casper type system.\n * This class encapsulates a byte array, providing methods for conversion to and from CLValue.\n */\nexport class CLValueByteArray {\n  private data: Uint8Array;\n\n  /**\n   * Initializes a new instance of the CLValueByteArray class.\n   * @param data - The Uint8Array to be stored in the CLValueByteArray.\n   */\n  constructor(data: Uint8Array) {\n    this.data = data;\n  }\n\n  /**\n   * Retrieves the byte representation of the byte array.\n   * @returns A Uint8Array representing the bytes of the byte array.\n   */\n  public bytes(): Uint8Array {\n    return this.data;\n  }\n\n  /**\n   * Converts the instance to a JSON-compatible byte array.\n   *\n   * @returns {Uint8Array} The byte representation of the instance.\n   */\n  public toJSON(): Uint8Array {\n    return this.bytes();\n  }\n\n  /**\n   * Provides a hexadecimal string representation of the byte array.\n   * Each byte is represented by two hexadecimal digits.\n   * @returns A string representing the byte array in hexadecimal format.\n   */\n  public toString(): string {\n    return Array.from(this.data, byte =>\n      byte.toString(16).padStart(2, '0')\n    ).join('');\n  }\n\n  /**\n   * Creates a CLValueByteArray instance from a Uint8Array.\n   * Extracts the bytes specified by the given CLTypeByteArray size.\n   * @param data - The Uint8Array containing the byte representation of the ByteArray value.\n   * @param clType - The CLTypeByteArray defining the size of the ByteArray.\n   * @returns An object containing the new CLValueByteArray instance and any remaining bytes.\n   */\n  public static fromBytes(\n    data: Uint8Array,\n    clType: CLTypeByteArray\n  ): IResultWithBytes<CLValueByteArray> {\n    const byteArray = data.subarray(0, clType.size);\n    return {\n      result: new CLValueByteArray(byteArray),\n      bytes: data.subarray(clType.size)\n    };\n  }\n}\n","import { BigNumberish } from '@ethersproject/bignumber';\n\nimport {\n  CLType,\n  CLTypeAny,\n  CLTypeBool,\n  CLTypeByteArray,\n  CLTypeDynamic,\n  CLTypeInt32,\n  CLTypeInt64,\n  CLTypeKey,\n  CLTypeList,\n  CLTypeMap,\n  CLTypeOption,\n  CLTypePublicKey,\n  CLTypeResult,\n  CLTypeString,\n  CLTypeTuple1,\n  CLTypeTuple2,\n  CLTypeTuple3,\n  CLTypeUInt128,\n  CLTypeUInt256,\n  CLTypeUInt32,\n  CLTypeUInt512,\n  CLTypeUInt64,\n  CLTypeUInt8,\n  CLTypeUnit,\n  CLTypeUref,\n  TypeID\n} from './cltype';\nimport { URef, Key } from '../key';\nimport { PublicKey } from '../keypair';\nimport {\n  CLValueUInt8,\n  CLValueInt64,\n  CLValueInt32,\n  CLValueUInt32,\n  CLValueUInt64,\n  CLValueUInt128,\n  CLValueUInt256,\n  CLValueUInt512\n} from './Numeric';\nimport { CLValueBool } from './Bool';\nimport { CLValueUnit } from './Unit';\nimport { CLValueOption } from './Option';\nimport { CLValueList } from './List';\nimport { CLValueByteArray } from './ByteArray';\nimport { CLValueResult } from './Result';\nimport { CLValueString } from './String';\nimport { CLValueMap } from './Map';\nimport { CLValueTuple1 } from './Tuple1';\nimport { CLValueTuple2 } from './Tuple2';\nimport { CLValueTuple3 } from './Tuple3';\nimport { CLValueAny } from './Any';\n\n/**\n * Interface representing a value that can be converted to bytes and a string.\n */\ninterface IValue {\n  bytes(): Uint8Array;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport interface IResultWithBytes<T> {\n  result: T;\n  bytes: Uint8Array;\n  originalBytes?: Uint8Array;\n}\n\n/**\n * Represents a CLValue in the Casper type system.\n * CLValue is a container for various types of values used in smart contracts.\n */\nexport class CLValue {\n  public type: CLType;\n  public bool?: CLValueBool;\n  public i32?: CLValueInt32;\n  public i64?: CLValueInt64;\n  public ui8?: CLValueUInt8;\n  public ui32?: CLValueUInt32;\n  public ui64?: CLValueUInt64;\n  public ui128?: CLValueUInt128;\n  public ui256?: CLValueUInt256;\n  public ui512?: CLValueUInt512;\n  public unit?: CLValueUnit;\n  public uref?: URef;\n  public key?: Key;\n  public option?: CLValueOption;\n  public list?: CLValueList;\n  public byteArray?: CLValueByteArray;\n  public result?: CLValueResult;\n  public stringVal?: CLValueString;\n  public map?: CLValueMap;\n  public tuple1?: CLValueTuple1;\n  public tuple2?: CLValueTuple2;\n  public tuple3?: CLValueTuple3;\n  public any?: CLValueAny;\n  public publicKey?: PublicKey;\n\n  /**\n   * Initializes a new CLValue instance.\n   * @param type - The CLType of the value.\n   */\n  constructor(type: CLType) {\n    this.type = type;\n  }\n\n  /**\n   * Gets the actual type of the CLValue, resolving dynamic types if necessary.\n   * @returns The CLType of the value.\n   */\n  public getType(): CLType {\n    return this.type instanceof CLTypeDynamic ? this.type.inner : this.type;\n  }\n\n  /**\n   * Returns a string representation of the CLValue.\n   * @returns A string representation of the value.\n   */\n  public toString(): string {\n    return this.getValueByType().toString();\n  }\n\n  public toJSON(): any {\n    return this.getValueByType().toJSON();\n  }\n\n  /**\n   * Converts the CLValue to its byte representation.\n   * @returns A Uint8Array representing the bytes of the value.\n   */\n  public bytes(): Uint8Array {\n    return this.getValueByType().bytes();\n  }\n\n  /**\n   * Retrieves the value associated with the CLValue's type.\n   * @returns An IValue representing the actual value stored in the CLValue.\n   * @throws Error if the type is not implemented.\n   */\n  private getValueByType(): IValue {\n    switch (this.type.getTypeID()) {\n      case TypeID.Bool:\n        return this.bool!;\n      case TypeID.I32:\n        return this.i32!;\n      case TypeID.I64:\n        return this.i64!;\n      case TypeID.U8:\n        return this.ui8!;\n      case TypeID.U32:\n        return this.ui32!;\n      case TypeID.U64:\n        return this.ui64!;\n      case TypeID.U128:\n        return this.ui128!;\n      case TypeID.U256:\n        return this.ui256!;\n      case TypeID.U512:\n        return this.ui512!;\n      case TypeID.Unit:\n        return this.unit!;\n      case TypeID.String:\n        return this.stringVal!;\n      case TypeID.Key:\n        return this.key!;\n      case TypeID.URef:\n        return this.uref!;\n      case TypeID.Option:\n        return this.option!;\n      case TypeID.List:\n        return this.list!;\n      case TypeID.ByteArray:\n        return this.byteArray!;\n      case TypeID.Result:\n        return this.result!;\n      case TypeID.Map:\n        return this.map!;\n      case TypeID.Tuple1:\n        return this.tuple1!;\n      case TypeID.Tuple2:\n        return this.tuple2!;\n      case TypeID.Tuple3:\n        return this.tuple3!;\n      case TypeID.Any:\n        return this.any!;\n      case TypeID.PublicKey:\n        return this.publicKey!;\n      default:\n        throw new Error(\n          'Type in getValueByType method of CLValue is not implemented'\n        );\n    }\n  }\n\n  /**\n   * Retrieves the Key value from the CLValue.\n   * @returns The Key stored in the CLValue.\n   * @throws Error if the Key property is empty.\n   */\n  public getKey(): Key {\n    if (!this.key) {\n      throw new Error(\n        `Key property is empty in CLValue, type is ${this.type.toString()}`\n      );\n    }\n    return this.key;\n  }\n\n  /**\n   * Creates a new CLValue instance containing a Key value.\n   * @param data - The Key to be stored in the CLValue.\n   * @returns A new CLValue instance encapsulating the Key.\n   */\n  public static newCLKey(data: Key): CLValue {\n    const clValue = new CLValue(CLTypeKey);\n    clValue.key = data;\n    return clValue;\n  }\n\n  /**\n   * Creates a new CLValue instance containing a URef value.\n   * @param data - The URef to be stored in the CLValue.\n   * @returns A new CLValue instance encapsulating the URef.\n   */\n  public static newCLUref(data: URef): CLValue {\n    const clValue = new CLValue(CLTypeUref);\n    clValue.uref = data;\n    return clValue;\n  }\n\n  /**\n   * Creates a new CLValue instance containing a PublicKey value.\n   * @param data - The PublicKey to be stored in the CLValue.\n   * @returns A new CLValue instance encapsulating the PublicKey.\n   */\n  public static newCLPublicKey(data: PublicKey): CLValue {\n    const clValue = new CLValue(CLTypePublicKey);\n    clValue.publicKey = data;\n    return clValue;\n  }\n\n  /**\n   * Creates a new CLValue instance containing an 'Any' value.\n   * @param data - The Uint8Array to be stored within the CLValue.\n   * @returns A new CLValue instance encapsulating the 'Any' value.\n   */\n  public static newCLAny(data: Uint8Array): CLValue {\n    const res = new CLValue(CLTypeAny);\n    res.any = new CLValueAny(data);\n    return res;\n  }\n\n  /**\n   * Creates a new CLValue instance containing a boolean value.\n   * @param val - The boolean value to be stored in the CLValue.\n   * @returns A new CLValue instance encapsulating the boolean value.\n   */\n  public static newCLValueBool(val: boolean): CLValue {\n    const res = new CLValue(CLTypeBool);\n    res.bool = new CLValueBool(val);\n    return res;\n  }\n\n  /**\n   * Creates a new CLValue instance containing a ByteArray value.\n   * @param val - The Uint8Array to be stored within the CLValue.\n   * @returns A new CLValue instance encapsulating the ByteArray.\n   */\n  public static newCLByteArray(val: Uint8Array): CLValue {\n    const byteArrayType = new CLTypeByteArray(val.length);\n    const clValueByteArray = new CLValue(byteArrayType);\n\n    clValueByteArray.byteArray = new CLValueByteArray(val);\n    return clValueByteArray;\n  }\n\n  /**\n   * Creates a new CLValue instance with a List value.\n   * @param elementType - The CLType for the elements of the list.\n   * @param elements - Optional array of CLValues to initialize the list with.\n   * @returns A new CLValue instance containing CLTypeList and a CLValueList.\n   */\n  public static newCLList(\n    elementType: CLType,\n    elements: CLValue[] = []\n  ): CLValue {\n    const listType = new CLTypeList(elementType);\n    const clValue = new CLValue(listType);\n    clValue.list = new CLValueList(listType, elements);\n    return clValue;\n  }\n\n  /**\n   * Creates a new CLValue instance with a Map value.\n   * @param keyType - The CLType for the map keys.\n   * @param valType - The CLType for the map values.\n   * @returns A new CLValue instance with CLTypeMap and a CLValueMap.\n   */\n  public static newCLMap(keyType: CLType, valType: CLType): CLValue {\n    const mapType = new CLTypeMap(keyType, valType);\n    const clValue = new CLValue(mapType);\n    clValue.map = new CLValueMap(mapType);\n    return clValue;\n  }\n\n  /**\n   * Creates a new `CLValue` instance that represents an optional value.\n   *\n   * This method allows you to wrap a given `CLValue` as an optional type (`Option`),\n   * which can either contain a value or be `null`. This is useful for scenarios where\n   * a value may or may not be present.\n   *\n   * If `inner` is `null`, the method will use the provided `clType` as the type of the option.\n   * If `clType` is not provided, it defaults to `CLTypeAny`. If `inner` is not `null`,\n   * its type is used instead of `clType`.\n   *\n   * @param inner - The `CLValue` to be wrapped in the option. Pass `null` if no value is present.\n   * @param clType - (Optional) The `CLType` representing the type of the value contained in the option.\n   *                 This is required if `inner` is `null` to properly define the option type.\n   *\n   * @returns A new `CLValue` instance containing:\n   * - A `CLTypeOption` representing the type of the optional value.\n   * - A `CLValueOption` that holds the inner value or `null`.\n   *\n   * @example\n   * ```typescript\n   * // Example of an option containing a value\n   * const innerValue = CLValue.fromU32(42);\n   * const optionValue = CLValue.newCLOption(innerValue);\n   *\n   * // Example of an empty option with an explicitly defined type\n   * const emptyOptionValue = CLValue.newCLOption(null, CLType.U32);\n   *\n   * // Example of an empty option with no type provided (defaults to CLTypeAny)\n   * const emptyOptionValueDefault = CLValue.newCLOption(null);\n   * ```\n   */\n  public static newCLOption(inner: CLValue | null, clType?: CLType): CLValue {\n    const clTypeForOption = inner === null ? clType || CLTypeAny : inner.type;\n    const optionType = new CLTypeOption(clTypeForOption);\n    const clValue = new CLValue(optionType);\n    clValue.option = new CLValueOption(inner, optionType);\n    return clValue;\n  }\n\n  /**\n   * Creates a new CLValue instance with a Result value.\n   * @param innerOk - The CLType for the success case.\n   * @param innerErr - The CLType for the error case.\n   * @param value - The CLValue to be contained in the Result.\n   * @param isSuccess - A boolean indicating whether the Result is a success (true) or an error (false).\n   * @returns A new CLValue instance containing CLTypeResult and a CLValueResult.\n   */\n  public static newCLResult(\n    innerOk: CLType,\n    innerErr: CLType,\n    value: CLValue,\n    isSuccess: boolean\n  ): CLValue {\n    const resultType = new CLTypeResult(innerOk, innerErr);\n    const clValue = new CLValue(resultType);\n    clValue.result = new CLValueResult(resultType, isSuccess, value);\n    return clValue;\n  }\n\n  /**\n   * Creates a new CLValue instance with a string value.\n   * @param val - The string value to be represented.\n   * @returns A new CLValue instance containing CLTypeString and a CLValueString.\n   */\n  public static newCLString(val: string): CLValue {\n    const res = new CLValue(CLTypeString);\n    res.stringVal = new CLValueString(val);\n    return res;\n  }\n\n  /**\n   * Creates a new CLValue instance with a Tuple1 value.\n   * @param val - The CLValue to be contained in the tuple.\n   * @returns A new CLValue instance containing CLTypeTuple1 and a CLValueTuple1.\n   */\n  public static newCLTuple1(val: CLValue): CLValue {\n    const tupleType = new CLTypeTuple1(val.type);\n    const clValue = new CLValue(tupleType);\n    clValue.tuple1 = new CLValueTuple1(tupleType, val);\n    return clValue;\n  }\n\n  /**\n   * Creates a new CLValue instance with a Tuple2 value.\n   * @param val1 - The first CLValue in the tuple.\n   * @param val2 - The second CLValue in the tuple.\n   * @returns A new CLValue instance containing CLTypeTuple2 and a CLValueTuple2.\n   */\n  public static newCLTuple2(val1: CLValue, val2: CLValue): CLValue {\n    const tupleType = new CLTypeTuple2(val1.type, val2.type);\n    const clValue = new CLValue(tupleType);\n    clValue.tuple2 = new CLValueTuple2(tupleType, val1, val2);\n    return clValue;\n  }\n\n  /**\n   * Creates a new CLValue instance with a Tuple3 value.\n   * @param val1 - The first CLValue in the tuple.\n   * @param val2 - The second CLValue in the tuple.\n   * @param val3 - The third CLValue in the tuple.\n   * @returns A new CLValue instance containing CLTypeTuple3 and a CLValueTuple3.\n   */\n  public static newCLTuple3(\n    val1: CLValue,\n    val2: CLValue,\n    val3: CLValue\n  ): CLValue {\n    const tupleType = new CLTypeTuple3(val1.type, val2.type, val3.type);\n    const clValue = new CLValue(tupleType);\n    clValue.tuple3 = new CLValueTuple3(tupleType, val1, val2, val3);\n    return clValue;\n  }\n\n  /**\n   * Creates a new CLValue instance with a Unit value.\n   *\n   * @returns A new CLValue instance with CLTypeUnit and a CLValueUnit.\n   */\n  public static newCLUnit(): CLValue {\n    const res = new CLValue(CLTypeUnit);\n    res.unit = new CLValueUnit();\n    return res;\n  }\n\n  /**\n   * Creates a new CLValue instance with an Int32 value.\n   * @param val - The 32-bit integer to be encapsulated in a CLValue.\n   * @returns A new CLValue instance containing CLTypeInt32 and a CLValueInt32.\n   */\n  public static newCLInt32(val: BigNumberish): CLValue {\n    const res = new CLValue(CLTypeInt32);\n    res.i32 = new CLValueInt32(val);\n    return res;\n  }\n\n  /**\n   * Creates a new CLValue instance with an Int64 value.\n   * @param val - The value to be stored in the Int64. Accepts any BigNumberish type.\n   * @returns A new CLValue instance containing CLTypeInt64 and a CLValueInt64.\n   */\n  public static newCLInt64(val: BigNumberish): CLValue {\n    const res = new CLValue(CLTypeInt64);\n    res.i64 = new CLValueInt64(val);\n    return res;\n  }\n\n  /**\n   * Creates a new CLValue instance with a UInt8 value.\n   * @param value - The value to initialize the UInt8 with. Must be an integer between 0 and 255.\n   * @returns A new CLValue instance containing CLTypeUInt8 and a CLValueUInt8.\n   */\n  public static newCLUint8(value: BigNumberish): CLValue {\n    const res = new CLValue(CLTypeUInt8);\n    res.ui8 = new CLValueUInt8(value);\n    return res;\n  }\n\n  /**\n   * Creates a new CLValue instance with a UInt32 value.\n   * @param value - The value to initialize the UInt32 with.\n   * @returns A new CLValue instance containing CLTypeUInt32 and a CLValueUInt32.\n   */\n  public static newCLUInt32(value: BigNumberish): CLValue {\n    const res = new CLValue(CLTypeUInt32);\n    res.ui32 = new CLValueUInt32(value);\n    return res;\n  }\n\n  /**\n   * Creates a new CLValue instance with a UInt64 value.\n   * @param val - The value to initialize the UInt64 with. Can be any BigNumberish type.\n   * @returns A new CLValue instance containing CLTypeUInt64 and a CLValueUInt64.\n   */\n  public static newCLUint64(val: BigNumberish): CLValue {\n    const res = new CLValue(CLTypeUInt64);\n    res.ui64 = new CLValueUInt64(val);\n    return res;\n  }\n\n  /**\n   * Creates a new CLValue instance with a UInt128 value.\n   * @param value - The value to initialize the UInt128 with.\n   * @returns A new CLValue instance containing CLTypeUInt128 and a CLValueUInt128.\n   */\n  public static newCLUInt128(value: BigNumberish): CLValue {\n    const res = new CLValue(CLTypeUInt128);\n    res.ui128 = new CLValueUInt128(value);\n    return res;\n  }\n\n  /**\n   * Creates a new CLValue instance with a UInt256 value.\n   * @param value - The value to initialize the UInt256 with.\n   * @returns A new CLValue instance containing CLTypeUInt256 and a CLValueUInt256.\n   */\n  public static newCLUInt256(value: BigNumberish): CLValue {\n    const res = new CLValue(CLTypeUInt256);\n    res.ui256 = new CLValueUInt256(value);\n    return res;\n  }\n\n  /**\n   * Creates a new CLValue instance with a UInt512 value.\n   * @param value - The value to initialize the UInt512 with.\n   * @returns A new CLValue instance containing CLTypeUInt512 and a CLValueUInt512.\n   */\n  public static newCLUInt512(value: BigNumberish): CLValue {\n    const res = new CLValue(CLTypeUInt512);\n    res.ui512 = new CLValueUInt512(value);\n    return res;\n  }\n}\n","import { concat } from '@ethersproject/bytes';\n\nimport { CLTypeList, TypeID } from './cltype';\nimport { CLValue, IResultWithBytes } from './CLValue';\nimport { CLValueUInt32 } from './Numeric';\nimport { CLValueParser } from './Parser';\nimport { toBytesU32 } from '../ByteConverters';\n\n/**\n * Represents a List value in the Casper type system.\n * This class provides methods to manage and manipulate lists of CLValues.\n */\nexport class CLValueList {\n  /**\n   * The type of the list elements.\n   */\n  public type: CLTypeList;\n\n  /**\n   * The elements contained in the list.\n   */\n  public elements: CLValue[];\n\n  /**\n   * Initializes a new instance of the CLValueList class.\n   * @param type - The CLTypeList representing the type of the list.\n   * @param elements - Optional array of CLValues to initialize the list with.\n   */\n  constructor(type: CLTypeList, elements: CLValue[] = []) {\n    this.type = type;\n    this.elements = elements;\n  }\n\n  /**\n   * Converts the list to its byte representation, including the length and each element's bytes.\n   * @returns A Uint8Array representing the bytes of the list.\n   */\n  public bytes(): Uint8Array {\n    const valueByteList = this.elements.map(e => e.bytes());\n    this?.type?.elementsType?.getTypeID() !== TypeID.Any &&\n      valueByteList.splice(0, 0, toBytesU32(this.size()));\n    return concat(valueByteList);\n  }\n\n  /**\n   * Provides a string representation of the list.\n   * @returns A string in the format \"[elem1, elem2, ...]\".\n   */\n  public toString(): string {\n    const strData = this.elements.map(one => `\"${one.toString()}\"`);\n    return `[${strData.join(',')}]`;\n  }\n\n  /**\n   * Checks if the list is empty.\n   * @returns true if the list is empty, false otherwise.\n   */\n  public isEmpty(): boolean {\n    return this.size() === 0;\n  }\n\n  /**\n   * Appends a new element to the list.\n   * @param value - The CLValue to append to the list.\n   */\n  public append(value: CLValue): void {\n    this.elements.push(value);\n  }\n\n  /**\n   * Removes an element from the list at the specified index.\n   * @param index - The index of the element to remove.\n   */\n  public remove(index: number): void {\n    this.elements.splice(index, 1);\n  }\n\n  /**\n   * Removes and returns the last element from the list.\n   * @returns The last element of the list, or undefined if the list is empty.\n   */\n  public pop(): CLValue | undefined {\n    return this.elements.pop();\n  }\n\n  /**\n   * Returns the number of elements in the list.\n   * @returns The number of elements in the list.\n   */\n  public size(): number {\n    return this.elements.length;\n  }\n\n  /**\n   * Sets the element at the specified index.\n   * @param index - The index at which to set the element.\n   * @param item - The CLValue to set at the specified index.\n   * @throws Error if the index is out of bounds.\n   */\n  public set(index: number, item: CLValue): void {\n    if (index >= this.elements.length) {\n      throw new Error('List index out of bounds.');\n    }\n    this.elements[index] = item;\n  }\n\n  /**\n   * Gets the element at the specified index.\n   * @param index - The index of the element to get.\n   * @returns The CLValue at the specified index.\n   * @throws Error if the index is out of bounds.\n   */\n  public get(index: number): CLValue {\n    if (index >= this.elements.length) {\n      throw new Error('List index out of bounds.');\n    }\n    return this.elements[index];\n  }\n\n  /**\n   * Converts the list to a JSON-compatible representation.\n   * @returns An array of string representations of the list elements.\n   */\n  public toJSON(): string[] {\n    return this.elements.map(d => d.toJSON());\n  }\n\n  /**\n   * Creates a CLValueList instance from a Uint8Array.\n   * Parses the byte array to interpret the length of the list and each element in the list.\n   * @param source - The Uint8Array containing the byte representation of the List value.\n   * @param clType - The CLTypeList representing the type of the list.\n   * @returns An object containing the new CLValueList instance and any remaining bytes.\n   */\n  public static fromBytes(\n    source: Uint8Array,\n    clType: CLTypeList\n  ): IResultWithBytes<CLValueList> {\n    const { result: u32, bytes: u32Bytes } = CLValueUInt32.fromBytes(source);\n    const size = u32.toNumber();\n    let remainder =\n      clType?.elementsType?.getTypeID() === TypeID.Any ? source : u32Bytes;\n    const elements: CLValue[] = [];\n\n    for (let i = 0; i < size; i++) {\n      if (remainder.length) {\n        const {\n          result: inner,\n          bytes: innerBytes\n        } = CLValueParser.fromBytesByType(remainder, clType.elementsType);\n\n        if (!inner) {\n          continue;\n        }\n\n        elements.push(inner);\n        remainder = innerBytes;\n      }\n    }\n\n    if (elements.length === 0) {\n      return { result: new CLValueList(clType, []), bytes: remainder };\n    }\n\n    return { result: new CLValueList(clType, elements), bytes: remainder };\n  }\n}\n","import { concat } from '@ethersproject/bytes';\n\nimport { CLTypeMap } from './cltype';\nimport { CLValue, IResultWithBytes } from './CLValue';\nimport { CLValueTuple2 } from './Tuple2';\nimport { CLValueUInt32 } from './Numeric';\nimport { CLValueParser } from './Parser';\nimport { toBytesU32 } from '../ByteConverters';\n\n/**\n * Represents a Map value in the Casper type system.\n * This class manages key-value pairs, providing efficient access and manipulation.\n */\nexport class CLValueMap {\n  /**\n   * The type of the map.\n   */\n  private type: CLTypeMap;\n\n  /**\n   * The data stored in the map as an array of CLValueTuple2.\n   */\n  private data: CLValueTuple2[];\n\n  /**\n   * An indexed representation of the map data for faster lookups.\n   */\n  private indexedData: Map<string, CLValue> = new Map();\n\n  /**\n   * Initializes a new instance of the CLValueMap class.\n   * @param mapType - The CLTypeMap representing the type of the map.\n   * @param data - Optional array of CLValueTuple2 representing the map entries.\n   * @param indexedData - Optional Map of string keys to CLValues for faster lookups.\n   */\n  constructor(\n    mapType: CLTypeMap,\n    data?: CLValueTuple2[],\n    indexedData?: Map<string, CLValue>\n  ) {\n    this.type = mapType;\n    this.data = data ?? [];\n    this.indexedData = indexedData ?? new Map();\n  }\n\n  /**\n   * Converts the map to its byte representation.\n   * @returns A Uint8Array representing the bytes of the map, including its size and key-value pairs.\n   */\n  bytes(): Uint8Array {\n    const kvBytes = Array.from(this.data).map(element => {\n      const byteKey = element.inner1.bytes();\n      const byteVal = element.inner2.bytes();\n      return concat([byteKey, byteVal]);\n    });\n\n    return concat([toBytesU32(this.data.length), ...kvBytes]);\n  }\n\n  /**\n   * Returns the map as a plain JavaScript object.\n   * @returns A Record with string keys and CLValue values.\n   */\n  public getMap(): Record<string, CLValue> {\n    const result: Record<string, CLValue> = {};\n    this.indexedData.forEach((v, k) => {\n      result[k] = v;\n    });\n    return result;\n  }\n\n  /**\n   * Returns the map data as an array of CLValueTuple2.\n   * @returns An array of CLValueTuple2 representing the map entries.\n   */\n  public getData(): CLValueTuple2[] {\n    return [...this.data];\n  }\n\n  /**\n   * Provides a string representation of the map.\n   * @returns A string representation of the map entries.\n   */\n  public toString(): string {\n    const b: string[] = [];\n    this.indexedData.forEach((value, key) => {\n      b.push(`(${key}=\"${value.toString()}\")`);\n    });\n    return b.join('');\n  }\n\n  /**\n   * Converts the instance to a JSON-compatible map.\n   *\n   * @returns {any} A Map object representing the instance's key-value pairs.\n   *\n   * This method iterates over the `data` property, extracting key-value\n   * pairs from each tuple and storing them in a new Map.\n   */\n  public toJSON(): any {\n    const map = new Map();\n\n    this.data.forEach(tuple2 => {\n      const [k, v] = tuple2.value();\n      map.set(k, v);\n    });\n\n    return map;\n  }\n\n  /**\n   * Finds a value in the map by key.\n   * @param key - The key to search for.\n   * @returns A tuple containing the found value (or undefined) and a boolean indicating if the key was found.\n   */\n  public find(key: string): [CLValue | undefined, boolean] {\n    const value = this.indexedData.get(key);\n    return [value, value !== undefined];\n  }\n\n  /**\n   * Gets a value from the map by key.\n   * @param key - The key to search for.\n   * @returns The found CLValue or undefined if the key doesn't exist.\n   */\n  public get(key: string): CLValue | undefined {\n    return this.indexedData.get(key);\n  }\n\n  /**\n   * Finds any value in the map that matches one of the provided keys.\n   * @param keys - An array of keys to search for.\n   * @returns A tuple containing the first found value (or undefined) and a boolean indicating if any key was found.\n   */\n  public findAny(keys: string[]): [CLValue | undefined, boolean] {\n    for (const key of keys) {\n      const value = this.indexedData.get(key);\n      if (value !== undefined) {\n        return [value, true];\n      }\n    }\n    return [undefined, false];\n  }\n\n  /**\n   * Returns the number of entries in the map.\n   * @returns The number of entries in the map.\n   */\n  public length(): number {\n    return this.indexedData.size;\n  }\n\n  /**\n   * Appends a new key-value pair to the map.\n   * @param key - The key CLValue to append.\n   * @param val - The value CLValue to append.\n   * @returns null if successful, or an Error if the types are invalid or the key already exists.\n   */\n  public append(key: CLValue, val: CLValue): Error | null {\n    if (key.type !== this.type.key) {\n      return new Error('invalid key type');\n    }\n    if (val.type !== this.type.val) {\n      return new Error('invalid value type');\n    }\n\n    const keyString = key.toString();\n    if (this.indexedData.has(keyString)) {\n      return new Error('map key already exists');\n    }\n\n    const tuple = CLValue.newCLTuple2(key, val).tuple2;\n\n    if (!tuple) {\n      return new Error('no tuple');\n    }\n\n    this.data.push(tuple);\n    this.indexedData.set(keyString, val);\n    return null;\n  }\n\n  /**\n   * Creates a CLValueMap instance from a Uint8Array.\n   * Parses the byte array to interpret the size of the map and each key-value pair.\n   * @param bytes - The Uint8Array containing the byte representation of the Map value.\n   * @param mapType - The CLTypeMap representing the type of the map.\n   * @returns An object containing the new CLValueMap instance and any remaining bytes.\n   */\n  public static fromBytes(\n    bytes: Uint8Array,\n    mapType: CLTypeMap\n  ): IResultWithBytes<CLValueMap> {\n    const mapResult = new CLValueMap(mapType);\n\n    const { result: u32, bytes: u32Bytes } = CLValueUInt32.fromBytes(bytes);\n    const size = u32.toNumber();\n    let remainder = u32Bytes;\n\n    if (size === 0) {\n      return { result: mapResult, bytes: remainder };\n    }\n\n    for (let i = 0; i < size; i++) {\n      if (!remainder.length) {\n        continue;\n      }\n\n      try {\n        const keyVal = CLValueParser.fromBytesByType(remainder, mapType.key);\n        remainder = keyVal?.bytes ?? [];\n\n        const valVal = CLValueParser.fromBytesByType(keyVal.bytes, mapType.val);\n        remainder = valVal?.bytes ?? [];\n\n        mapResult.append(keyVal?.result, valVal?.result);\n      } catch {}\n    }\n\n    return { result: mapResult, bytes: remainder };\n  }\n}\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\n\n/**\n * Abstract class representing a numeric value in the Casper type system.\n * Provides common methods and properties for numeric types.\n */\nexport abstract class CLValueNumeric {\n  protected value: BigNumber;\n  protected originalBytes?: Uint8Array;\n\n  /**\n   * The constructor is protected to ensure this class cannot be instantiated directly.\n   * Subclasses can call this constructor using `super`.\n   */\n  protected constructor(value: BigNumberish, originalBytes?: Uint8Array) {\n    this.value = BigNumber.from(value);\n    this.originalBytes = originalBytes;\n  }\n\n  /**\n   * Converts the numeric value to its byte representation.\n   * Must be implemented by subclasses.\n   */\n  public abstract bytes(): Uint8Array;\n\n  /**\n   * Provides a string representation of the numeric value.\n   * @returns The string representation of the value.\n   */\n  public toString(): string {\n    return this.value.toString();\n  }\n\n  /**\n   * Converts the numeric value to a JavaScript number.\n   * @returns The numeric value as a JavaScript number.\n   */\n  public toNumber(): number {\n    return this.value.toNumber();\n  }\n\n  /**\n   * Converts the instance to a JSON-compatible string.\n   * @returns {string} The string representation of the instance.\n   */\n  public toJSON(): string {\n    return this.toString();\n  }\n\n  /**\n   * Retrieves the numeric value.\n   * @returns The numeric representation of the value.\n   */\n  public getValue(): BigNumber {\n    return this.value;\n  }\n}\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\n\nimport { Int32ByteSize } from '../cltype';\nimport { IResultWithBytes } from '../CLValue';\nimport { toBytesI32 } from '../../ByteConverters';\nimport { CLValueNumeric } from './Abstract';\n\n/**\n * Represents a 32-bit signed integer value in the Casper type system.\n * This class provides methods for handling 32-bit integers, including byte conversion and CLValue integration.\n */\nexport class CLValueInt32 extends CLValueNumeric {\n  constructor(value: BigNumberish) {\n    super(value);\n  }\n\n  /**\n   * Converts the Int32 value to its byte representation in little-endian format.\n   * @returns A Uint8Array representing the bytes of the Int32 value.\n   */\n  public bytes(): Uint8Array {\n    return toBytesI32(this.value);\n  }\n\n  /**\n   * Creates a CLValueInt32 instance from a Uint8Array.\n   * Interprets the first 4 bytes of the array as a 32-bit integer in little-endian format.\n   * @param source - The Uint8Array containing the byte representation of the Int32 value.\n   * @returns An object containing the new CLValueInt32 instance and any remaining bytes.\n   * @throws Will throw an error if the source array is smaller than Int32ByteSize.\n   */\n  public static fromBytes(source: Uint8Array): IResultWithBytes<CLValueInt32> {\n    if (source.length < Int32ByteSize) {\n      throw new Error('buffer size is too small');\n    }\n    const i32Bytes = Uint8Array.from(source.subarray(0, 4));\n    const i32 = BigNumber.from(i32Bytes.slice().reverse()).fromTwos(32);\n\n    return { result: new CLValueInt32(i32), bytes: source.subarray(4) };\n  }\n}\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\n\nimport { Int64ByteSize } from '../cltype';\nimport { IResultWithBytes } from '../CLValue';\nimport { toBytesI64 } from '../../ByteConverters';\nimport { CLValueNumeric } from './Abstract';\n\n/**\n * Represents a 64-bit signed integer value in the Casper type system.\n * This class provides methods for handling 64-bit integers, including byte conversion and CLValue integration.\n */\nexport class CLValueInt64 extends CLValueNumeric {\n  constructor(value: BigNumberish) {\n    super(value);\n  }\n\n  /**\n   * Converts the Int64 value to its byte representation in little-endian format.\n   * @returns A Uint8Array representing the bytes of the Int64 value.\n   */\n  public bytes(): Uint8Array {\n    return toBytesI64(this.value);\n  }\n\n  /**\n   * Creates a CLValueInt64 instance from a Uint8Array.\n   * Interprets the first 8 bytes of the array as a 64-bit integer in little-endian format.\n   * @param source - The Uint8Array containing the byte representation of the Int64 value.\n   * @returns An object containing the new CLValueInt64 instance and any remaining bytes.\n   * @throws Will throw an error if the source array is smaller than Int64ByteSize.\n   */\n  public static fromBytes(source: Uint8Array): IResultWithBytes<CLValueInt64> {\n    if (source.length < Int64ByteSize) {\n      throw new Error('buffer size is too small');\n    }\n    const bytes = Uint8Array.from(source.subarray(0, 8));\n    const val = BigNumber.from(bytes.slice().reverse()).fromTwos(64);\n    const resultBytes = source.subarray(8);\n\n    return { result: new CLValueInt64(val), bytes: resultBytes };\n  }\n}\n","import { BigNumberish } from '@ethersproject/bignumber';\n\nimport { fromBytesUInt128 } from '../UintBig';\nimport { IResultWithBytes } from '../CLValue';\nimport { toBytesU128 } from '../../ByteConverters';\nimport { CLValueNumeric } from './Abstract';\nimport { arrayEquals } from '../../../utils';\n\n/**\n * Represents a 128-bit unsigned integer value in the Casper type system.\n */\nexport class CLValueUInt128 extends CLValueNumeric {\n  constructor(value: BigNumberish, originalBytes?: Uint8Array) {\n    super(value, originalBytes);\n  }\n\n  /**\n   * Converts the UInt128 value to its byte representation.\n   * @returns A Uint8Array representing the bytes of the UInt128 value.\n   */\n  public bytes(): Uint8Array {\n    if (\n      this.originalBytes &&\n      arrayEquals(this.originalBytes, Uint8Array.from([1, 0]))\n    ) {\n      return this.originalBytes;\n    }\n\n    return toBytesU128(this.value);\n  }\n\n  /**\n   * Creates a CLValueUInt128 instance from a Uint8Array.\n   * Parses the byte array to retrieve the UInt128 value.\n   * @param source - The Uint8Array containing the byte representation of the UInt128 value.\n   * @returns An object containing the new CLValueUInt128 instance and any remaining bytes.\n   */\n  public static fromBytes(\n    source: Uint8Array\n  ): IResultWithBytes<CLValueUInt128> {\n    return fromBytesUInt128(source);\n  }\n}\n","import { BigNumberish } from '@ethersproject/bignumber';\n\nimport { fromBytesUInt256 } from '../UintBig';\nimport { IResultWithBytes } from '../CLValue';\nimport { toBytesU256 } from '../../ByteConverters';\nimport { CLValueNumeric } from './Abstract';\nimport { arrayEquals } from '../../../utils';\n\n/**\n * Represents a 256-bit unsigned integer value in the Casper type system.\n */\nexport class CLValueUInt256 extends CLValueNumeric {\n  constructor(value: BigNumberish, originalBytes?: Uint8Array) {\n    super(value, originalBytes);\n  }\n\n  /**\n   * Converts the UInt256 value to its byte representation.\n   * @returns A Uint8Array representing the bytes of the UInt256 value.\n   */\n  public bytes(): Uint8Array {\n    if (\n      this.originalBytes &&\n      arrayEquals(this.originalBytes, Uint8Array.from([1, 0]))\n    ) {\n      return this.originalBytes;\n    }\n\n    return toBytesU256(this.value);\n  }\n\n  /**\n   * Creates a CLValueUInt256 instance from a Uint8Array.\n   * Parses the byte array to retrieve the UInt256 value.\n   * @param source - The Uint8Array containing the byte representation of the UInt256 value.\n   * @returns An object containing the new CLValueUInt256 instance and any remaining bytes.\n   */\n  public static fromBytes(\n    source: Uint8Array\n  ): IResultWithBytes<CLValueUInt256> {\n    return fromBytesUInt256(source);\n  }\n}\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\n\nimport { Int32ByteSize } from '../cltype';\nimport { IResultWithBytes } from '../CLValue';\nimport { toBytesU32 } from '../../ByteConverters';\nimport { CLValueNumeric } from './Abstract';\n\n/**\n * Represents a 32-bit unsigned integer value in the Casper type system.\n */\nexport class CLValueUInt32 extends CLValueNumeric {\n  constructor(value: BigNumberish) {\n    super(value);\n  }\n\n  /**\n   * Converts the UInt32 value to its byte representation in little-endian format.\n   * @returns A Uint8Array representing the bytes of the UInt32 value.\n   */\n  public bytes(): Uint8Array {\n    return toBytesU32(this.value);\n  }\n\n  /**\n   * Creates a CLValueUInt32 instance from a Uint8Array.\n   * Parses the byte array to retrieve the UInt32 value.\n   * @param source - The Uint8Array containing the byte representation of the UInt32 value.\n   * @returns An object containing the new CLValueUInt32 instance and any remaining bytes.\n   * @throws Error if the source array is too short for a UInt32 value.\n   */\n  public static fromBytes(source: Uint8Array): IResultWithBytes<CLValueUInt32> {\n    if (source.length < Int32ByteSize) {\n      throw new Error('Buffer size is too small for UInt32');\n    }\n    const u32Bytes = Uint8Array.from(source.subarray(0, 4));\n    const u32 = BigNumber.from(u32Bytes.slice().reverse());\n\n    return { result: new CLValueUInt32(u32), bytes: source.subarray(4) };\n  }\n}\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\n\nimport { fromBytesUInt512 } from '../UintBig';\nimport { IResultWithBytes } from '../CLValue';\nimport { toBytesU512 } from '../../ByteConverters';\nimport { CLValueNumeric } from './Abstract';\nimport { arrayEquals } from '../../../utils';\n\n/**\n * Represents a 512-bit unsigned integer value in the Casper type system.\n */\nexport class CLValueUInt512 extends CLValueNumeric {\n  constructor(value: BigNumberish, originalBytes?: Uint8Array) {\n    super(value, originalBytes);\n  }\n\n  /**\n   * Converts the UInt512 value to its byte representation.\n   * @returns A Uint8Array representing the bytes of the UInt512 value.\n   */\n  public bytes(): Uint8Array {\n    if (\n      this.originalBytes &&\n      arrayEquals(this.originalBytes, Uint8Array.from([1, 0]))\n    ) {\n      return this.originalBytes;\n    }\n\n    return toBytesU512(this.value);\n  }\n\n  /**\n   * Creates a CLValueUInt512 instance from a JSON representation.\n   * @param json - The JSON representation of the UInt512 value. Can be a string or a number.\n   * @returns A new CLValueUInt512 instance.\n   * @throws Will throw an error if the input is not a valid integer or is negative.\n   */\n  public static fromJSON(json: string | number): CLValueUInt512 {\n    const num = BigNumber.from(json);\n\n    if (!num.mod(1).isZero() || num.isNegative()) {\n      throw new Error(`Invalid integer string: ${json}`);\n    }\n\n    return new CLValueUInt512(num);\n  }\n\n  /**\n   * Creates a CLValueUInt512 instance from a Uint8Array.\n   * Parses the byte array to retrieve the UInt512 value.\n   * @param source - The Uint8Array containing the byte representation of the UInt512 value.\n   * @returns An object containing the new CLValueUInt512 instance and any remaining bytes.\n   */\n  public static fromBytes(\n    source: Uint8Array\n  ): IResultWithBytes<CLValueUInt512> {\n    return fromBytesUInt512(source);\n  }\n}\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\n\nimport { Int64ByteSize } from '../cltype';\nimport { IResultWithBytes } from '../CLValue';\nimport { toBytesU64 } from '../../ByteConverters';\nimport { CLValueNumeric } from './Abstract';\n\n/**\n * Represents a 64-bit unsigned integer value in the Casper type system.\n */\nexport class CLValueUInt64 extends CLValueNumeric {\n  constructor(value: BigNumberish) {\n    super(value);\n  }\n\n  /**\n   * Converts the UInt64 value to its byte representation in little-endian format.\n   * @returns A Uint8Array representing the bytes of the UInt64 value.\n   */\n  public bytes(): Uint8Array {\n    return toBytesU64(this.value);\n  }\n\n  /**\n   * Creates a CLValueUInt64 instance from a Uint8Array.\n   * Parses the byte array to retrieve the UInt64 value.\n   * @param source - The Uint8Array containing the byte representation of the UInt64 value.\n   * @returns An object containing the new CLValueUInt64 instance and any remaining bytes.\n   * @throws Error if the source array is smaller than the required size for a UInt64.\n   */\n  public static fromBytes(source: Uint8Array): IResultWithBytes<CLValueUInt64> {\n    if (source.length < Int64ByteSize) {\n      throw new Error('buffer size is too small');\n    }\n    const u64Bytes = Uint8Array.from(source.subarray(0, 8));\n    const u64 = BigNumber.from(u64Bytes.slice().reverse());\n\n    return { result: new CLValueUInt64(u64), bytes: source.subarray(8) };\n  }\n}\n","import { BigNumberish } from '@ethersproject/bignumber';\n\nimport { IResultWithBytes } from '../CLValue';\nimport { toBytesU8 } from '../../ByteConverters';\nimport { CLValueNumeric } from './Abstract';\n\n/**\n * Represents an 8-bit unsigned integer value in the Casper type system.\n */\nexport class CLValueUInt8 extends CLValueNumeric {\n  constructor(value: BigNumberish) {\n    super(value);\n  }\n\n  /**\n   * Converts the UInt8 value to its byte representation.\n   * @returns A Uint8Array containing a single byte representing the UInt8 value.\n   */\n  public bytes(): Uint8Array {\n    return toBytesU8(this.value);\n  }\n\n  /**\n   * Creates a CLValueUInt8 instance from a Uint8Array.\n   * Parses the first byte to retrieve the UInt8 value.\n   * @param source - The Uint8Array containing the byte representation of the UInt8 value.\n   * @returns An object containing the new CLValueUInt8 instance and any remaining bytes.\n   * @throws Error if the source array is empty.\n   */\n  public static fromBytes(source: Uint8Array): IResultWithBytes<CLValueUInt8> {\n    if (source.length === 0) {\n      throw new Error('Insufficient buffer length for UInt8');\n    }\n\n    return { result: new CLValueUInt8(source[0]), bytes: source.subarray(1) };\n  }\n}\n","export * from './Uint256';\nexport * from './Uint128';\nexport * from './Uint512';\nexport * from './Uint64';\nexport * from './Uint8';\nexport * from './Uint32';\nexport * from './Int32';\nexport * from './Int64';\n","import { concat } from '@ethersproject/bytes';\n\nimport { CLTypeOption } from './cltype';\nimport { CLValue, IResultWithBytes } from './CLValue';\nimport { CLValueParser } from './Parser';\nimport { CLValueUInt8 } from './Numeric';\n\n/**\n * Represents an optional value in the Casper type system.\n * An option can either contain a value or be empty (null).\n */\nexport class CLValueOption {\n  public type?: CLTypeOption;\n  public inner: CLValue | null;\n\n  /**\n   * Initializes a new instance of the CLValueOption class.\n   * @param inner - The CLValue contained in the option, or null if empty.\n   * @param type - The CLTypeOption representing the type of the option.\n   */\n  constructor(inner: CLValue | null, type?: CLTypeOption) {\n    this.type = type;\n    this.inner = inner;\n  }\n\n  /**\n   * Converts the option to its byte representation.\n   * If the option is empty, it returns a Uint8Array with a single 0 byte.\n   * If it contains a value, it returns a Uint8Array with 1 followed by the inner value's bytes.\n   * @returns A Uint8Array representing the bytes of the option.\n   */\n  public bytes(): Uint8Array {\n    if (this.isEmpty()) {\n      return Uint8Array.from([0]);\n    }\n    const innerBytes = this.inner!.bytes();\n    return concat([Uint8Array.from([1]), innerBytes]);\n  }\n\n  /**\n   * Provides a string representation of the option.\n   * @returns An empty string if the option is empty, otherwise the string representation of the inner value.\n   */\n  public toString(): string {\n    return this.isEmpty() ? '' : this.inner!.toString();\n  }\n\n  /**\n   * Converts the instance to a JSON-compatible format.\n   *\n   * @returns {any} The JSON representation of the inner value or `null` if empty.\n   *\n   * If the instance is empty, it returns `null`. Otherwise, it calls `toJSON()`\n   * on the inner value to produce its JSON representation.\n   */\n  public toJSON(): any {\n    return this.isEmpty() ? null : this.inner!.toJSON();\n  }\n\n  /**\n   * Checks if the option is empty.\n   * @returns true if the option is empty, false otherwise.\n   */\n  public isEmpty(): boolean {\n    return this.inner === null;\n  }\n\n  /**\n   * Retrieves the inner value of the option.\n   * @returns The inner CLValue if the option is not empty, or null if it is empty.\n   */\n  public value(): CLValue | null {\n    return this.inner;\n  }\n\n  /**\n   * Creates a CLValueOption instance from a Uint8Array.\n   * Parses the byte array to determine if the option is empty or contains a value.\n   * @param source - The Uint8Array containing the byte representation of the Option value.\n   * @param clType - The CLTypeOption representing the type of the option.\n   * @returns An object containing the new CLValueOption instance and any remaining bytes.\n   */\n  public static fromBytes(\n    source: Uint8Array,\n    clType: CLTypeOption\n  ): IResultWithBytes<CLValueOption> {\n    const { result: u8, bytes: u8Bytes } = CLValueUInt8.fromBytes(source);\n    const optionTag = u8.toNumber();\n\n    if (optionTag === 0) {\n      return { result: new CLValueOption(null, clType), bytes: u8Bytes };\n    }\n\n    const inner = CLValueParser.fromBytesByType(u8Bytes, clType.inner);\n\n    return {\n      result: new CLValueOption(inner.result, clType),\n      bytes: inner.bytes\n    };\n  }\n}\n","import { concat } from '@ethersproject/bytes';\n\nimport { CLValue, IResultWithBytes } from './CLValue';\nimport { Key, URef } from '../key';\nimport { PublicKey } from '../keypair';\nimport {\n  CLType,\n  CLTypeByteArray,\n  CLTypeDynamic,\n  CLTypeList,\n  CLTypeMap,\n  CLTypeOption,\n  CLTypeParser,\n  CLTypeResult,\n  CLTypeTuple1,\n  CLTypeTuple2,\n  CLTypeTuple3,\n  TypeID\n} from './cltype';\nimport {\n  CLValueUInt32,\n  CLValueUInt512,\n  CLValueUInt256,\n  CLValueUInt128,\n  CLValueUInt64,\n  CLValueUInt8,\n  CLValueInt32,\n  CLValueInt64\n} from './Numeric';\nimport { CLValueBool } from './Bool';\nimport { CLValueAny } from './Any';\nimport { CLValueUnit } from './Unit';\nimport { CLValueString } from './String';\nimport { CLValueOption } from './Option';\nimport { CLValueList } from './List';\nimport { CLValueByteArray } from './ByteArray';\nimport { CLValueResult } from './Result';\nimport { CLValueMap } from './Map';\nimport { CLValueTuple1 } from './Tuple1';\nimport { CLValueTuple2 } from './Tuple2';\nimport { CLValueTuple3 } from './Tuple3';\nimport { Conversions } from '../Conversions';\nimport { toBytesArrayU8 } from '../ByteConverters';\n\n/**\n * Error thrown when an unsupported CLType is encountered.\n */\nexport const ErrUnsupportedCLType = new Error(\n  'buffer constructor is not found'\n);\n\n/**\n * A utility class for parsing CLValues from various formats, including JSON and byte arrays.\n */\nexport class CLValueParser {\n  /**\n   * Parses a CLValue from a JSON representation.\n   * @param json - The JSON object representing a CLValue.\n   * @returns A CLValue instance parsed from the JSON.\n   */\n  public static fromJSON(json: any): CLValue {\n    const clType = CLTypeParser.fromInterface(json.cl_type);\n\n    const clEntity = CLValueParser.fromBytesByType(\n      Conversions.decodeBase16(json.bytes),\n      clType\n    );\n\n    return clEntity?.result;\n  }\n\n  /**\n   * Converts a CLValue to its JSON representation.\n   * @param value - The CLValue to convert.\n   * @returns An object with 'bytes' and 'cl_type' properties representing the CLValue.\n   */\n  public static toJSON(value: CLValue) {\n    const rawBytes = value.bytes();\n    const bytes = Conversions.encodeBase16(rawBytes);\n    const clType = value.type.toJSON();\n\n    return {\n      bytes,\n      cl_type: clType\n    };\n  }\n\n  /**\n   * Serializes a CLValue to bytes, including its type information.\n   * @param value - The CLValue to serialize.\n   * @returns A Uint8Array containing the serialized CLValue with type information.\n   */\n  static toBytesWithType(value: CLValue): Uint8Array {\n    const clTypeBytes = value.getType().toBytes();\n    const bytes = value.bytes();\n    return concat([toBytesArrayU8(bytes), clTypeBytes]);\n  }\n\n  /**\n   * Parses a CLValue from a Uint8Array given its type.\n   * @param bytes - The Uint8Array containing the serialized CLValue.\n   * @param sourceType - The CLType of the value to parse.\n   * @returns An object containing the parsed CLValue and any remaining bytes.\n   * @throws {ErrUnsupportedCLType} If an unsupported CLType is encountered.\n   */\n  public static fromBytesByType(\n    bytes: Uint8Array,\n    sourceType: CLType\n  ): IResultWithBytes<CLValue> {\n    const result = new CLValue(sourceType);\n\n    if (sourceType instanceof CLTypeDynamic) {\n      const clType = CLTypeParser.matchBytesToCLType(bytes);\n      result.type = new CLTypeDynamic(clType.result.getTypeID(), clType.result);\n      return { result, bytes: clType.bytes };\n    }\n\n    const typeID = sourceType.getTypeID();\n\n    switch (typeID) {\n      case TypeID.Bool:\n        const boolValue = CLValueBool.fromBytes(bytes);\n        result.bool = boolValue?.result;\n        return { result, bytes: boolValue.bytes };\n      case TypeID.I32:\n        const i32 = CLValueInt32.fromBytes(bytes);\n        result.i32 = i32.result;\n        return { result, bytes: i32?.bytes };\n      case TypeID.I64:\n        const i64 = CLValueInt64.fromBytes(bytes);\n        result.i64 = i64?.result;\n        return { result, bytes: i64?.bytes };\n      case TypeID.U8:\n        const u8 = CLValueUInt8.fromBytes(bytes);\n        result.ui8 = u8?.result;\n        return { result, bytes: u8?.bytes };\n      case TypeID.U32:\n        const u32 = CLValueUInt32.fromBytes(bytes);\n        result.ui32 = u32?.result;\n        return { result, bytes: u32?.bytes };\n      case TypeID.U64:\n        const u64 = CLValueUInt64.fromBytes(bytes);\n        result.ui64 = u64?.result;\n        return { result, bytes: u64?.bytes };\n      case TypeID.U128:\n        const u128 = CLValueUInt128.fromBytes(bytes);\n        result.ui128 = u128?.result;\n        return { result, bytes: u128?.bytes };\n      case TypeID.U256:\n        const u256 = CLValueUInt256.fromBytes(bytes);\n        result.ui256 = u256?.result;\n        return { result, bytes: u256?.bytes };\n      case TypeID.U512:\n        const u512 = CLValueUInt512.fromBytes(bytes);\n        result.ui512 = u512?.result;\n        return { result, bytes: u512?.bytes };\n      case TypeID.String:\n        const stringValue = CLValueString.fromBytes(bytes);\n        result.stringVal = stringValue.result;\n        return { result, bytes: stringValue?.bytes };\n      case TypeID.Unit:\n        const unit = CLValueUnit.fromBytes(bytes);\n        result.unit = unit?.result;\n        return { result, bytes: unit?.bytes };\n      case TypeID.Key:\n        const key = Key.fromBytes(bytes);\n        result.key = key?.result;\n        return { result, bytes: key?.bytes };\n      case TypeID.URef:\n        const uref = URef.fromBytes(bytes);\n        result.uref = uref?.result;\n        return { result, bytes: uref?.bytes };\n      case TypeID.Any:\n        const anyType = new CLValueAny(bytes);\n        result.any = anyType;\n        return { result, bytes: new Uint8Array([]) };\n      case TypeID.PublicKey:\n        const pubKey = PublicKey.fromBytes(bytes);\n        result.publicKey = pubKey?.result;\n        return { result, bytes: pubKey?.bytes };\n      case TypeID.Option:\n        const optionType = CLValueOption.fromBytes(\n          bytes,\n          sourceType as CLTypeOption\n        );\n        result.option = optionType?.result;\n        return { result, bytes: optionType?.bytes };\n      case TypeID.List:\n        const listType = CLValueList.fromBytes(bytes, sourceType as CLTypeList);\n        result.list = listType?.result;\n        return { result, bytes: listType?.bytes };\n      case TypeID.ByteArray:\n        const byteArrayType = CLValueByteArray.fromBytes(\n          bytes,\n          sourceType as CLTypeByteArray\n        );\n        result.byteArray = byteArrayType?.result;\n        return { result, bytes: byteArrayType?.bytes };\n      case TypeID.Result:\n        const resultType = CLValueResult.fromBytes(\n          bytes,\n          sourceType as CLTypeResult\n        );\n        result.result = resultType?.result;\n        return { result, bytes: resultType?.bytes };\n      case TypeID.Map:\n        const mapType = CLValueMap.fromBytes(bytes, sourceType as CLTypeMap);\n        result.map = mapType?.result;\n        return { result, bytes: mapType?.bytes };\n      case TypeID.Tuple1:\n        const tuple1 = CLValueTuple1.fromBytes(\n          bytes,\n          sourceType as CLTypeTuple1\n        );\n        result.tuple1 = tuple1.result;\n        return { result, bytes: tuple1?.bytes };\n      case TypeID.Tuple2:\n        const tuple2 = CLValueTuple2.fromBytes(\n          bytes,\n          sourceType as CLTypeTuple2\n        );\n        result.tuple2 = tuple2?.result;\n        return { result, bytes: tuple2?.bytes };\n      case TypeID.Tuple3:\n        const tuple3 = CLValueTuple3.fromBytes(\n          bytes,\n          sourceType as CLTypeTuple3\n        );\n        result.tuple3 = tuple3?.result;\n        return { result, bytes: tuple3?.bytes };\n      default:\n        throw ErrUnsupportedCLType;\n    }\n  }\n\n  /**\n   * Parses a `Uint8Array` to extract a `CLValue` with its corresponding type.\n   *\n   * This method takes a byte array and interprets it as a `CLValue` by first extracting\n   * the length of the value, then splitting the bytes into the value's data and its type.\n   *\n   * @param bytes - The byte array to be parsed.\n   * @returns An `IResultWithBytes<CLValue>` containing the parsed `CLValue` and its remaining bytes.\n   * @throws Error - If the length of the value extracted from the bytes is invalid.\n   *\n   * ### Example\n   * ```typescript\n   * const bytes = new Uint8Array([...]); // Provide valid CLValue bytes\n   * const result = CLValueParser.fromBytesWithType(bytes);\n   * console.log(result.result); // Parsed CLValue\n   * ```\n   */\n  public static fromBytesWithType(\n    bytes: Uint8Array\n  ): IResultWithBytes<CLValue> {\n    const u32 = CLValueUInt32.fromBytes(bytes);\n    const length = u32.result.toNumber();\n\n    if (!length) {\n      throw new Error(`Invalid length for bytes: ${length}`);\n    }\n\n    const valueBytes = u32.bytes.subarray(0, length);\n    const typeBytes = u32.bytes.subarray(length);\n    const clType = CLTypeParser.matchBytesToCLType(typeBytes);\n    const clValue = this.fromBytesByType(valueBytes, clType.result);\n\n    // return clType bytes here, since clType bytes are after clValue bytes: [clvalue.bytes, cltype.bytes, remainder...]\n    return { result: clValue.result, bytes: clType.bytes };\n  }\n}\n","import { concat } from '@ethersproject/bytes';\n\nimport { CLTypeResult } from './cltype';\nimport { CLValue, IResultWithBytes } from './CLValue';\nimport { CLValueParser } from './Parser';\nimport { CLValueUInt8 } from './Numeric';\n\n/**\n * Represents a Result type in the Casper type system.\n * A Result can either be a success (Ok) or an error (Err).\n */\nexport class CLValueResult {\n  public type: CLTypeResult;\n  public isSuccess: boolean;\n  public inner: CLValue;\n\n  /**\n   * Initializes a new instance of the CLValueResult class.\n   * @param type - The CLTypeResult representing the type of the Result.\n   * @param isSuccess - A boolean indicating whether the Result is a success (true) or an error (false).\n   * @param inner - The CLValue contained within the Result.\n   */\n  constructor(type: CLTypeResult, isSuccess: boolean, inner: CLValue) {\n    const expectedTypeName = isSuccess\n      ? type.innerOk.getName()\n      : type.innerErr.getName();\n    const actualTypeName = inner.getType().getName();\n\n    if (expectedTypeName !== actualTypeName) {\n      throw new Error(\n        `Inner value's type (${actualTypeName}) does not match the expected type (${expectedTypeName}) for ${\n          isSuccess ? 'Ok' : 'Error'\n        }.`\n      );\n    }\n\n    this.type = type;\n    this.isSuccess = isSuccess;\n    this.inner = inner;\n  }\n\n  /**\n   * Converts the Result to its byte representation.\n   * Includes a success flag byte (1 for success, 0 for error) followed by the bytes of the inner value.\n   * @returns A Uint8Array representing the bytes of the Result.\n   */\n  public bytes(): Uint8Array {\n    const successByte = Uint8Array.from([this.isSuccess ? 1 : 0]);\n    const innerBytes = this.inner.bytes();\n    return concat([successByte, innerBytes]);\n  }\n\n  /**\n   * Provides a string representation of the Result.\n   * @returns A string representation of the Result, either \"Ok(innerValue)\" or \"Err(innerValue)\".\n   */\n  public toString(): string {\n    return this.isSuccess\n      ? `Ok(${this.inner.toString()})`\n      : `Err(${this.inner.toString()})`;\n  }\n\n  /**\n   * Converts the instance to a JSON-compatible format.\n   *\n   * @returns {any} The JSON representation of the inner value.\n   *\n   * Calls `toJSON()` on the inner value to produce its JSON representation.\n   */\n  public toJSON(): any {\n    return this.inner.toJSON();\n  }\n\n  /**\n   * Retrieves the inner CLValue of the Result.\n   * @returns The CLValue contained within the Result.\n   */\n  public value(): CLValue {\n    return this.inner;\n  }\n\n  /**\n   * Creates a CLValueResult instance from a Uint8Array.\n   * Parses the byte array to interpret the success flag and the inner value.\n   * @param source - The Uint8Array containing the byte representation of the Result value.\n   * @param clType - The CLTypeResult representing the type of the Result.\n   * @returns An object containing the new CLValueResult instance and any remaining bytes.\n   */\n  public static fromBytes(\n    source: Uint8Array,\n    clType: CLTypeResult\n  ): IResultWithBytes<CLValueResult> {\n    const { result: u8, bytes: u8Bytes } = CLValueUInt8.fromBytes(source);\n    const resultTag = u8?.toNumber();\n    const isSuccess = resultTag === 1;\n    const innerType = isSuccess ? clType.innerOk : clType.innerErr;\n\n    const inner = CLValueParser.fromBytesByType(u8Bytes, innerType);\n\n    return {\n      result: new CLValueResult(clType, isSuccess, inner?.result),\n      bytes: inner?.bytes\n    };\n  }\n}\n","import { concat } from '@ethersproject/bytes';\n\nimport { IResultWithBytes } from './CLValue';\nimport { CLValueUInt32 } from './Numeric';\nimport { fromBytesString } from '../ByteConverters';\n\n/**\n * Represents a string value in the Casper type system.\n */\nexport class CLValueString {\n  private value: string;\n\n  /**\n   * Initializes a new instance of the CLValueString class.\n   * @param value - The string value to be represented.\n   */\n  constructor(value: string) {\n    this.value = value;\n  }\n\n  /**\n   * Converts the string value to its byte representation.\n   * The result is a Uint8Array containing the length of the string (as a 4-byte prefix) followed by the string's bytes.\n   * @returns A Uint8Array representing the bytes of the string.\n   */\n  public bytes(): Uint8Array {\n    const sizeBytes = this.sizeToBytes(this.value.length);\n    const valueBytes = new TextEncoder().encode(this.value);\n    return concat([sizeBytes, valueBytes]);\n  }\n\n  /**\n   * Converts a size number to its 4-byte Uint8Array representation in little-endian format.\n   * @param size - The size to convert.\n   * @returns A Uint8Array representing the size.\n   */\n  private sizeToBytes(size: number): Uint8Array {\n    const buffer = new ArrayBuffer(4);\n    const view = new DataView(buffer);\n    view.setUint32(0, size, true);\n    return new Uint8Array(buffer);\n  }\n\n  /**\n   * Converts the instance to a JSON-compatible string.\n   *\n   * @returns {string} The string representation of the instance.\n   */\n  public toJSON(): string {\n    return this.toString();\n  }\n\n  /**\n   * Provides the string value.\n   * @returns The string value.\n   */\n  public toString(): string {\n    return this.value;\n  }\n\n  /**\n   * Creates a CLValueString instance from a Uint8Array.\n   * Parses the byte array to retrieve the string value, interpreting the first 4 bytes as the string length.\n   * @param source - The Uint8Array containing the byte representation of the string value.\n   * @returns An object containing the new CLValueString instance and any remaining bytes.\n   */\n  public static fromBytes(source: Uint8Array): IResultWithBytes<CLValueString> {\n    const uint32Value = CLValueUInt32.fromBytes(source);\n    const size = uint32Value?.result?.toNumber();\n    const value = fromBytesString(uint32Value?.bytes?.subarray(0, size));\n\n    return {\n      result: new CLValueString(value),\n      bytes: uint32Value?.bytes?.subarray(size)\n    };\n  }\n}\n","import { CLTypeTuple1 } from './cltype';\nimport { CLValue, IResultWithBytes } from './CLValue';\nimport { CLValueParser } from './Parser';\n\n/**\n * Represents a tuple containing one CLValue in the Casper type system.\n */\nexport class CLValueTuple1 {\n  public innerType: CLTypeTuple1;\n  private innerVal: CLValue;\n\n  /**\n   * Initializes a new instance of the CLValueTuple1 class.\n   * @param innerType - The CLTypeTuple1 representing the type of the tuple.\n   * @param innerVal - The CLValue contained in the tuple.\n   */\n  constructor(innerType: CLTypeTuple1, innerVal: CLValue) {\n    this.innerType = innerType;\n    this.innerVal = innerVal;\n  }\n\n  /**\n   * Converts the tuple to its byte representation.\n   * @returns A Uint8Array representing the bytes of the inner CLValue.\n   */\n  public bytes(): Uint8Array {\n    return this.innerVal.bytes();\n  }\n\n  /**\n   * Provides a string representation of the tuple.\n   * @returns A string representation of the tuple in the format \"(value)\".\n   */\n  public toString(): string {\n    return `(${this.innerVal.toString()})`;\n  }\n\n  /**\n   * Retrieves the value of the tuple.\n   * @returns The CLValue contained in the tuple.\n   */\n  public value(): CLValue {\n    return this.innerVal;\n  }\n\n  /**\n   * Converts the instance to a JSON-compatible array.\n   *\n   * @returns {any} An array containing the JSON representation of the inner value.\n   */\n  public toJSON(): any[] {\n    return [this.innerVal.toJSON()];\n  }\n\n  /**\n   * Creates a CLValueTuple1 instance from a Uint8Array.\n   * Parses the byte array to retrieve the inner value of the tuple.\n   * @param source - The Uint8Array containing the byte representation of the Tuple1 value.\n   * @param clType - The CLTypeTuple1 representing the type of the tuple.\n   * @returns An object containing the new CLValueTuple1 instance and any remaining bytes.\n   */\n  public static fromBytes(\n    source: Uint8Array,\n    clType: CLTypeTuple1\n  ): IResultWithBytes<CLValueTuple1> {\n    const inner = CLValueParser.fromBytesByType(source, clType.inner);\n\n    return {\n      result: new CLValueTuple1(clType, inner?.result),\n      bytes: inner?.bytes\n    };\n  }\n}\n","import { concat } from '@ethersproject/bytes';\n\nimport { CLTypeTuple2 } from './cltype';\nimport { CLValue, IResultWithBytes } from './CLValue';\nimport { CLValueParser } from './Parser';\n\n/**\n * Represents a tuple containing two CLValues in the Casper type system.\n */\nexport class CLValueTuple2 {\n  public innerType: CLTypeTuple2;\n  public inner1: CLValue;\n  public inner2: CLValue;\n\n  /**\n   * Initializes a new instance of the CLValueTuple2 class.\n   * @param innerType - The CLTypeTuple2 representing the type of the tuple.\n   * @param inner1 - The first CLValue in the tuple.\n   * @param inner2 - The second CLValue in the tuple.\n   */\n  constructor(innerType: CLTypeTuple2, inner1: CLValue, inner2: CLValue) {\n    this.innerType = innerType;\n    this.inner1 = inner1;\n    this.inner2 = inner2;\n  }\n\n  /**\n   * Converts the tuple to its byte representation.\n   * @returns A Uint8Array representing the concatenated bytes of both inner CLValues.\n   */\n  public bytes(): Uint8Array {\n    const inner1Bytes = this.inner1.bytes();\n    const inner2Bytes = this.inner2.bytes();\n    return concat([inner1Bytes, inner2Bytes]);\n  }\n\n  /**\n   * Provides a string representation of the tuple.\n   * @returns A string representation of the tuple in the format \"(value1, value2)\".\n   */\n  public toString(): string {\n    return `(${this.inner1.toString()}, ${this.inner2.toString()})`;\n  }\n\n  /**\n   * Converts the instance to a JSON-compatible array.\n   *\n   * @returns {any[]} An array containing the JSON representations of inner1 and inner2.\n   */\n  public toJSON(): any[] {\n    return [this.inner1.toJSON(), this.inner2.toJSON()];\n  }\n\n  /**\n   * Retrieves the values of the tuple as an array.\n   * @returns An array containing the two CLValues of the tuple.\n   */\n  public value(): [CLValue, CLValue] {\n    return [this.inner1, this.inner2];\n  }\n\n  /**\n   * Creates a CLValueTuple2 instance from a Uint8Array.\n   * Parses the byte array to retrieve the two values of the tuple.\n   * @param source - The Uint8Array containing the byte representation of the Tuple2 value.\n   * @param clType - The CLTypeTuple2 representing the type of the tuple.\n   * @returns An object containing the new CLValueTuple2 instance and any remaining bytes.\n   */\n  public static fromBytes(\n    source: Uint8Array,\n    clType: CLTypeTuple2\n  ): IResultWithBytes<CLValueTuple2> {\n    const inner1 = CLValueParser.fromBytesByType(source, clType.inner1);\n    const inner2 = CLValueParser.fromBytesByType(inner1.bytes, clType.inner2);\n\n    return {\n      result: new CLValueTuple2(clType, inner1?.result, inner2?.result),\n      bytes: inner2?.bytes\n    };\n  }\n}\n","import { concat } from '@ethersproject/bytes';\n\nimport { CLTypeTuple3 } from './cltype';\nimport { CLValueParser } from './Parser';\nimport { CLValue, IResultWithBytes } from './CLValue';\n\n/**\n * Represents a tuple containing three CLValues in the Casper type system.\n */\nexport class CLValueTuple3 {\n  public innerType: CLTypeTuple3;\n  public inner1: CLValue;\n  public inner2: CLValue;\n  public inner3: CLValue;\n\n  /**\n   * Initializes a new instance of the CLValueTuple3 class.\n   * @param innerType - The CLType representing the type of the tuple.\n   * @param inner1 - The first CLValue in the tuple.\n   * @param inner2 - The second CLValue in the tuple.\n   * @param inner3 - The third CLValue in the tuple.\n   */\n  constructor(\n    innerType: CLTypeTuple3,\n    inner1: CLValue,\n    inner2: CLValue,\n    inner3: CLValue\n  ) {\n    this.innerType = innerType;\n    this.inner1 = inner1;\n    this.inner2 = inner2;\n    this.inner3 = inner3;\n  }\n\n  /**\n   * Converts the tuple to its byte representation.\n   * @returns A Uint8Array representing the concatenated bytes of all three inner CLValues.\n   */\n  public bytes(): Uint8Array {\n    const inner1Bytes = this.inner1.bytes();\n    const inner2Bytes = this.inner2.bytes();\n    const inner3Bytes = this.inner3.bytes();\n    return concat([inner1Bytes, inner2Bytes, inner3Bytes]);\n  }\n\n  /**\n   * Provides a string representation of the tuple.\n   * @returns A string representation of the tuple in the format \"(value1, value2, value3)\".\n   */\n  public toString(): string {\n    return `(${this.inner1.toString()}, ${this.inner2.toString()}, ${this.inner3.toString()})`;\n  }\n\n  /**\n   * Converts the instance to a JSON-compatible array.\n   *\n   * @returns {any[]} An array containing the JSON representations of inner1, inner2, and inner3.\n   */\n  public toJSON(): any[] {\n    return [this.inner1.toJSON(), this.inner2.toJSON(), this.inner3.toJSON()];\n  }\n\n  /**\n   * Retrieves the values of the tuple as an array.\n   * @returns An array containing the three CLValues of the tuple.\n   */\n  public value(): [CLValue, CLValue, CLValue] {\n    return [this.inner1, this.inner2, this.inner3];\n  }\n\n  /**\n   * Creates a CLValueTuple3 instance from a Uint8Array.\n   * Parses the byte array to retrieve the three values of the tuple.\n   * @param source - The Uint8Array containing the byte representation of the Tuple3 value.\n   * @param clType - The CLTypeTuple3 representing the type of the tuple.\n   * @returns An object containing the new CLValueTuple3 instance and any remaining bytes.\n   */\n  public static fromBytes(\n    source: Uint8Array,\n    clType: CLTypeTuple3\n  ): IResultWithBytes<CLValueTuple3> {\n    const inner1 = CLValueParser.fromBytesByType(source, clType.inner1);\n    const inner2 = CLValueParser.fromBytesByType(inner1.bytes, clType.inner2);\n    const inner3 = CLValueParser.fromBytesByType(inner2.bytes, clType.inner3);\n\n    return {\n      result: new CLValueTuple3(\n        clType,\n        inner1.result,\n        inner2.result,\n        inner3.result\n      ),\n      bytes: inner3.bytes\n    };\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber';\n\nimport { CLValueUInt128, CLValueUInt256, CLValueUInt512 } from './Numeric';\nimport { IResultWithBytes } from './CLValue';\n\n/**\n * Converts a BigNumber to a Uint8Array with a length prefix.\n *\n * The resulting Uint8Array structure:\n * - The first byte is the length of the BigNumber in bytes.\n * - The remaining bytes represent the BigNumber itself.\n *\n * @param val - The BigNumber to convert.\n * @returns Uint8Array representation of the BigNumber.\n */\nexport const bigToBytes = (val: BigNumber): Uint8Array => {\n  let hex = val.toHexString().slice(2);\n  if (hex.length % 2 !== 0) {\n    hex = '0' + hex;\n  }\n\n  const data = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < hex.length; i += 2) {\n    data[i / 2] = parseInt(hex.slice(i, i + 2), 16);\n  }\n\n  const numberLen = data.length;\n  const result = new Uint8Array(numberLen + 1);\n  result[0] = numberLen;\n  result.set(data, 1);\n\n  return result;\n};\n\n/**\n * Converts an ArrayBuffer with a length prefix to a BigNumber.\n *\n * Expected input structure:\n * - First byte: length of the BigNumber in bytes.\n * - Remaining bytes: BigNumber value.\n *\n * @param buffer - The ArrayBuffer containing the prefixed byte representation.\n * @returns BigNumber reconstructed from the byte representation.\n */\nexport const bigFromBuffer = (buffer: ArrayBuffer): BigNumber => {\n  const view = new DataView(buffer);\n  const size = view.getUint8(0);\n  const data = new Uint8Array(buffer.slice(1, size + 1));\n\n  let hex = '';\n  for (let i = 0; i < data.length; i++) {\n    const byte = data[i];\n    hex += (byte < 16 ? '0' : '') + byte.toString(16);\n  }\n\n  return BigNumber.from('0x' + hex);\n};\n\n/**\n * Helper to parse BigNumber from prefixed bytes with bit size validation.\n *\n * @param rawBytes - Byte array containing the prefixed BigNumber data.\n * @param bitSize - Bit size (e.g., 128, 256, or 512) to validate the BigNumber.\n * @returns An object containing the parsed BigNumber and remaining bytes.\n * @throws Error if the byte length exceeds expected size or data is insufficient.\n */\nconst fromBytesBigIntBase = (\n  rawBytes: Uint8Array,\n  bitSize: number\n): IResultWithBytes<BigNumber> => {\n  if (rawBytes.length < 1) {\n    throw new Error('Early end of stream: no data to parse.');\n  }\n\n  const byteSize = bitSize / 8;\n  const n = rawBytes[0];\n\n  if (n > byteSize) {\n    throw new Error(\n      `Formatting error: byte length ${n} exceeds expected size for ${bitSize}-bit integer.`\n    );\n  }\n\n  if (n + 1 > rawBytes.length) {\n    throw new Error(\n      'Early end of stream: insufficient data for specified byte length.'\n    );\n  }\n\n  const bigIntBytes = n === 0 ? [0] : rawBytes.subarray(1, 1 + n);\n  const uintBytes = rawBytes.subarray(1 + n);\n\n  return {\n    result: BigNumber.from(bigIntBytes.slice().reverse()),\n    bytes: uintBytes,\n    originalBytes: rawBytes\n  };\n};\n\n/**\n * Parses a Uint128 CLValue from prefixed bytes.\n * @param rawBytes - Byte array containing the prefixed Uint128 data.\n * @returns The CLValueUInt128 parsed from the byte data.\n */\nexport const fromBytesUInt128 = (\n  rawBytes: Uint8Array\n): IResultWithBytes<CLValueUInt128> => {\n  const value = fromBytesBigIntBase(rawBytes, 128);\n  return {\n    result: new CLValueUInt128(value?.result, value?.originalBytes),\n    bytes: value?.bytes\n  };\n};\n\n/**\n * Parses a Uint256 CLValue from prefixed bytes.\n * @param rawBytes - Byte array containing the prefixed Uint256 data.\n * @returns The CLValueUInt256 parsed from the byte data.\n */\nexport const fromBytesUInt256 = (\n  rawBytes: Uint8Array\n): IResultWithBytes<CLValueUInt256> => {\n  const value = fromBytesBigIntBase(rawBytes, 256);\n  return {\n    result: new CLValueUInt256(value?.result, value?.originalBytes),\n    bytes: value?.bytes\n  };\n};\n\n/**\n * Parses a Uint512 CLValue from prefixed bytes.\n * @param rawBytes - Byte array containing the prefixed Uint512 data.\n * @returns The CLValueUInt512 parsed from the byte data.\n */\nexport const fromBytesUInt512 = (\n  rawBytes: Uint8Array\n): IResultWithBytes<CLValueUInt512> => {\n  const value = fromBytesBigIntBase(rawBytes, 512);\n  return {\n    result: new CLValueUInt512(value?.result, value?.originalBytes),\n    bytes: value?.bytes\n  };\n};\n","import { IResultWithBytes } from './CLValue';\n\n/**\n * Represents a Unit value in the Casper type system.\n * A Unit value is similar to 'null' or 'void' in other languages.\n */\nexport class CLValueUnit {\n  private obj: null;\n\n  /**\n   * Constructs a new CLValueUnit instance.\n   */\n  constructor() {\n    this.obj = null;\n  }\n\n  /**\n   * Returns the byte representation of the Unit value.\n   * For Unit type, this is always an empty array.\n   *\n   * @returns An empty Uint8Array.\n   */\n  public bytes(): Uint8Array {\n    return Uint8Array.from([]);\n  }\n\n  /**\n   * Returns a string representation of the Unit value.\n   *\n   * @returns The string 'null' to represent the Unit value.\n   */\n  public toString(): string {\n    return 'null'; // Representation for a 'nil' or 'Unit' type\n  }\n\n  /**\n   * Returns the value of the Unit type.\n   *\n   * @returns Always returns null.\n   */\n  public getValue(): null {\n    return this.obj;\n  }\n\n  /**\n   * Converts the instance to a JSON-compatible null value.\n   *\n   * @returns {null} Always returns `null`, representing the absence of a value.\n   */\n  public toJSON(): null {\n    return this.getValue();\n  }\n\n  /**\n   * Creates a CLValueUnit instance from a byte array.\n   *\n   * @param source - The source Uint8Array.\n   * @returns A new CLValueUnit instance.\n   * @throws Will throw an error if the source is not empty.\n   */\n  public static fromBytes(source: Uint8Array): IResultWithBytes<CLValueUnit> {\n    if (source.byteLength > 0) {\n      throw new Error('Byte source for Unit type should be empty');\n    }\n\n    return { result: new CLValueUnit(), bytes: source };\n  }\n}\n","import { concat } from '@ethersproject/bytes';\nimport { CLType, TypeID, TypeName } from './CLType';\nimport { toBytesU32 } from '../../ByteConverters';\n\n/**\n * Represents a fixed-size ByteArray type within the Casper type system.\n * This class allows for defining a ByteArray with a specific size, and includes methods\n * to handle its serialization, string representation, and conversion to JSON format.\n */\nexport class CLTypeByteArray implements CLType {\n  public size: number;\n\n  /**\n   * Initializes a new instance of the CLTypeByteArray class.\n   * @param size - Specifies the fixed size of the byte array.\n   */\n  constructor(size: number) {\n    this.size = size;\n  }\n\n  /**\n   * Converts the CLTypeByteArray instance into a byte representation.\n   * This includes the type ID and the size of the byte array.\n   * @returns A Uint8Array that represents the CLTypeByteArray.\n   */\n  public toBytes(): Uint8Array {\n    return concat([Uint8Array.from([this.getTypeID()]), toBytesU32(this.size)]);\n  }\n\n  /**\n   * Provides a human-readable string representation of the CLTypeByteArray.\n   * @returns A string in the format \"ByteArray: size\".\n   */\n  public toString(): string {\n    return `${this.getName()}: ${this.size}`;\n  }\n\n  /**\n   * Retrieves the unique type identifier (TypeID) for the ByteArray.\n   * @returns TypeID for ByteArray.\n   */\n  public getTypeID(): TypeID {\n    return TypeID.ByteArray;\n  }\n\n  /**\n   * Retrieves the name of this type as defined in the Casper system.\n   * @returns TypeName for ByteArray.\n   */\n  public getName(): TypeName {\n    return TypeName.ByteArray;\n  }\n\n  /**\n   * Gets the fixed size of the byte array.\n   * @returns The size of the byte array.\n   */\n  public getSize(): number {\n    return this.size;\n  }\n\n  /**\n   * Converts the CLTypeByteArray instance to a JSON-compatible representation.\n   * The JSON object contains a single key-value pair, where the key is \"ByteArray\"\n   * and the value is the size of the array.\n   * @returns An object with the ByteArray size.\n   */\n  public toJSON(): { [key: string]: number } {\n    return { [this.getName()]: this.size };\n  }\n\n  /**\n   * Constructs a CLTypeByteArray instance from a JSON representation.\n   * @param source - The JSON input containing the size of the ByteArray.\n   * @returns A new CLTypeByteArray instance.\n   * @throws Will throw an error if the input type is not a number.\n   */\n  public static fromJSON(source: any): CLTypeByteArray {\n    if (typeof source !== 'number') {\n      throw new Error('Invalid JSON parsing to ByteArray type');\n    }\n    return new CLTypeByteArray(source);\n  }\n}\n","/**\n * The byte size of a 32-bit integer.\n */\nexport const Int32ByteSize = 4;\n\n/**\n * The byte size of a 64-bit integer.\n */\nexport const Int64ByteSize = 8;\n\n/**\n * Enumeration of type identifiers used within the Casper type system.\n * Each TypeID uniquely identifies a specific data type.\n */\nexport enum TypeID {\n  Bool,\n  I32,\n  I64,\n  U8,\n  U32,\n  U64,\n  U128,\n  U256,\n  U512,\n  Unit,\n  String,\n  Key,\n  URef,\n  Option,\n  List,\n  ByteArray,\n  Result,\n  Map,\n  Tuple1,\n  Tuple2,\n  Tuple3,\n  Any,\n  PublicKey\n}\n\n/**\n * Type alias for the string representation of a type name.\n */\nexport type TypeName = string;\n\n/**\n * Object containing string constants for each type name in the Casper type system.\n */\nexport const TypeName = {\n  Bool: 'Bool' as TypeName,\n  I32: 'I32' as TypeName,\n  I64: 'I64' as TypeName,\n  U8: 'U8' as TypeName,\n  U32: 'U32' as TypeName,\n  U64: 'U64' as TypeName,\n  U128: 'U128' as TypeName,\n  U256: 'U256' as TypeName,\n  U512: 'U512' as TypeName,\n  Unit: 'Unit' as TypeName,\n  String: 'String' as TypeName,\n  Key: 'Key' as TypeName,\n  URef: 'URef' as TypeName,\n  Option: 'Option' as TypeName,\n  List: 'List' as TypeName,\n  ByteArray: 'ByteArray' as TypeName,\n  Result: 'Result' as TypeName,\n  Map: 'Map' as TypeName,\n  Tuple1: 'Tuple1' as TypeName,\n  Tuple2: 'Tuple2' as TypeName,\n  Tuple3: 'Tuple3' as TypeName,\n  Any: 'Any' as TypeName,\n  PublicKey: 'PublicKey' as TypeName\n};\n\n/**\n * Interface representing a CLType in the Casper type system.\n */\nexport interface CLType {\n  /**\n   * Converts the CLType instance to its byte representation.\n   * @returns A Uint8Array representing the CLType.\n   */\n  toBytes(): Uint8Array;\n\n  /**\n   * Provides a string representation of the CLType.\n   * @returns A string representation of the CLType.\n   */\n  toString(): string;\n\n  /**\n   * Retrieves the type ID of the CLType.\n   * @returns The TypeID associated with the CLType.\n   */\n  getTypeID(): TypeID;\n\n  /**\n   * Retrieves the name of the CLType.\n   * @returns The TypeName associated with the CLType.\n   */\n  getName(): TypeName;\n\n  /**\n   * Converts the CLType instance to a JSON representation.\n   * @returns A JSON-compatible representation of the CLType.\n   */\n  toJSON(): any;\n}\n\n/**\n * Represents a simple data type in the Casper type system.\n */\nexport class SimpleType implements CLType {\n  private readonly typeID: TypeID;\n  private readonly typeName: TypeName;\n\n  /**\n   * Constructs a new instance of the SimpleType class.\n   * @param typeID - The TypeID for the simple type.\n   * @param name - The TypeName for the simple type.\n   */\n  constructor(typeID: TypeID, name: TypeName) {\n    this.typeID = typeID;\n    this.typeName = name;\n  }\n\n  /**\n   * Converts the SimpleType to its byte representation.\n   * @returns A Uint8Array containing a single byte representing the type ID.\n   */\n  toBytes(): Uint8Array {\n    return new Uint8Array([this.typeID]);\n  }\n\n  /**\n   * Provides a string representation of the SimpleType.\n   * @returns The name of the SimpleType.\n   */\n  toString(): string {\n    return this.getName();\n  }\n\n  /**\n   * Retrieves the type ID of the SimpleType.\n   * @returns The TypeID for the SimpleType.\n   */\n  getTypeID(): TypeID {\n    return this.typeID;\n  }\n\n  /**\n   * Retrieves the name of the SimpleType.\n   * @returns The TypeName for the SimpleType.\n   */\n  getName(): TypeName {\n    return this.typeName;\n  }\n\n  /**\n   * Converts the SimpleType instance to a JSON representation.\n   * @returns The name of the SimpleType as a string.\n   */\n  toJSON(): string {\n    return this.getName();\n  }\n}\n\n// Predefined SimpleType instances\n\n/**\n * Represents a Boolean type in the Casper type system.\n */\nexport const CLTypeBool = new SimpleType(TypeID.Bool, TypeName.Bool);\n\n/**\n * Represents a 32-bit signed integer type in the Casper type system.\n */\nexport const CLTypeInt32 = new SimpleType(TypeID.I32, TypeName.I32);\n\n/**\n * Represents a 64-bit signed integer type in the Casper type system.\n */\nexport const CLTypeInt64 = new SimpleType(TypeID.I64, TypeName.I64);\n\n/**\n * Represents an 8-bit unsigned integer type in the Casper type system.\n */\nexport const CLTypeUInt8 = new SimpleType(TypeID.U8, TypeName.U8);\n\n/**\n * Represents a 32-bit unsigned integer type in the Casper type system.\n */\nexport const CLTypeUInt32 = new SimpleType(TypeID.U32, TypeName.U32);\n\n/**\n * Represents a 64-bit unsigned integer type in the Casper type system.\n */\nexport const CLTypeUInt64 = new SimpleType(TypeID.U64, TypeName.U64);\n\n/**\n * Represents a 128-bit unsigned integer type in the Casper type system.\n */\nexport const CLTypeUInt128 = new SimpleType(TypeID.U128, TypeName.U128);\n\n/**\n * Represents a 256-bit unsigned integer type in the Casper type system.\n */\nexport const CLTypeUInt256 = new SimpleType(TypeID.U256, TypeName.U256);\n\n/**\n * Represents a 512-bit unsigned integer type in the Casper type system.\n */\nexport const CLTypeUInt512 = new SimpleType(TypeID.U512, TypeName.U512);\n\n/**\n * Represents a Unit type (similar to void) in the Casper type system.\n */\nexport const CLTypeUnit = new SimpleType(TypeID.Unit, TypeName.Unit);\n\n/**\n * Represents a String type in the Casper type system.\n */\nexport const CLTypeString = new SimpleType(TypeID.String, TypeName.String);\n\n/**\n * Represents a Key type in the Casper type system.\n */\nexport const CLTypeKey = new SimpleType(TypeID.Key, TypeName.Key);\n\n/**\n * Represents a URef (Unforgeable Reference) type in the Casper type system.\n */\nexport const CLTypeUref = new SimpleType(TypeID.URef, TypeName.URef);\n\n/**\n * Represents an Any type in the Casper type system.\n */\nexport const CLTypeAny = new SimpleType(TypeID.Any, TypeName.Any);\n\n/**\n * Represents a PublicKey type in the Casper type system.\n */\nexport const CLTypePublicKey = new SimpleType(\n  TypeID.PublicKey,\n  TypeName.PublicKey\n);\n","import { jsonObject } from 'typedjson';\nimport { CLType } from './CLType';\nimport { CLTypeParser } from './Parser';\n\n/**\n * Represents a raw CLType message that can be parsed into a `CLType` instance.\n * This class utilizes `typedjson` decorators for JSON serialization and deserialization.\n */\n@jsonObject\nexport class CLTypeRaw {\n  /**\n   * The raw message string representation of a CLType.\n   */\n  private rawMessage: CLType;\n\n  /**\n   * Initializes a new instance of the CLTypeRaw class.\n   * @param rawMessage - A string representing the raw CLType message.\n   */\n  constructor(rawMessage: CLType) {\n    this.rawMessage = rawMessage;\n  }\n\n  /**\n   * Parses the raw message into a `CLType` object.\n   * @returns A `CLType` instance if parsing is successful.\n   * @throws Error if parsing fails, with a descriptive error message.\n   */\n  static parseCLType(json: any): CLType | Error {\n    try {\n      return CLTypeParser.fromRawJson(json);\n    } catch (error) {\n      throw new Error(`Error parsing CLType: ${error.message}`);\n    }\n  }\n\n  /**\n   * Parses the raw message into a `CLType` object.\n   * @returns A `CLType` instance if parsing is successful.\n   * @throws Error if parsing fails, with a descriptive error message.\n   */\n  toJSON(): any {\n    return this.rawMessage?.toString() || this?.rawMessage?.toJSON();\n  }\n}\n","import { TypeID, TypeName, CLType } from './CLType';\n\n/**\n * Represents a dynamic CLType in the Casper type system.\n * This class allows for runtime determination of types, enabling dynamic manipulation of CLTypes.\n */\nexport class CLTypeDynamic implements CLType {\n  public typeID: TypeID;\n  public inner: CLType;\n\n  /**\n   * Initializes a new instance of the CLTypeDynamic class.\n   * @param typeID - The TypeID representing the dynamic type.\n   * @param inner - The inner CLType that this dynamic type represents.\n   */\n  constructor(typeID: TypeID, inner: CLType) {\n    this.typeID = typeID;\n    this.inner = inner;\n  }\n\n  /**\n   * Converts the CLTypeDynamic instance to its byte representation.\n   * @returns A Uint8Array representing the bytes of the inner CLType.\n   */\n  public toBytes(): Uint8Array {\n    return this.inner.toBytes();\n  }\n\n  /**\n   * Provides a string representation of the CLTypeDynamic.\n   * @returns A string representing the inner CLType.\n   */\n  public toString(): string {\n    return this.inner.toString();\n  }\n\n  /**\n   * Retrieves the type ID of the CLTypeDynamic.\n   * @returns The TypeID associated with this dynamic type.\n   */\n  public getTypeID(): TypeID {\n    return this.typeID;\n  }\n\n  /**\n   * Retrieves the name of the CLTypeDynamic.\n   * @returns The TypeName of the inner CLType.\n   */\n  public getName(): TypeName {\n    return this.inner.getName();\n  }\n\n  /**\n   * Converts the CLTypeDynamic instance to a JSON-compatible representation.\n   * @returns A JSON representation of the inner CLType.\n   */\n  public toJSON(): any {\n    return this.inner.toJSON();\n  }\n}\n","import { concat } from '@ethersproject/bytes';\nimport { CLType, TypeID, TypeName } from './CLType';\nimport { CLTypeParser } from './Parser';\n\n/**\n * Represents a List type in the Casper type system.\n * This class implements the CLType interface specifically for List types, allowing lists of elements with a specified type.\n */\nexport class CLTypeList implements CLType {\n  /**\n   * The type of elements contained in the list.\n   */\n  public elementsType: CLType;\n\n  /**\n   * Initializes a new instance of the CLTypeList class.\n   * @param elementsType - The CLType of the elements in the list.\n   */\n  constructor(elementsType: CLType) {\n    this.elementsType = elementsType;\n  }\n\n  /**\n   * Converts the CLTypeList instance to its byte representation.\n   * This includes the type ID for List followed by the byte representation of the element type.\n   * @returns A Uint8Array representing the CLTypeList.\n   */\n  public toBytes(): Uint8Array {\n    return concat([\n      Uint8Array.from([this.getTypeID()]),\n      this.elementsType.toBytes()\n    ]);\n  }\n\n  /**\n   * Provides a string representation of the CLTypeList.\n   * @returns A string in the format \"(List of [element type])\".\n   */\n  public toString(): string {\n    return `(${this.getName()} of ${this.elementsType.toString()})`;\n  }\n\n  /**\n   * Retrieves the type ID of the CLTypeList.\n   * @returns The TypeID associated with List.\n   */\n  public getTypeID(): TypeID {\n    return TypeID.List;\n  }\n\n  /**\n   * Retrieves the name of the CLTypeList.\n   * @returns The TypeName for List.\n   */\n  public getName(): TypeName {\n    return TypeName.List;\n  }\n\n  /**\n   * Converts the CLTypeList to a JSON-compatible representation.\n   * The JSON object contains a single key-value pair, where the key is \"List\" and the value is the JSON representation of the element type.\n   * @returns A JSON object representing the list type and its element type.\n   */\n  public toJSON(): { [key: string]: CLType } {\n    return { [this.getName()]: this.elementsType.toJSON() };\n  }\n\n  /**\n   * Creates a CLTypeList instance from a JSON representation.\n   * @param source - The JSON representation of the CLTypeList.\n   * @returns A new CLTypeList instance with the parsed element type.\n   */\n  public static fromJSON(source: any): CLTypeList {\n    const inner = CLTypeParser.fromInterface(source);\n    return new CLTypeList(inner);\n  }\n}\n","import { concat } from '@ethersproject/bytes';\nimport { TypeID, TypeName, CLType } from './CLType';\nimport { CLTypeParser } from './Parser';\n\n/**\n * Error thrown when there's an issue parsing the Map type from JSON.\n */\nexport const MapJsonParsingError = new Error('map type parsing error');\n\n/**\n * Represents a Map type in the Casper type system.\n * This class implements the CLType interface, allowing the use of key-value pairs with specified types.\n */\nexport class CLTypeMap implements CLType {\n  /**\n   * The CLType of the map's keys.\n   */\n  public key: CLType;\n\n  /**\n   * The CLType of the map's values.\n   */\n  public val: CLType;\n\n  /**\n   * Initializes a new instance of the CLTypeMap class.\n   * @param keyType - The CLType of the map's keys.\n   * @param valType - The CLType of the map's values.\n   */\n  constructor(keyType: CLType, valType: CLType) {\n    this.key = keyType;\n    this.val = valType;\n  }\n\n  /**\n   * Converts the CLTypeMap instance to its byte representation.\n   * This includes the type ID for Map followed by the byte representations of the key and value types.\n   * @returns A Uint8Array representing the CLTypeMap.\n   */\n  public toBytes(): Uint8Array {\n    return concat([\n      Uint8Array.from([this.getTypeID()]),\n      this.key.toBytes(),\n      this.val.toBytes()\n    ]);\n  }\n\n  /**\n   * Provides a string representation of the CLTypeMap.\n   * @returns A string in the format \"Map (keyType: valueType)\".\n   */\n  public toString(): string {\n    return `${TypeName.Map} (${this.key.toString()}: ${this.val.toString()})`;\n  }\n\n  /**\n   * Retrieves the type ID of the CLTypeMap.\n   * @returns The TypeID associated with Map.\n   */\n  public getTypeID(): TypeID {\n    return TypeID.Map;\n  }\n\n  /**\n   * Retrieves the name of the CLTypeMap.\n   * @returns The TypeName for Map.\n   */\n  public getName(): TypeName {\n    return TypeName.Map;\n  }\n\n  /**\n   * Converts the CLTypeMap instance to a JSON-compatible representation.\n   * The JSON object includes a \"Map\" key containing the JSON representations of the key and value types.\n   * @returns A JSON object representing the map type and its key and value types.\n   */\n  public toJSON(): { Map: { key: CLType; value: CLType } } {\n    return {\n      Map: {\n        key: this.key.toJSON(),\n        value: this.val.toJSON()\n      }\n    };\n  }\n\n  /**\n   * Creates a CLTypeMap instance from a JSON representation.\n   * Parses JSON input to determine the key and value types of the map.\n   * @param source - The JSON representation of the CLTypeMap.\n   * @returns A new CLTypeMap instance with parsed key and value types.\n   * @throws {MapJsonParsingError} If the JSON structure is invalid.\n   */\n  public static fromJSON(source: any): CLTypeMap {\n    if (typeof source !== 'object' || source === null) {\n      throw MapJsonParsingError;\n    }\n\n    const key = source.key;\n    if (key === undefined) {\n      throw MapJsonParsingError;\n    }\n    const keyType = CLTypeParser.fromInterface(key);\n\n    const val = source.value;\n    if (val === undefined) {\n      throw MapJsonParsingError;\n    }\n    const valType = CLTypeParser.fromInterface(val);\n\n    return new CLTypeMap(keyType, valType);\n  }\n}\n","import { concat } from '@ethersproject/bytes';\nimport { TypeID, TypeName, CLType } from './CLType';\nimport { CLTypeParser } from './Parser';\n\n/**\n * Represents an Option type in the Casper type system.\n * This class implements the CLType interface, allowing for optional values with specified inner types.\n */\nexport class CLTypeOption implements CLType {\n  /**\n   * The inner CLType that this Option may contain.\n   */\n  public inner: CLType;\n\n  /**\n   * Initializes a new instance of the CLTypeOption class.\n   * @param inner - The CLType of the value that this Option can contain.\n   */\n  constructor(inner: CLType) {\n    this.inner = inner;\n  }\n\n  /**\n   * Converts the CLTypeOption instance to its byte representation.\n   * This includes the type ID for Option followed by the byte representation of the inner type.\n   * @returns A Uint8Array representing the CLTypeOption.\n   */\n  public toBytes(): Uint8Array {\n    return concat([Uint8Array.from([this.getTypeID()]), this.inner.toBytes()]);\n  }\n\n  /**\n   * Provides a string representation of the CLTypeOption.\n   * @returns A string in the format \"(Option: innerType)\".\n   */\n  public toString(): string {\n    return `(${this.getName()}: ${this.inner.getName()})`;\n  }\n\n  /**\n   * Retrieves the type ID of the CLTypeOption.\n   * @returns The TypeID associated with Option.\n   */\n  public getTypeID(): TypeID {\n    return TypeID.Option;\n  }\n\n  /**\n   * Retrieves the name of the CLTypeOption.\n   * @returns The TypeName for Option.\n   */\n  public getName(): TypeName {\n    return TypeName.Option;\n  }\n\n  /**\n   * Converts the CLTypeOption instance to a JSON-compatible representation.\n   * The JSON object includes a single key-value pair, where the key is \"Option\" and the value is the JSON representation of the inner type.\n   * @returns A JSON object representing the option type and its inner type.\n   */\n  public toJSON(): { [key: string]: CLType } {\n    return { [this.getName()]: this.inner.toJSON() };\n  }\n\n  /**\n   * Creates a CLTypeOption instance from a JSON representation.\n   * Parses JSON input to determine the inner type of the option.\n   * @param source - The JSON representation of the CLTypeOption.\n   * @returns A new CLTypeOption instance with the parsed inner type.\n   */\n  public static fromJSON(source: any): CLTypeOption {\n    const inner = CLTypeParser.fromInterface(source);\n    return new CLTypeOption(inner);\n  }\n}\n","import {\n  TypeID,\n  TypeName,\n  CLType,\n  CLTypeBool,\n  CLTypeInt32,\n  CLTypeInt64,\n  CLTypeUInt8,\n  CLTypeUInt32,\n  CLTypeUInt64,\n  CLTypeUInt128,\n  CLTypeUInt256,\n  CLTypeUInt512,\n  CLTypeUnit,\n  CLTypeKey,\n  CLTypeUref,\n  CLTypeAny,\n  CLTypePublicKey,\n  CLTypeString\n} from './CLType';\nimport { CLTypeOption } from './Option';\nimport { CLTypeList } from './List';\nimport { CLTypeByteArray } from './ByteArray';\nimport { CLTypeResult } from './Result';\nimport { CLTypeMap } from './Map';\nimport { CLTypeTuple1 } from './Tuple1';\nimport { CLTypeTuple2 } from './Tuple2';\nimport { CLTypeTuple3 } from './Tuple3';\nimport { IResultWithBytes } from '../CLValue';\nimport { CLValueUInt32 } from '../Numeric';\n\n/**\n * A utility class for parsing various CLTypes from different formats, such as JSON, strings, and bytes.\n * This class includes static methods for handling both simple and complex types, along with error handling for unsupported or unrecognized formats.\n */\nexport class CLTypeParser {\n  /**\n   * Error thrown when a buffer constructor is not detected.\n   */\n  static readonly BufferConstructorNotDetectedError = new Error(\n    'buffer constructor not detected'\n  );\n\n  /**\n   * Error thrown when a complex type format is invalid.\n   */\n  static readonly ComplexTypeFormatInvalidError = new Error(\n    'complex type format is invalid'\n  );\n\n  /**\n   * Error thrown when a complex type format is not detected.\n   */\n  static readonly ErrComplexTypeFormatNotDetected = new Error(\n    'complex type format is not detected'\n  );\n\n  /**\n   * Error thrown when a JSON constructor is not found.\n   */\n  static readonly ErrJsonConstructorNotFound = new Error(\n    'json type constructor is not found'\n  );\n\n  /**\n   * A record of simple CLTypes indexed by their TypeName.\n   */\n  static readonly simpleTypeByName: Record<TypeName, CLType> = {\n    [TypeName.Bool]: CLTypeBool,\n    [TypeName.I32]: CLTypeInt32,\n    [TypeName.I64]: CLTypeInt64,\n    [TypeName.U8]: CLTypeUInt8,\n    [TypeName.U32]: CLTypeUInt32,\n    [TypeName.U64]: CLTypeUInt64,\n    [TypeName.U128]: CLTypeUInt128,\n    [TypeName.U256]: CLTypeUInt256,\n    [TypeName.U512]: CLTypeUInt512,\n    [TypeName.Unit]: CLTypeUnit,\n    [TypeName.String]: CLTypeString,\n    [TypeName.Key]: CLTypeKey,\n    [TypeName.URef]: CLTypeUref,\n    [TypeName.Any]: CLTypeAny,\n    [TypeName.PublicKey]: CLTypePublicKey\n  };\n\n  /**\n   * A record of simple CLTypes indexed by their TypeID.\n   */\n  static readonly simpleTypeByID: { [key in TypeID]?: CLType } = {\n    [TypeID.Bool]: CLTypeBool,\n    [TypeID.I32]: CLTypeInt32,\n    [TypeID.I64]: CLTypeInt64,\n    [TypeID.U8]: CLTypeUInt8,\n    [TypeID.U32]: CLTypeUInt32,\n    [TypeID.U64]: CLTypeUInt64,\n    [TypeID.U128]: CLTypeUInt128,\n    [TypeID.U256]: CLTypeUInt256,\n    [TypeID.U512]: CLTypeUInt512,\n    [TypeID.Unit]: CLTypeUnit,\n    [TypeID.String]: CLTypeString,\n    [TypeID.Key]: CLTypeKey,\n    [TypeID.URef]: CLTypeUref,\n    [TypeID.Any]: CLTypeAny,\n    [TypeID.PublicKey]: CLTypePublicKey\n  };\n\n  /**\n   * Retrieves a simple CLType by its TypeName.\n   * @param typeName - The TypeName of the CLType to retrieve.\n   * @returns The corresponding CLType.\n   * @throws Error if the type name is not registered.\n   */\n  static getSimpleTypeByName(typeName: TypeName): CLType {\n    const result = CLTypeParser.simpleTypeByName[typeName];\n    if (!result) {\n      throw new Error(`type name is not registered, source: ${typeName}`);\n    }\n    return result;\n  }\n\n  /**\n   * Parses a CLType from a raw JSON string.\n   * @param source - The raw JSON string to parse.\n   * @returns The parsed CLType.\n   */\n  static fromRawJson(source: any): CLType {\n    try {\n      return CLTypeParser.fromInterface(source);\n    } catch (err) {\n      return CLTypeParser.getSimpleTypeByName(source as TypeName);\n    }\n  }\n\n  /**\n   * Parses a CLType from a Uint8Array.\n   * @param bytes - The Uint8Array to parse.\n   * @returns An object containing the parsed CLType and the remaining bytes.\n   * @throws BufferConstructorNotDetectedError if the type is not recognized.\n   */\n  static matchBytesToCLType(bytes: Uint8Array): IResultWithBytes<CLType> {\n    const tag = bytes[0];\n    const remainder = bytes.subarray(1);\n\n    switch (tag) {\n      case TypeID.Bool:\n      case TypeID.I32:\n      case TypeID.I64:\n      case TypeID.U8:\n      case TypeID.U32:\n      case TypeID.U64:\n      case TypeID.U128:\n      case TypeID.U256:\n      case TypeID.U512:\n      case TypeID.Unit:\n      case TypeID.String:\n      case TypeID.Key:\n      case TypeID.URef:\n      case TypeID.Any:\n      case TypeID.PublicKey:\n        return {\n          result: CLTypeParser.simpleTypeByID[tag]!,\n          bytes: remainder\n        };\n      case TypeID.Option:\n        const {\n          result: optionInner,\n          bytes: optionBytes\n        } = CLTypeParser.matchBytesToCLType(remainder);\n        return { result: new CLTypeOption(optionInner), bytes: optionBytes };\n      case TypeID.List:\n        const {\n          result: listInner,\n          bytes: listBytes\n        } = CLTypeParser.matchBytesToCLType(remainder);\n        return { result: new CLTypeList(listInner), bytes: listBytes };\n      case TypeID.ByteArray:\n        const {\n          result: byteArraySize,\n          bytes: byteArrayBytes\n        } = CLValueUInt32.fromBytes(remainder);\n        return {\n          result: new CLTypeByteArray(byteArraySize.toNumber()),\n          bytes: byteArrayBytes\n        };\n      case TypeID.Result:\n        const {\n          result: innerOk,\n          bytes: resultBytes\n        } = CLTypeParser.matchBytesToCLType(remainder);\n\n        if (!resultBytes) {\n          throw new Error('Missing Error type bytes in Result');\n        }\n\n        const {\n          result: innerErr,\n          bytes: errBytes\n        } = CLTypeParser.matchBytesToCLType(resultBytes);\n        return { result: new CLTypeResult(innerOk, innerErr), bytes: errBytes };\n      case TypeID.Map:\n        const {\n          result: key,\n          bytes: keyBytes\n        } = CLTypeParser.matchBytesToCLType(remainder);\n\n        if (!keyBytes) {\n          throw new Error('Missing Key type bytes in Map');\n        }\n\n        const {\n          result: val,\n          bytes: valBytes\n        } = CLTypeParser.matchBytesToCLType(keyBytes);\n        return { result: new CLTypeMap(key, val), bytes: valBytes };\n      case TypeID.Tuple1:\n        const {\n          result: innerTypeRes,\n          bytes: tuple1Bytes\n        } = CLTypeParser.matchBytesToCLType(remainder);\n        return { result: new CLTypeTuple1(innerTypeRes), bytes: tuple1Bytes };\n      case TypeID.Tuple2:\n        const {\n          result: innerType1Res,\n          bytes: innerType1Bytes\n        } = CLTypeParser.matchBytesToCLType(remainder);\n\n        if (!innerType1Bytes) {\n          throw new Error('Missing second tuple type bytes in CLTuple2Type');\n        }\n\n        const {\n          result: innerType2Res,\n          bytes: innerType2Bytes\n        } = CLTypeParser.matchBytesToCLType(innerType1Bytes);\n        return {\n          result: new CLTypeTuple2(innerType1Res, innerType2Res),\n          bytes: innerType2Bytes\n        };\n      case TypeID.Tuple3:\n        const {\n          result: innerType1,\n          bytes: innerType1Byte\n        } = CLTypeParser.matchBytesToCLType(remainder);\n\n        if (!innerType1Byte) {\n          throw new Error('Missing second tuple type bytes in CLTuple3Type');\n        }\n\n        const {\n          result: innerType2,\n          bytes: innerType2Byte\n        } = CLTypeParser.matchBytesToCLType(innerType1Byte);\n\n        if (!innerType2Byte) {\n          throw new Error('Missing third tuple type bytes in CLTuple3Type');\n        }\n\n        const {\n          result: innerType3,\n          bytes: innerType3Byte\n        } = CLTypeParser.matchBytesToCLType(innerType2Byte);\n        return {\n          result: new CLTypeTuple3(innerType1, innerType2, innerType3),\n          bytes: innerType3Byte\n        };\n      default:\n        throw CLTypeParser.BufferConstructorNotDetectedError;\n    }\n  }\n\n  /**\n   * Parses a CLType from an interface (object or string).\n   * @param rawData - The data to parse.\n   * @returns The parsed CLType.\n   */\n  static fromInterface(rawData: any): CLType {\n    if (typeof rawData === 'string') {\n      return CLTypeParser.getSimpleTypeByName(rawData as TypeName);\n    }\n    return CLTypeParser.fromComplexStruct(rawData);\n  }\n\n  /**\n   * Parses a CLType from a complex structure.\n   * @param rawData - The complex structure to parse.\n   * @returns The parsed CLType.\n   * @throws Various errors if the structure is invalid or unrecognized.\n   */\n  private static fromComplexStruct(rawData: any): CLType {\n    if (typeof rawData === 'object' && rawData !== null) {\n      const keys = Object.keys(rawData);\n      if (keys.length > 1) {\n        throw CLTypeParser.ComplexTypeFormatInvalidError;\n      }\n      const key = keys[0];\n      const val = rawData[key];\n      switch (key) {\n        case TypeName.Option:\n          return CLTypeOption.fromJSON(val);\n        case TypeName.List:\n          return CLTypeList.fromJSON(val);\n        case TypeName.ByteArray:\n          return CLTypeByteArray.fromJSON(val);\n        case TypeName.Result:\n          return CLTypeResult.fromJSON(val);\n        case TypeName.Map:\n          return CLTypeMap.fromJSON(val);\n        case TypeName.Tuple1:\n          return CLTypeTuple1.fromJSON(val);\n        case TypeName.Tuple2:\n          return CLTypeTuple2.fromJSON(val);\n        case TypeName.Tuple3:\n          return CLTypeTuple3.fromJSON(val);\n        default:\n          throw CLTypeParser.ErrJsonConstructorNotFound;\n      }\n    }\n    throw CLTypeParser.ErrComplexTypeFormatNotDetected;\n  }\n}\n","import { concat } from '@ethersproject/bytes';\nimport { TypeID, TypeName, CLType } from './CLType';\nimport { CLTypeParser } from './Parser';\n\n/**\n * Error thrown when the JSON format for a Result type is invalid.\n */\nexport const ErrInvalidResultJsonFormat = new Error(\n  'invalid json format for Result type'\n);\n\n/**\n * Represents a Result type in the Casper type system.\n * This class implements the CLType interface, allowing for Result types with defined Ok and Err types.\n */\nexport class CLTypeResult implements CLType {\n  /**\n   * The CLType of the Ok value in the Result.\n   */\n  innerOk: CLType;\n\n  /**\n   * The CLType of the Err value in the Result.\n   */\n  innerErr: CLType;\n\n  /**\n   * Initializes a new instance of the CLTypeResult class.\n   * @param innerOk - The CLType of the Ok value.\n   * @param innerErr - The CLType of the Err value.\n   */\n  constructor(innerOk: CLType, innerErr: CLType) {\n    this.innerOk = innerOk;\n    this.innerErr = innerErr;\n  }\n\n  /**\n   * Converts the CLTypeResult instance to its byte representation.\n   * This includes the type ID for Result, followed by the byte representations of the Ok and Err types.\n   * @returns A Uint8Array representing the CLTypeResult.\n   */\n  public toBytes(): Uint8Array {\n    return concat([\n      Uint8Array.from([this.getTypeID()]),\n      this.innerOk.toBytes(),\n      this.innerErr.toBytes()\n    ]);\n  }\n\n  /**\n   * Provides a string representation of the CLTypeResult.\n   * @returns A string in the format \"(Result: Ok(okType), Err(errType))\".\n   */\n  public toString(): string {\n    return `(${this.getName()}: Ok(${this.innerOk.getName()}), Err(${this.innerErr.getName()}))`;\n  }\n\n  /**\n   * Retrieves the type ID of the CLTypeResult.\n   * @returns The TypeID associated with Result.\n   */\n  public getTypeID(): TypeID {\n    return TypeID.Result;\n  }\n\n  /**\n   * Retrieves the name of the CLTypeResult.\n   * @returns The TypeName for Result.\n   */\n  public getName(): TypeName {\n    return TypeName.Result;\n  }\n\n  /**\n   * Converts the CLTypeResult instance to a JSON-compatible representation.\n   * The JSON object includes a \"Result\" key containing the JSON representations of the Ok and Err types.\n   * @returns A JSON object representing the Result type and its Ok and Err types.\n   */\n  public toJSON(): { [key: string]: { ok: CLType; err: CLType } } {\n    return {\n      [this.getName()]: {\n        ok: this.innerOk.toJSON(),\n        err: this.innerErr.toJSON()\n      }\n    };\n  }\n\n  /**\n   * Creates a CLTypeResult instance from a JSON representation.\n   * Parses JSON input to determine the Ok and Err types for the Result.\n   * @param source - The JSON representation of the CLTypeResult.\n   * @returns A new CLTypeResult instance with parsed Ok and Err types.\n   * @throws {ErrInvalidResultJsonFormat} If the JSON structure is invalid.\n   */\n  public static fromJSON(source: any): CLTypeResult {\n    if (typeof source !== 'object' || source === null) {\n      throw ErrInvalidResultJsonFormat;\n    }\n\n    const okData = source.ok;\n    if (okData === undefined) {\n      throw ErrInvalidResultJsonFormat;\n    }\n    const innerOk = CLTypeParser.fromInterface(okData);\n\n    const errData = source.err;\n    if (errData === undefined) {\n      throw ErrInvalidResultJsonFormat;\n    }\n    const innerErr = CLTypeParser.fromInterface(errData);\n\n    return new CLTypeResult(innerOk, innerErr);\n  }\n}\n","import { concat } from '@ethersproject/bytes';\nimport { TypeID, TypeName, CLType } from './CLType';\nimport { CLTypeParser } from './Parser';\n\n/**\n * Represents a Tuple1 type in the Casper type system.\n * This class implements the CLType interface for tuples containing a single element.\n */\nexport class CLTypeTuple1 implements CLType {\n  /**\n   * The CLType of the single element in the Tuple1.\n   */\n  inner: CLType;\n\n  /**\n   * Initializes a new instance of the CLTypeTuple1 class.\n   * @param inner - The CLType of the single element in the Tuple1.\n   */\n  constructor(inner: CLType) {\n    this.inner = inner;\n  }\n\n  /**\n   * Converts the CLTypeTuple1 instance to its byte representation.\n   * This includes the type ID for Tuple1 followed by the byte representation of the inner type.\n   * @returns A Uint8Array representing the CLTypeTuple1.\n   */\n  public toBytes(): Uint8Array {\n    return concat([Uint8Array.from([this.getTypeID()]), this.inner.toBytes()]);\n  }\n\n  /**\n   * Provides a string representation of the CLTypeTuple1.\n   * @returns A string in the format \"Tuple1 (innerType)\".\n   */\n  public toString(): string {\n    return `${this.getName()} (${this.inner.toString()})`;\n  }\n\n  /**\n   * Retrieves the type ID of the CLTypeTuple1.\n   * @returns The TypeID associated with Tuple1.\n   */\n  public getTypeID(): TypeID {\n    return TypeID.Tuple1;\n  }\n\n  /**\n   * Retrieves the name of the CLTypeTuple1.\n   * @returns The TypeName for Tuple1.\n   */\n  public getName(): TypeName {\n    return TypeName.Tuple1;\n  }\n\n  /**\n   * Converts the CLTypeTuple1 instance to a JSON-compatible representation.\n   * The JSON object contains a \"Tuple1\" key with an array that includes the inner type.\n   * @returns A JSON object representing the Tuple1 type and its inner type.\n   */\n  public toJSON(): { [key: string]: CLType[] } {\n    return { [this.getName()]: [this.inner.toJSON()] };\n  }\n\n  /**\n   * Creates a CLTypeTuple1 instance from a JSON representation.\n   * Parses JSON input to determine the inner type for the Tuple1.\n   * @param source - The JSON representation of the CLTypeTuple1.\n   * @returns A new CLTypeTuple1 instance with the parsed inner type.\n   * @throws Error if the JSON structure is invalid or the inner type is not correctly specified.\n   */\n  public static fromJSON(source: any): CLTypeTuple1 {\n    if (!Array.isArray(source) || source.length !== 1) {\n      throw new Error(\n        'invalid tuple1 type format, should be array of 1 element'\n      );\n    }\n    const inner = CLTypeParser.fromInterface(source[0]);\n\n    if (!inner) {\n      throw new Error('Invalid inner type in Tuple1 JSON format');\n    }\n\n    return new CLTypeTuple1(inner);\n  }\n}\n","import { concat } from '@ethersproject/bytes';\nimport { TypeID, TypeName, CLType } from './CLType';\nimport { CLTypeParser } from './Parser';\n\n/**\n * Represents a Tuple2 type in the Casper type system.\n * This class implements the CLType interface for tuples containing two elements.\n */\nexport class CLTypeTuple2 implements CLType {\n  /**\n   * The CLType of the first element in the Tuple2.\n   */\n  inner1: CLType;\n\n  /**\n   * The CLType of the second element in the Tuple2.\n   */\n  inner2: CLType;\n\n  /**\n   * Initializes a new instance of the CLTypeTuple2 class.\n   * @param inner1 - The CLType of the first element in the Tuple2.\n   * @param inner2 - The CLType of the second element in the Tuple2.\n   */\n  constructor(inner1: CLType, inner2: CLType) {\n    this.inner1 = inner1;\n    this.inner2 = inner2;\n  }\n\n  /**\n   * Converts the CLTypeTuple2 instance to its byte representation.\n   * This includes the type ID for Tuple2 followed by the byte representations of both inner types.\n   * @returns A Uint8Array representing the CLTypeTuple2.\n   */\n  public toBytes(): Uint8Array {\n    return concat([\n      Uint8Array.from([this.getTypeID()]),\n      this.inner1.toBytes(),\n      this.inner2.toBytes()\n    ]);\n  }\n\n  /**\n   * Provides a string representation of the CLTypeTuple2.\n   * @returns A string in the format \"Tuple2 (innerType1, innerType2)\".\n   */\n  public toString(): string {\n    return `${this.getName()} (${this.inner1.toString()}, ${this.inner2.toString()})`;\n  }\n\n  /**\n   * Retrieves the type ID of the CLTypeTuple2.\n   * @returns The TypeID associated with Tuple2.\n   */\n  public getTypeID(): TypeID {\n    return TypeID.Tuple2;\n  }\n\n  /**\n   * Retrieves the name of the CLTypeTuple2.\n   * @returns The TypeName for Tuple2.\n   */\n  public getName(): TypeName {\n    return TypeName.Tuple2;\n  }\n\n  /**\n   * Converts the CLTypeTuple2 instance to a JSON-compatible representation.\n   * The JSON object contains a \"Tuple2\" key with an array including the two inner types.\n   * @returns A JSON object representing the Tuple2 type and its inner types.\n   */\n  public toJSON(): { [key: string]: CLType[] } {\n    return { [this.getName()]: [this.inner1.toJSON(), this.inner2.toJSON()] };\n  }\n\n  /**\n   * Creates a CLTypeTuple2 instance from a JSON representation.\n   * Parses JSON input to determine the two inner types for the Tuple2.\n   * @param source - The JSON representation of the CLTypeTuple2.\n   * @returns A new CLTypeTuple2 instance with the parsed inner types.\n   * @throws Error if the JSON structure is invalid or the inner types are not correctly specified.\n   */\n  public static fromJSON(source: any): CLTypeTuple2 {\n    if (!Array.isArray(source) || source.length !== 2) {\n      throw new Error(\n        'invalid tuple2 type format, should be array of 2 elements'\n      );\n    }\n    const inner1 = CLTypeParser.fromInterface(source[0]);\n    const inner2 = CLTypeParser.fromInterface(source[1]);\n\n    if (!inner1 || !inner2) {\n      throw new Error('Invalid inner types in Tuple2 JSON format');\n    }\n\n    return new CLTypeTuple2(inner1, inner2);\n  }\n}\n","import { concat } from '@ethersproject/bytes';\nimport { TypeID, TypeName, CLType } from './CLType';\nimport { CLTypeParser } from './Parser';\n\n/**\n * Represents a Tuple3 type in the Casper type system.\n * This class implements the CLType interface for tuples containing three elements.\n */\nexport class CLTypeTuple3 implements CLType {\n  /**\n   * The CLType of the first element in the Tuple3.\n   */\n  inner1: CLType;\n\n  /**\n   * The CLType of the second element in the Tuple3.\n   */\n  inner2: CLType;\n\n  /**\n   * The CLType of the third element in the Tuple3.\n   */\n  inner3: CLType;\n\n  /**\n   * Initializes a new instance of the CLTypeTuple3 class.\n   * @param inner1 - The CLType of the first element in the Tuple3.\n   * @param inner2 - The CLType of the second element in the Tuple3.\n   * @param inner3 - The CLType of the third element in the Tuple3.\n   */\n  constructor(inner1: CLType, inner2: CLType, inner3: CLType) {\n    this.inner1 = inner1;\n    this.inner2 = inner2;\n    this.inner3 = inner3;\n  }\n\n  /**\n   * Converts the CLTypeTuple3 instance to its byte representation.\n   * This includes the type ID for Tuple3 followed by the byte representations of the three inner types.\n   * @returns A Uint8Array representing the CLTypeTuple3.\n   */\n  public toBytes(): Uint8Array {\n    return concat([\n      Uint8Array.from([this.getTypeID()]),\n      this.inner1.toBytes(),\n      this.inner2.toBytes(),\n      this.inner3.toBytes()\n    ]);\n  }\n\n  /**\n   * Provides a string representation of the CLTypeTuple3.\n   * @returns A string in the format \"Tuple3 (innerType1, innerType2, innerType3)\".\n   */\n  public toString(): string {\n    return `${this.getName()} (${this.inner1.toString()}, ${this.inner2.toString()}, ${this.inner3.toString()})`;\n  }\n\n  /**\n   * Retrieves the type ID of the CLTypeTuple3.\n   * @returns The TypeID associated with Tuple3.\n   */\n  public getTypeID(): TypeID {\n    return TypeID.Tuple3;\n  }\n\n  /**\n   * Retrieves the name of the CLTypeTuple3.\n   * @returns The TypeName for Tuple3.\n   */\n  public getName(): TypeName {\n    return TypeName.Tuple3;\n  }\n\n  /**\n   * Converts the CLTypeTuple3 instance to a JSON-compatible representation.\n   * The JSON object contains a \"Tuple3\" key with an array that includes the three inner types.\n   * @returns A JSON object representing the Tuple3 type and its inner types.\n   */\n  public toJSON(): { [key: string]: CLType[] } {\n    return {\n      [this.getName()]: [\n        this.inner1.toJSON(),\n        this.inner2.toJSON(),\n        this.inner3.toJSON()\n      ]\n    };\n  }\n\n  /**\n   * Creates a CLTypeTuple3 instance from a JSON representation.\n   * Parses JSON input to determine the three inner types for the Tuple3.\n   * @param source - The JSON representation of the CLTypeTuple3.\n   * @returns A new CLTypeTuple3 instance with the parsed inner types.\n   * @throws Error if the JSON structure is invalid or the inner types are not correctly specified.\n   */\n  public static fromJSON(source: any): CLTypeTuple3 {\n    if (!Array.isArray(source) || source.length !== 3) {\n      throw new Error(\n        'invalid tuple3 type format, should be array of 3 elements'\n      );\n    }\n    const inner1 = CLTypeParser.fromInterface(source[0]);\n    const inner2 = CLTypeParser.fromInterface(source[1]);\n    const inner3 = CLTypeParser.fromInterface(source[2]);\n\n    if (!inner1 || !inner2 || !inner3) {\n      throw new Error('Invalid inner types in Tuple3 JSON format');\n    }\n\n    return new CLTypeTuple3(inner1, inner2, inner3);\n  }\n}\n","export * from './ByteArray';\nexport * from './CLType';\nexport * from './Map';\nexport * from './Dynamic';\nexport * from './List';\nexport * from './Option';\nexport * from './Parser';\nexport * from './Result';\nexport * from './Tuple1';\nexport * from './Tuple2';\nexport * from './Tuple3';\nexport * from './CLTypeRaw';\n","export * from './Any';\nexport * from './Bool';\nexport * from './ByteArray';\nexport * from './CLValue';\nexport * from './Numeric';\nexport * from './List';\nexport * from './Map';\nexport * from './Option';\nexport * from './Parser';\nexport * from './Result';\nexport * from './String';\nexport * from './Tuple1';\nexport * from './Tuple2';\nexport * from './Tuple3';\nexport * from './UintBig';\nexport * from './Unit';\nexport * from './cltype';\n","export * from './Account';\nexport * from './AddressableEntity';\nexport * from './Args';\nexport * from './AuctionState';\nexport * from './Bid';\nexport * from './BidKind';\nexport * from './Block';\nexport * from './BlockProposer';\nexport * from './Contract';\nexport * from './ContractPackage';\nexport * from './Deploy';\nexport * from './DeployInfo';\nexport * from './EntryPoint';\nexport * from './EraEnd';\nexport * from './EraInfo';\nexport * from './EraSummary';\nexport * from './ExecutableDeployItem';\nexport * from './ExecutionResult';\nexport * from './HexBytes';\nexport * from './InitiatorAddr';\nexport * from './MessageTopic';\nexport * from './MinimalBlockInfo';\nexport * from './NamedKey';\nexport * from './Package';\nexport * from './PricingMode';\nexport * from './Prepayment';\nexport * from './StoredValue';\nexport * from './Time';\nexport * from './Transaction';\nexport * from './TransactionV1Payload';\nexport * from './TransactionEntryPoint';\nexport * from './TransactionScheduling';\nexport * from './TransactionTarget';\nexport * from './Transfer';\nexport * from './Transform';\nexport * from './UnbondingPurse';\nexport * from './ValidatorWeight';\nexport * from './Conversions';\nexport * from './key';\nexport * from './clvalue';\nexport * from './keypair';\nexport * from './ContractWasm';\nexport * from './TransactionBuilder';\nexport * from './ByteConverters';\nexport * from './SerializationUtils';\n","import { jsonObject } from 'typedjson';\nimport { Hash } from './Hash';\nimport { PrefixName } from './Key';\n\n/**\n * Represents an account hash in the Casper network.\n * This class extends the `Hash` class, adding specific methods and properties for managing account hashes, which include special prefixes.\n */\n@jsonObject\nexport class AccountHash extends Hash {\n  /**\n   * Stores the prefix of the original hash string if it had one.\n   * Possible prefixes are `\"00\"` or `\"account-hash-\"`.\n   */\n  private originPrefix: string;\n\n  /**\n   * Initializes a new AccountHash instance.\n   * @param hash - The underlying Hash object containing the raw bytes of the account hash.\n   * @param originPrefix - Optional. The prefix of the original hash string (default is an empty string).\n   */\n  constructor(hash: Hash, originPrefix = '') {\n    super(hash.toBytes());\n    this.originPrefix = originPrefix;\n  }\n\n  /**\n   * Parses a string representation of an account hash and creates an AccountHash instance.\n   * Recognizes and preserves any prefix, either `\"00\"` or `\"account-hash-\"`.\n   * @param source - The string representation of the account hash.\n   * @returns A new AccountHash instance containing the parsed hash and prefix.\n   */\n  public static fromString(source: string): AccountHash {\n    let originPrefix = '';\n    if (source.length === 66 && source.startsWith('00')) {\n      originPrefix = '00';\n    } else if (source.startsWith(PrefixName.Account)) {\n      originPrefix = PrefixName.Account;\n    }\n\n    const hexString = source.slice(originPrefix.length);\n    const hash = Hash.fromHex(hexString);\n    return new AccountHash(hash, originPrefix);\n  }\n\n  /**\n   * Returns the account hash as a string, prefixed with `\"account-hash-\"`.\n   * This is useful for displaying the hash in a format recognized by the Casper network.\n   * @returns The account hash as a prefixed string.\n   */\n  public toPrefixedString(): string {\n    return PrefixName.Account + this.toHex();\n  }\n\n  /**\n   * Serializes the AccountHash to its JSON representation.\n   * The JSON representation includes the original prefix if present.\n   * @returns A string representation of the AccountHash for JSON serialization.\n   */\n  public toJSON(): string {\n    return this.originPrefix + this.toHex();\n  }\n\n  /**\n   * Deserializes an AccountHash instance from a JSON string representation.\n   * @param data - The JSON string representation of the AccountHash.\n   * @returns A new AccountHash instance created from the JSON string.\n   * @throws {Error} Throws an error if the input is not a valid JSON string.\n   */\n  public static fromJSON(data: string): AccountHash {\n    return AccountHash.fromString(data);\n  }\n}\n","import { jsonObject, jsonMember } from 'typedjson';\nimport { Hash } from './Hash';\nimport { PrefixName } from './Key';\n\n/**\n * Represents an addressable entity hash in the Casper network.\n * This class extends the `Hash` class to include a prefix indicating it is an addressable entity, adding specific methods and properties for managing such hashes.\n */\n@jsonObject\nexport class AddressableEntityHash extends Hash {\n  /**\n   * Stores the prefix of the original hash string if it had one.\n   * Defaults to `addressable-entity-` if not provided.\n   */\n  @jsonMember({ constructor: String })\n  originPrefix: string;\n\n  /**\n   * Initializes a new AddressableEntityHash instance.\n   * @param hashBytes - The byte array representing the hash value.\n   * @param originPrefix - Optional. The prefix of the original hash string. Defaults to `addressable-entity-`.\n   */\n  constructor(\n    hashBytes: Uint8Array,\n    originPrefix: string = PrefixName.AddressableEntity\n  ) {\n    super(hashBytes);\n    this.originPrefix = originPrefix;\n  }\n\n  /**\n   * Parses a hexadecimal string to create an AddressableEntityHash instance.\n   * Checks if the input string starts with the `addressable-entity-` prefix, removing it if present.\n   * @param source - The hexadecimal string representation of the hash, with or without the prefix.\n   * @returns A new AddressableEntityHash instance.\n   */\n  static fromHex(source: string): AddressableEntityHash {\n    const originPrefix = source.startsWith(PrefixName.AddressableEntity)\n      ? PrefixName.AddressableEntity\n      : '';\n    const hexBytes = Hash.fromHex(source.replace(originPrefix, ''));\n    return new AddressableEntityHash(hexBytes.toBytes(), originPrefix);\n  }\n\n  /**\n   * Returns the addressable entity hash as a prefixed string.\n   * Always includes the `addressable-entity-` prefix.\n   * @returns The prefixed hexadecimal string representation of the hash.\n   */\n  toPrefixedString(): string {\n    return `${PrefixName.AddressableEntity}${this.toHex()}`;\n  }\n\n  /**\n   * Serializes the AddressableEntityHash to its JSON representation.\n   * The JSON representation includes the original prefix if it was specified.\n   * @returns A string combining the prefix (if present) and the hexadecimal representation of the hash.\n   */\n  toJSON(): string {\n    return `${this.originPrefix}${this.toHex()}`;\n  }\n\n  /**\n   * Deserializes an AddressableEntityHash instance from a JSON string representation.\n   * @param json - The JSON string representation of the AddressableEntityHash, with or without the prefix.\n   * @returns A new AddressableEntityHash instance created from the JSON string.\n   */\n  static fromJSON(json: string): AddressableEntityHash {\n    return AddressableEntityHash.fromHex(json);\n  }\n}\n","import { jsonMember, jsonObject } from 'typedjson';\nimport { Conversions } from '../Conversions';\nimport { IResultWithBytes } from '../clvalue';\nimport { PrefixName } from './Key';\n\n/**\n * Enum representing the types of balance hold addresses.\n */\nexport enum BalanceHoldAddrTag {\n  Gas = 0,\n  Processing = 1\n}\n\n/**\n * Custom error class for BalanceHoldAddrTag related errors.\n */\nexport class BalanceHoldAddrTagError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'BalanceHoldAddrTagError';\n  }\n}\n\n/**\n * Validates and returns the BalanceHoldAddrTag for a given tag number.\n * @param tag - The tag number to validate.\n * @returns The corresponding BalanceHoldAddrTag.\n * @throws BalanceHoldAddrTagError if the tag is invalid.\n */\nexport function getBalanceHoldAddrTag(tag: number): BalanceHoldAddrTag {\n  if (tag === BalanceHoldAddrTag.Gas || tag === BalanceHoldAddrTag.Processing) {\n    return tag;\n  }\n  throw new BalanceHoldAddrTagError('Invalid BalanceHoldAddrTag');\n}\n\n/**\n * Constants related to the structure of a BalanceHoldAddr.\n */\nconst ByteHashLen = 32;\nconst BlockTypeBytesLen = 8;\n\ntype URefAddr = Uint8Array;\n\n/**\n * Represents a hold on a balance, including the address of the purse and the block time.\n */\n@jsonObject\nexport class Hold {\n  /**\n   * The address of the purse on which the hold is placed.\n   */\n  @jsonMember({ name: 'PurseAddr', constructor: Uint8Array })\n  purseAddr: URefAddr;\n\n  /**\n   * The block time at which the hold was created.\n   */\n  @jsonMember({\n    name: 'BlockTime',\n    constructor: Date,\n    serializer: (n: number) => new Date(n).toISOString(),\n    deserializer: (s: string) => Date.parse(s)\n  })\n  blockTime: Date;\n\n  constructor(purseAddr: URefAddr, blockTime: Date) {\n    this.purseAddr = purseAddr;\n    this.blockTime = blockTime;\n  }\n}\n\n/**\n * Represents an address holding a balance, categorized by either 'Gas' or 'Processing' type.\n */\n@jsonObject\nexport class BalanceHoldAddr {\n  /**\n   * The hold categorized as 'Gas', if any.\n   */\n  @jsonMember({ name: 'Gas', constructor: Hold })\n  gas?: Hold;\n\n  /**\n   * The hold categorized as 'Processing', if any.\n   */\n  @jsonMember({ name: 'Processing', constructor: Hold })\n  processing?: Hold;\n\n  constructor(gas?: Hold, processing?: Hold) {\n    this.gas = gas;\n    this.processing = processing;\n  }\n\n  /**\n   * Parses a string representation of a BalanceHoldAddr and returns a new instance.\n   * @param source - The string representation of the BalanceHoldAddr.\n   * @returns A new BalanceHoldAddr instance.\n   */\n  static fromString(source: string): BalanceHoldAddr {\n    const decoded = new Uint8Array(\n      source.match(/.{1,2}/g)?.map(byte => parseInt(byte, 16)) || []\n    );\n    return BalanceHoldAddr.fromBytes(decoded)?.result;\n  }\n\n  /**\n   * Converts the BalanceHoldAddr to a prefixed string, using 'balance-hold-' as the prefix.\n   * @returns The prefixed string representation of the BalanceHoldAddr.\n   */\n  toPrefixedString(): string {\n    const bytes = this.toBytes();\n    return PrefixName.BalanceHold + Conversions.encodeBase16(bytes);\n  }\n\n  /**\n   * Serializes the BalanceHoldAddr to its byte representation.\n   * Includes a byte for the hold type, the purse address, and an 8-byte block time.\n   * @returns The serialized byte representation of the BalanceHoldAddr.\n   */\n  toBytes(): Uint8Array {\n    let hold = this.gas;\n    let holdType = BalanceHoldAddrTag.Gas;\n\n    if (this.processing) {\n      holdType = BalanceHoldAddrTag.Processing;\n      hold = this.processing;\n    }\n\n    const result = new Uint8Array(ByteHashLen + BlockTypeBytesLen + 1);\n    result[0] = holdType;\n\n    result.set(hold!.purseAddr, 1);\n\n    const blockTimeMillis = hold!.blockTime.getTime();\n    const blockTimeBuffer = Buffer.alloc(8);\n    blockTimeBuffer.writeBigUInt64LE(BigInt(blockTimeMillis));\n    result.set(blockTimeBuffer, ByteHashLen + 1);\n\n    return result;\n  }\n\n  /**\n   * Deserializes a BalanceHoldAddr from a byte array.\n   * @param bytes - The byte array containing the BalanceHoldAddr data.\n   * @returns A new BalanceHoldAddr instance.\n   * @throws Error if the byte format is invalid.\n   * @throws BalanceHoldAddrTagError if the hold type is unexpected.\n   */\n  static fromBytes(bytes: Uint8Array): IResultWithBytes<BalanceHoldAddr> {\n    if (bytes.length < ByteHashLen + BlockTypeBytesLen + 1) {\n      throw new Error('Invalid BalanceHoldAddr format');\n    }\n\n    const tag = bytes[0];\n    const balanceHoldAddrTag = getBalanceHoldAddrTag(tag);\n\n    const purseAddr = bytes.slice(1, ByteHashLen + 1);\n    const blockTimeMillis = new DataView(\n      bytes.buffer,\n      ByteHashLen + 1\n    ).getBigUint64(0, true);\n    const blockTime = new Date(Number(blockTimeMillis));\n\n    const hold = new Hold(purseAddr, blockTime);\n\n    if (balanceHoldAddrTag === BalanceHoldAddrTag.Gas) {\n      return { result: new BalanceHoldAddr(hold, undefined), bytes: purseAddr };\n    } else if (balanceHoldAddrTag === BalanceHoldAddrTag.Processing) {\n      return { result: new BalanceHoldAddr(undefined, hold), bytes: purseAddr };\n    }\n\n    throw new BalanceHoldAddrTagError('Unexpected BalanceHoldAddr type');\n  }\n\n  /**\n   * Parses a JSON string representation of a BalanceHoldAddr.\n   * @param json - The JSON string.\n   * @returns A new BalanceHoldAddr instance.\n   */\n  public static fromJSON(json: string): BalanceHoldAddr {\n    return this.fromString(json);\n  }\n\n  /**\n   * Serializes the BalanceHoldAddr to its JSON string representation.\n   * @returns The JSON string representation of the BalanceHoldAddr.\n   */\n  public toJSON(): string {\n    return this.toPrefixedString();\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber';\n\nimport { jsonMember, jsonObject } from 'typedjson';\nimport { Hash } from './Hash';\nimport { IResultWithBytes } from '../clvalue';\nimport { HexBytes } from '../HexBytes';\nimport { toBytesString } from '../ByteConverters';\n\n/**\n * Enum representing the different types of bid addresses.\n * Each type corresponds to a specific tag value that uniquely identifies the bid address type.\n */\nexport enum BidAddrTag {\n  UnifiedTag = 0,\n  ValidatorTag,\n  DelegatedAccountTag,\n  DelegatedPurseTag,\n  CreditTag,\n  ReservedDelegationAccountTag,\n  ReservedDelegationPurseTag,\n  UnbondAccountTag,\n  UnbondPurseTag\n}\n\n/** Error indicating an invalid BidAddrTag was encountered. */\nexport const ErrInvalidBidAddrTag = new Error('Invalid BidAddrTag');\n\n/** Error indicating an unexpected BidAddrTag was found in a BidAddr. */\nexport const ErrUnexpectedBidAddrTagInBidAddr = new Error(\n  'Unexpected BidAddrTag in BidAddr'\n);\n\n/** Error indicating the BidAddr format is invalid. */\nexport const ErrInvalidBidAddrFormat = new Error('Invalid BidAddr format');\n\n// Constants defining specific key lengths based on tag type\nconst UnifiedOrValidatorAddrLen = 33; // BidAddrTag(1) + Hash(32)\nconst CreditAddrLen = 41; // BidAddrTag(1) + Hash(32) + EraId(8)\nconst ValidatorHashDelegatorAddrLen = 65; // BidAddrTag(1) + Hash(32) + Hash(32)\n\n/**\n * Represents a bid address, which stores information such as unified, validator, delegator, or credit data types.\n */\n@jsonObject\nexport class BidAddr {\n  /** Unified hash for UnifiedTag addresses. */\n  @jsonMember({ name: 'Unified', constructor: Hash })\n  unified?: Hash;\n\n  /** Validator hash for ValidatorTag addresses. */\n  @jsonMember({ name: 'Validator', constructor: Hash })\n  validator?: Hash;\n\n  /** Delegator account hash for DelegatedAccountTag addresses. */\n  @jsonMember({ name: 'DelegatorAccount', constructor: Hash })\n  delegatorAccount?: Hash;\n\n  /** Delegator purse address for DelegatedPurseTag addresses. */\n  @jsonMember({ name: 'DelegatorPurseAddress', constructor: String })\n  delegatorPurseAddress?: string;\n\n  /** Era ID for CreditTag addresses. */\n  @jsonMember({ name: 'EraId', constructor: Number })\n  eraId?: number;\n\n  /** Private field indicating the tag type of the BidAddr. */\n  private tag: BidAddrTag;\n\n  /**\n   * Validates and returns the BidAddrTag from a numeric value.\n   * @param tag - The numeric tag value to validate.\n   * @returns The corresponding BidAddrTag.\n   * @throws {ErrInvalidBidAddrTag} If the tag value is invalid.\n   */\n  static bidAddrTag(tag: number): BidAddrTag {\n    const addrTag = tag as BidAddrTag;\n\n    if (!Object.values(BidAddrTag).includes(addrTag)) {\n      throw ErrInvalidBidAddrTag;\n    }\n\n    return addrTag;\n  }\n\n  /**\n   * Returns the tag associated with the bid address.\n   * @returns The BidAddrTag of the bid address.\n   */\n  public getTag(): BidAddrTag {\n    return this.tag;\n  }\n\n  /**\n   * Creates a BidAddr from a hexadecimal string.\n   * @param source - The hexadecimal string representation of the BidAddr.\n   * @returns A new BidAddr instance.\n   * @throws {ErrInvalidBidAddrFormat} If the format is invalid.\n   * @throws {ErrUnexpectedBidAddrTagInBidAddr} If an unexpected tag is encountered.\n   */\n  static fromHex(source: string): BidAddr {\n    const hexBytes = Buffer.from(source, 'hex');\n\n    if (hexBytes.length === 0) {\n      throw new Error('Wrong key length.');\n    }\n\n    const bidAddrTag = BidAddr.bidAddrTag(hexBytes[0]);\n    const bidAddr = new BidAddr();\n    bidAddr.tag = bidAddrTag;\n\n    switch (bidAddrTag) {\n      case BidAddrTag.UnifiedTag:\n      case BidAddrTag.ValidatorTag:\n        if (hexBytes.length !== UnifiedOrValidatorAddrLen) {\n          throw new Error(\n            `Wrong key length for ${BidAddrTag[bidAddrTag]} BidAddr. Expected 33 bytes.`\n          );\n        }\n        const key =\n          bidAddrTag === BidAddrTag.UnifiedTag ? 'unified' : 'validator';\n        bidAddr[key] = Hash.fromBytes(hexBytes.slice(1, 33))?.result;\n        break;\n\n      case BidAddrTag.DelegatedAccountTag:\n      case BidAddrTag.ReservedDelegationAccountTag:\n      case BidAddrTag.UnbondAccountTag:\n        if (hexBytes.length !== ValidatorHashDelegatorAddrLen) {\n          throw new Error(\n            `Wrong key length for ${BidAddrTag[bidAddrTag]} BidAddr. Expected 65 bytes.`\n          );\n        }\n        bidAddr.validator = Hash.fromBytes(hexBytes.slice(1, 33))?.result;\n        bidAddr.delegatorAccount = Hash.fromBytes(hexBytes.slice(33))?.result;\n        break;\n\n      case BidAddrTag.DelegatedPurseTag:\n      case BidAddrTag.ReservedDelegationPurseTag:\n      case BidAddrTag.UnbondPurseTag:\n        if (hexBytes.length !== ValidatorHashDelegatorAddrLen) {\n          throw new Error(\n            `Wrong key length for ${BidAddrTag[bidAddrTag]} BidAddr. Expected 65 bytes.`\n          );\n        }\n\n        bidAddr.validator = Hash.fromBytes(hexBytes.slice(1, 33))?.result;\n        bidAddr.delegatorPurseAddress = new HexBytes(\n          hexBytes.slice(33)\n        ).toHex();\n        break;\n\n      case BidAddrTag.CreditTag:\n        if (hexBytes.length !== CreditAddrLen) {\n          throw new Error(\n            'Wrong key length for Credit BidAddr. Expected 41 bytes.'\n          );\n        }\n        bidAddr.validator = Hash.fromBytes(hexBytes.slice(1, 33))?.result;\n        bidAddr.eraId = hexBytes.readUInt32LE(33);\n        break;\n\n      default:\n        throw new Error(`Wrong BidAddr tag ${bidAddrTag}.`);\n    }\n\n    return bidAddr;\n  }\n\n  /**\n   * Creates a BidAddr from a byte array.\n   * @param bytes - The byte array.\n   * @returns A new BidAddr instance.\n   * @throws {ErrInvalidBidAddrFormat} If the format is invalid.\n   */\n  static fromBytes(bytes: Uint8Array): IResultWithBytes<BidAddr> {\n    if (bytes.length < UnifiedOrValidatorAddrLen) throw ErrInvalidBidAddrFormat;\n\n    const tag = bytes[0];\n    const rem = bytes.subarray(1);\n    const bidAddrTag = BidAddr.bidAddrTag(tag);\n    const bidAddr = new BidAddr();\n    bidAddr.tag = bidAddrTag;\n\n    const parseHashPair = (\n      input: Uint8Array\n    ): { validator: Hash; delegator: Hash; bytes: Uint8Array } => {\n      const { result: validator, bytes: nextBytes } = Hash.fromBytes(input);\n      const { result: delegator, bytes } = Hash.fromBytes(nextBytes!);\n      return { validator, delegator, bytes };\n    };\n\n    const parseHexBytesPair = (\n      input: Uint8Array\n    ): { validator: Hash; delegator: string; bytes: Uint8Array } => {\n      const { result: validator, bytes: nextBytes } = Hash.fromBytes(input);\n      const hexBytes = new HexBytes(nextBytes!);\n      return { validator, delegator: hexBytes.toHex(), bytes: hexBytes.bytes };\n    };\n\n    switch (bidAddrTag) {\n      case BidAddrTag.UnifiedTag: {\n        const { result: unifiedHash, bytes } = Hash.fromBytes(rem);\n        bidAddr.unified = unifiedHash;\n        return { result: bidAddr, bytes };\n      }\n      case BidAddrTag.ValidatorTag: {\n        const { result: validatorHash, bytes } = Hash.fromBytes(rem);\n        bidAddr.validator = validatorHash;\n        return { result: bidAddr, bytes };\n      }\n      case BidAddrTag.DelegatedAccountTag: {\n        const { validator, delegator, bytes } = parseHashPair(rem);\n        bidAddr.delegatorAccount = delegator;\n        bidAddr.validator = validator;\n        return { result: bidAddr, bytes };\n      }\n      case BidAddrTag.CreditTag: {\n        const { result: validator, bytes: nextBytes } = Hash.fromBytes(rem);\n        const eraIdBytes = Uint8Array.from(nextBytes!.subarray(0, 8));\n        bidAddr.eraId = BigNumber.from(eraIdBytes.slice().reverse()).toNumber();\n        bidAddr.validator = validator;\n        return { result: bidAddr, bytes: nextBytes };\n      }\n      case BidAddrTag.DelegatedPurseTag: {\n        const { validator, delegator, bytes } = parseHexBytesPair(rem);\n        bidAddr.validator = validator;\n        bidAddr.delegatorPurseAddress = delegator;\n        return { result: bidAddr, bytes };\n      }\n      case BidAddrTag.ReservedDelegationAccountTag: {\n        const { validator, delegator, bytes } = parseHashPair(rem);\n        bidAddr.validator = validator;\n        bidAddr.delegatorAccount = delegator;\n        return { result: bidAddr, bytes };\n      }\n      case BidAddrTag.ReservedDelegationPurseTag: {\n        const { validator, delegator, bytes } = parseHexBytesPair(rem);\n        bidAddr.validator = validator;\n        bidAddr.delegatorPurseAddress = delegator;\n        return { result: bidAddr, bytes };\n      }\n      case BidAddrTag.UnbondAccountTag: {\n        const { validator, delegator, bytes } = parseHashPair(rem);\n        bidAddr.validator = validator;\n        bidAddr.delegatorAccount = delegator;\n        return { result: bidAddr, bytes };\n      }\n      case BidAddrTag.UnbondPurseTag: {\n        const { validator, delegator, bytes } = parseHexBytesPair(rem);\n        bidAddr.validator = validator;\n        bidAddr.delegatorPurseAddress = delegator;\n        return { result: bidAddr, bytes };\n      }\n      default:\n        throw ErrInvalidBidAddrFormat;\n    }\n  }\n\n  /**\n   * Returns a prefixed string representation of the BidAddr.\n   * @returns The prefixed string representation.\n   */\n  toPrefixedString(): string {\n    return `bid-addr-${this.toHex()}`;\n  }\n\n  /**\n   * Converts the BidAddr to its hexadecimal string representation, ensuring proper formatting.\n   * @returns The hexadecimal string representation of the BidAddr.\n   * @throws {Error} If the BidAddr type is unexpected or required fields are missing.\n   */\n  toHex(): string {\n    const tagHex = this.tag.toString(16).padStart(2, '0');\n\n    switch (this.tag) {\n      case BidAddrTag.UnifiedTag:\n        if (!this.unified) {\n          throw new Error(\n            `Missing 'unified' field for tag ${BidAddrTag.UnifiedTag}`\n          );\n        }\n        return `${tagHex}${this.unified.toHex()}`;\n      case BidAddrTag.ValidatorTag:\n        if (!this.validator) {\n          throw new Error(\n            `Missing 'validator' field for tag ${BidAddrTag.ValidatorTag}`\n          );\n        }\n        return `${tagHex}${this.validator.toHex()}`;\n      case BidAddrTag.DelegatedAccountTag:\n        if (!this.validator || !this.delegatorAccount) {\n          throw new Error(\n            `Missing 'validator' or 'delegatorAccount' field for tag ${BidAddrTag.DelegatedAccountTag}`\n          );\n        }\n        return `${tagHex}${this.validator.toHex()}${this.delegatorAccount.toHex()}`;\n      case BidAddrTag.DelegatedPurseTag:\n        if (!this.validator || !this.delegatorPurseAddress) {\n          throw new Error(\n            `Missing 'validator' or 'delegatorPurseAddress' field for tag ${BidAddrTag.DelegatedPurseTag}`\n          );\n        }\n        return `${tagHex}${this.validator.toHex()}${\n          this.delegatorPurseAddress\n        }`;\n      case BidAddrTag.CreditTag:\n        if (!this.validator || this.eraId === undefined) {\n          throw new Error(\n            `Missing 'validator' or 'eraId' field for tag ${BidAddrTag.CreditTag}`\n          );\n        }\n        const eraIdHex = Buffer.alloc(8);\n        eraIdHex.writeUInt32LE(this.eraId, 0);\n        return `${tagHex}${this.validator.toHex()}${eraIdHex.toString('hex')}`;\n      case BidAddrTag.ReservedDelegationAccountTag:\n        if (!this.validator || !this.delegatorAccount) {\n          throw new Error(\n            `Missing 'validator' or 'delegatorAccount' field for tag ${BidAddrTag.ReservedDelegationAccountTag}`\n          );\n        }\n        return `${tagHex}${this.validator.toHex()}${this.delegatorAccount.toHex()}`;\n      case BidAddrTag.ReservedDelegationPurseTag:\n        if (!this.validator || !this.delegatorPurseAddress) {\n          throw new Error(\n            `Missing 'validator' or 'delegatorPurseAddress' field for tag ${BidAddrTag.ReservedDelegationPurseTag}`\n          );\n        }\n        return `${tagHex}${this.validator.toHex()}${\n          this.delegatorPurseAddress\n        }`;\n      case BidAddrTag.UnbondAccountTag:\n        if (!this.validator || !this.delegatorAccount) {\n          throw new Error(\n            `Missing 'validator' or 'delegatorAccount' field for tag ${BidAddrTag.UnbondAccountTag}`\n          );\n        }\n        return `${tagHex}${this.validator.toHex()}${this.delegatorAccount.toHex()}`;\n      case BidAddrTag.UnbondPurseTag:\n        if (!this.validator || !this.delegatorPurseAddress) {\n          throw new Error(\n            `Missing 'validator' or 'delegatorPurseAddress' field for tag ${BidAddrTag.UnbondPurseTag}`\n          );\n        }\n        return `${tagHex}${this.validator.toHex()}${\n          this.delegatorPurseAddress\n        }`;\n      default:\n        throw new Error(`Unexpected BidAddr type: ${this.tag}`);\n    }\n  }\n\n  /**\n   * Converts the BidAddr to a byte array.\n   * @returns The byte array representation of the BidAddr.\n   * @throws {Error} If the BidAddr type is unexpected.\n   */\n  toBytes(): Uint8Array {\n    const typeByte = this.getTag();\n\n    const concatBuffers = (buffers: Buffer[]): Buffer => Buffer.concat(buffers);\n\n    const createBuffer = (tag: number, ...parts: Uint8Array[]): Buffer => {\n      return concatBuffers([Buffer.from([tag]), ...parts.map(Buffer.from)]);\n    };\n\n    switch (typeByte) {\n      case BidAddrTag.UnifiedTag:\n        return new Uint8Array(createBuffer(typeByte, this.unified!.toBytes()));\n      case BidAddrTag.ValidatorTag:\n        return new Uint8Array(\n          createBuffer(typeByte, this.validator!.toBytes())\n        );\n      case BidAddrTag.DelegatedAccountTag:\n        if (this.delegatorAccount && this.validator) {\n          return new Uint8Array(\n            createBuffer(\n              typeByte,\n              this.validator.toBytes(),\n              this.delegatorAccount.toBytes()\n            )\n          );\n        }\n        break;\n      case BidAddrTag.DelegatedPurseTag:\n        if (this.delegatorPurseAddress && this.validator) {\n          return new Uint8Array(\n            createBuffer(\n              typeByte,\n              this.validator.toBytes(),\n              toBytesString(this.delegatorPurseAddress)\n            )\n          );\n        }\n        break;\n      case BidAddrTag.CreditTag:\n        if (this.validator && this.eraId) {\n          const eraIdBuffer = Buffer.alloc(8);\n          eraIdBuffer.writeBigUInt64LE(BigInt(this.eraId), 0);\n          return new Uint8Array(\n            createBuffer(\n              typeByte,\n              this.validator.toBytes(),\n              new Uint8Array(eraIdBuffer)\n            )\n          );\n        }\n        break;\n      case BidAddrTag.ReservedDelegationAccountTag:\n        if (this.validator && this.delegatorAccount) {\n          return new Uint8Array(\n            createBuffer(\n              typeByte,\n              this.validator.toBytes(),\n              this.delegatorAccount.toBytes()\n            )\n          );\n        }\n        break;\n      case BidAddrTag.ReservedDelegationPurseTag:\n        if (this.delegatorPurseAddress && this.validator) {\n          return new Uint8Array(\n            createBuffer(\n              typeByte,\n              this.validator.toBytes(),\n              toBytesString(this.delegatorPurseAddress)\n            )\n          );\n        }\n        break;\n      case BidAddrTag.UnbondAccountTag:\n        if (this.validator && this.delegatorAccount) {\n          return new Uint8Array(\n            createBuffer(\n              typeByte,\n              this.validator.toBytes(),\n              this.delegatorAccount.toBytes()\n            )\n          );\n        }\n        break;\n      case BidAddrTag.UnbondPurseTag:\n        if (this.delegatorPurseAddress && this.validator) {\n          return new Uint8Array(\n            createBuffer(\n              typeByte,\n              this.validator.toBytes(),\n              toBytesString(this.delegatorPurseAddress)\n            )\n          );\n        }\n        break;\n      default:\n        throw new Error(\n          `Unexpected BidAddr type: Unknown type byte ${typeByte}`\n        );\n    }\n\n    throw new Error(\n      `Unexpected BidAddr type: Missing required fields for type byte ${typeByte}`\n    );\n  }\n\n  /**\n   * Creates a BidAddr from its JSON representation.\n   * @param json - The JSON string.\n   * @returns A new BidAddr instance.\n   */\n  public static fromJSON(json: string): BidAddr {\n    return this.fromHex(json);\n  }\n\n  /**\n   * Converts the BidAddr to its JSON representation.\n   * @returns The JSON string representation.\n   */\n  public toJSON(): string {\n    return this.toPrefixedString();\n  }\n}\n","import { jsonMember, jsonObject } from 'typedjson';\nimport { IResultWithBytes } from '../clvalue';\n\n/**\n * Enum representing the types of block global addresses.\n */\nexport enum BlockGlobalAddrTag {\n  BlockTime = 0,\n  MessageCount = 1\n}\n\n/**\n * Custom error class for errors related to BlockGlobalAddrTag.\n */\nexport class BlockGlobalAddrTagError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'BlockGlobalAddrTagError';\n  }\n}\n\n/**\n * Validates and returns the BlockGlobalAddrTag for a given tag number.\n * @param tag - The tag number to validate.\n * @returns The corresponding BlockGlobalAddrTag.\n * @throws BlockGlobalAddrTagError if the tag is invalid.\n */\nexport function getBlockGlobalAddrTag(tag: number): BlockGlobalAddrTag {\n  if (\n    tag === BlockGlobalAddrTag.BlockTime ||\n    tag === BlockGlobalAddrTag.MessageCount\n  ) {\n    return tag;\n  }\n  throw new BlockGlobalAddrTagError('Invalid BlockGlobalAddrTag');\n}\n\nconst BlockTimePrefix = 'time-';\nconst MessageCountPrefix = 'message-count-';\nconst PrefixNameBlockGlobal = 'block-global-';\n\n/**\n * Represents a block global address within the system, supporting both block time and message count addresses.\n */\n@jsonObject\nexport class BlockGlobalAddr {\n  /**\n   * The block time object, if this is a block time address.\n   */\n  @jsonMember({ name: 'BlockTime', constructor: Object })\n  blockTime?: object;\n\n  /**\n   * The message count object, if this is a message count address.\n   */\n  @jsonMember({ name: 'MessageCount', constructor: Object })\n  messageCount?: object;\n\n  /**\n   * Constructs a new BlockGlobalAddr instance.\n   * @param blockTime - Optional parameter for the block time object.\n   * @param messageCount - Optional parameter for the message count object.\n   */\n  constructor(blockTime?: object, messageCount?: object) {\n    this.blockTime = blockTime;\n    this.messageCount = messageCount;\n  }\n\n  /**\n   * Creates a BlockGlobalAddr from a string representation.\n   * @param source - The string representation of the block global address.\n   * @returns A new BlockGlobalAddr instance.\n   * @throws Error if the format does not match known block global address types.\n   */\n  static fromString(source: string): BlockGlobalAddr {\n    if (source.startsWith(BlockTimePrefix)) {\n      return new BlockGlobalAddr({}, undefined);\n    } else if (source.startsWith(MessageCountPrefix)) {\n      return new BlockGlobalAddr(undefined, {});\n    }\n    throw new Error('Invalid BlockGlobalAddr format');\n  }\n\n  /**\n   * Returns a prefixed string representation of the BlockGlobalAddr.\n   * @returns A prefixed string that includes the block global address type and a default hash value.\n   */\n  toPrefixedString(): string {\n    const prefix = this.blockTime ? BlockTimePrefix : MessageCountPrefix;\n    const emptyHash = '0'.repeat(64);\n    return `${PrefixNameBlockGlobal}${prefix}${emptyHash}`;\n  }\n\n  /**\n   * Creates a BlockGlobalAddr from a byte array representation.\n   * @param bytes - The byte array containing the tag for the block global address type.\n   * @returns An instance of BlockGlobalAddr representing the given type.\n   * @throws Error if the byte array tag does not match any known BlockGlobalAddr type.\n   */\n  static fromBytes(bytes: Uint8Array): IResultWithBytes<BlockGlobalAddr> {\n    const tagByte = bytes[0];\n    const tag = getBlockGlobalAddrTag(tagByte);\n\n    if (tag === BlockGlobalAddrTag.BlockTime) {\n      return { result: new BlockGlobalAddr({}, undefined), bytes };\n    } else if (tag === BlockGlobalAddrTag.MessageCount) {\n      return { result: new BlockGlobalAddr(undefined, {}), bytes };\n    }\n\n    throw new Error('Unexpected BlockGlobalAddr type');\n  }\n\n  /**\n   * Converts the BlockGlobalAddr to a byte array representation.\n   * @returns A Uint8Array containing the byte tag representing the block global address type.\n   */\n  toBytes(): Uint8Array {\n    const tag = this.messageCount\n      ? BlockGlobalAddrTag.MessageCount\n      : BlockGlobalAddrTag.BlockTime;\n    return Uint8Array.of(tag);\n  }\n\n  /**\n   * Creates a BlockGlobalAddr from a JSON string representation.\n   * @param json - The JSON string representation.\n   * @returns A new BlockGlobalAddr instance.\n   */\n  public static fromJSON(json: string): BlockGlobalAddr {\n    return this.fromString(json);\n  }\n\n  /**\n   * Converts the BlockGlobalAddr to its JSON string representation.\n   * @returns The JSON string that represents this BlockGlobalAddr.\n   */\n  public toJSON(): string {\n    return this.toPrefixedString();\n  }\n}\n","import { concat } from '@ethersproject/bytes';\nimport { Hash } from './Hash';\nimport { PrefixName } from './Key';\nimport { IResultWithBytes } from '../clvalue';\n\n/**\n * Enum representing types of byte code within the system.\n */\nenum ByteCodeKind {\n  /** Represents an empty byte code type. */\n  EmptyKind = 0,\n  /** Represents a V1 Casper WASM byte code type. */\n  V1CasperWasmKind = 1\n}\n\nconst EmptyPrefix = 'empty-';\nconst V1WasmPrefix = 'v1-wasm-';\n\n/**\n * Custom error class for ByteCode-related errors.\n */\nclass ByteCodeError extends Error {\n  /** Error for an invalid byte code format. */\n  static ErrInvalidByteCodeFormat = new ByteCodeError(\n    'Invalid ByteCode format'\n  );\n  /** Error for an invalid byte code kind. */\n  static ErrInvalidByteCodeKind = new ByteCodeError('Invalid ByteCodeKind');\n\n  constructor(message: string) {\n    super(message);\n    this.name = 'ByteCodeError';\n  }\n}\n\n/**\n * Represents a byte code in the system, providing support for V1 Casper WASM or an empty byte code.\n */\nexport class ByteCode {\n  private V1CasperWasm?: Hash;\n  private isEmpty: boolean;\n\n  /**\n   * Constructs a new ByteCode instance.\n   * @param V1CasperWasm - The hash representing V1 Casper WASM byte code.\n   * @param isEmpty - Whether the byte code is empty. Default is `false`.\n   */\n  constructor(V1CasperWasm?: Hash, isEmpty = false) {\n    this.V1CasperWasm = V1CasperWasm;\n    this.isEmpty = isEmpty;\n  }\n\n  /**\n   * Creates a ByteCode from a JSON string representation.\n   * @param data - The JSON string representation of the ByteCode.\n   * @returns A new ByteCode instance.\n   * @throws ByteCodeError.ErrInvalidByteCodeFormat if the format is invalid.\n   */\n  static fromJSON(data: string): ByteCode {\n    if (data.startsWith(V1WasmPrefix)) {\n      return new ByteCode(Hash.fromHex(data.replace(V1WasmPrefix, '')));\n    } else if (data.startsWith(EmptyPrefix)) {\n      return new ByteCode(undefined, true);\n    } else {\n      throw ByteCodeError.ErrInvalidByteCodeFormat;\n    }\n  }\n\n  /**\n   * Converts the ByteCode instance to its JSON string representation.\n   * @returns The JSON string representation of the ByteCode.\n   */\n  toJSON(): string {\n    return this.toPrefixedString();\n  }\n\n  /**\n   * Determines if the ByteCode instance represents an empty byte code.\n   * @returns True if the byte code is empty; otherwise, false.\n   */\n  isEmptyCode(): boolean {\n    return this.isEmpty;\n  }\n\n  /**\n   * Returns a prefixed string representation of the ByteCode.\n   * @returns A prefixed string based on the byte code type.\n   * @throws Error if the ByteCode type is unexpected.\n   */\n  toPrefixedString(): string {\n    if (this.V1CasperWasm) {\n      return PrefixName.ByteCode + V1WasmPrefix + this.V1CasperWasm.toHex();\n    } else if (this.isEmpty) {\n      const emptyHash = Hash.fromBytes(new Uint8Array(Hash.ByteHashLen).fill(0))\n        ?.result;\n      return PrefixName.ByteCode + EmptyPrefix + emptyHash.toHex();\n    } else {\n      throw new Error('Unexpected ByteCode type');\n    }\n  }\n\n  /**\n   * Creates a ByteCode instance from a byte array representation.\n   * @param bytes - The byte array.\n   * @returns An object with the new ByteCode instance and remaining bytes.\n   * @throws ByteCodeError.ErrInvalidByteCodeFormat if the format is invalid.\n   */\n  static fromBytes(bytes: Uint8Array): IResultWithBytes<ByteCode> {\n    const tag = bytes[0];\n    const kind = this.newByteCodeKindFromByte(tag);\n    switch (kind) {\n      case ByteCodeKind.EmptyKind:\n        return { result: new ByteCode(undefined, true), bytes };\n      case ByteCodeKind.V1CasperWasmKind:\n        const wasmHash = Hash.fromBytes(\n          bytes.subarray(1, Hash.ByteHashLen + 1)\n        );\n        return {\n          result: new ByteCode(wasmHash?.result),\n          bytes: wasmHash?.bytes\n        };\n      default:\n        throw ByteCodeError.ErrInvalidByteCodeFormat;\n    }\n  }\n\n  /**\n   * Converts a byte to its corresponding ByteCodeKind.\n   * @param tag - The byte to convert.\n   * @returns The corresponding ByteCodeKind.\n   * @throws ByteCodeError.ErrInvalidByteCodeKind if the byte doesn't match a valid ByteCodeKind.\n   */\n  static newByteCodeKindFromByte(tag: number): ByteCodeKind {\n    if (tag in ByteCodeKind) {\n      return tag as ByteCodeKind;\n    }\n    throw ByteCodeError.ErrInvalidByteCodeKind;\n  }\n\n  /**\n   * Converts the ByteCode instance to a byte array representation.\n   * @returns The byte array representation of the ByteCode.\n   * @throws Error if the ByteCode type is unexpected.\n   */\n  toBytes(): Uint8Array {\n    if (this.V1CasperWasm) {\n      const kindBytes = new Uint8Array([ByteCodeKind.V1CasperWasmKind]);\n      const wasmBytes = this.V1CasperWasm.toBytes();\n      return concat([kindBytes, wasmBytes]);\n    } else if (this.isEmpty) {\n      return new Uint8Array([ByteCodeKind.EmptyKind]);\n    } else {\n      throw new Error('Unexpected ByteCode type');\n    }\n  }\n}\n","import { jsonMember, jsonObject } from 'typedjson';\nimport { Hash } from './Hash';\nimport { PrefixName } from './Key';\n\n/**\n * Represents a contract hash within the system, providing various prefixed representations.\n */\n@jsonObject\nexport class ContractHash {\n  /**\n   * The hash object representing the contract.\n   */\n  @jsonMember({ name: 'Hash', constructor: Hash })\n  hash: Hash;\n\n  /**\n   * The prefix of the original contract hash string, if any (e.g., \"hash-\", \"contract-wasm-\", \"contract-\").\n   */\n  @jsonMember({ name: 'originPrefix', constructor: String })\n  originPrefix: string;\n\n  /**\n   * Constructs a new `ContractHash` instance.\n   * @param hash - The `Hash` object representing the contract hash.\n   * @param originPrefix - The original prefix of the contract hash string.\n   */\n  constructor(hash: Hash, originPrefix: string) {\n    this.hash = hash;\n    this.originPrefix = originPrefix;\n  }\n\n  /**\n   * Converts the `ContractHash` instance to its JSON representation.\n   * @returns A string representation of the `ContractHash`, including the original prefix.\n   */\n  toJSON(): string {\n    return this.originPrefix + this.hash.toHex();\n  }\n\n  /**\n   * Returns the contract hash as a WASM-prefixed string.\n   * @returns The contract hash prefixed with `ContractWasm`.\n   */\n  toPrefixedWasmString(): string {\n    return PrefixName.ContractWasm + this.hash.toHex();\n  }\n\n  /**\n   * Returns the contract hash as a general prefixed string.\n   * @returns The contract hash prefixed with `Contract`.\n   */\n  toPrefixedString(): string {\n    return PrefixName.Contract + this.hash.toHex();\n  }\n\n  /**\n   * Creates a `ContractHash` instance from its JSON representation.\n   * @param json - The JSON string representation of the `ContractHash`.\n   * @returns A new `ContractHash` instance.\n   */\n  static fromJSON(json: string): ContractHash {\n    return ContractHash.newContract(json);\n  }\n\n  /**\n   * Creates a new `ContractHash` instance from a string representation.\n   * @param source - The string representation of the contract hash.\n   * @returns A new `ContractHash` instance.\n   */\n  static newContract(source: string): ContractHash {\n    let originPrefix = '';\n    if (source.startsWith(PrefixName.Hash)) {\n      originPrefix = PrefixName.Hash;\n    } else if (source.startsWith(PrefixName.ContractWasm)) {\n      originPrefix = PrefixName.ContractWasm;\n    } else if (source.startsWith(PrefixName.Contract)) {\n      originPrefix = PrefixName.Contract;\n    }\n    const hexBytes = Hash.fromHex(source.slice(originPrefix.length));\n    return new ContractHash(hexBytes, originPrefix);\n  }\n}\n","import { jsonMember, jsonObject } from 'typedjson';\nimport { Hash } from './Hash';\nimport { PrefixName } from './Key';\n\n/**\n * Represents a contract package hash within the system, with support for prefixed and JSON representations.\n */\n@jsonObject\nexport class ContractPackageHash {\n  /**\n   * The hash object representing the contract package.\n   */\n  @jsonMember({ name: 'Hash', constructor: Hash })\n  hash: Hash;\n\n  /**\n   * The original prefix of the contract package hash string, if any (e.g., \"hash-\", \"contract-package-wasm-\", \"contract-package-\").\n   */\n  @jsonMember({ name: 'originPrefix', constructor: String })\n  originPrefix: string;\n\n  /**\n   * Constructs a new `ContractPackageHash` instance.\n   * @param hash - The `Hash` object representing the contract package hash.\n   * @param originPrefix - The original prefix of the contract package hash string, if applicable.\n   */\n  constructor(hash: Hash, originPrefix: string) {\n    this.hash = hash;\n    this.originPrefix = originPrefix;\n  }\n\n  /**\n   * Converts the `ContractPackageHash` instance to its JSON representation.\n   * @returns A string representation of the `ContractPackageHash`, including the original prefix.\n   */\n  toJSON(): string {\n    return this.originPrefix + this.hash.toHex();\n  }\n\n  /**\n   * Returns the contract package hash as a prefixed string.\n   * @returns The contract package hash prefixed with `ContractPackage`.\n   */\n  toPrefixedString(): string {\n    return PrefixName.ContractPackage + this.hash.toHex();\n  }\n\n  /**\n   * Creates a `ContractPackageHash` instance from its JSON representation.\n   * @param json - The JSON string representation of the `ContractPackageHash`.\n   * @returns A new `ContractPackageHash` instance.\n   */\n  static fromJSON(json: string): ContractPackageHash {\n    return ContractPackageHash.newContractPackage(json);\n  }\n\n  /**\n   * Creates a new `ContractPackageHash` instance from a string representation.\n   * @param source - The string representation of the contract package hash, including any prefix.\n   * @returns A new `ContractPackageHash` instance.\n   */\n  static newContractPackage(source: string): ContractPackageHash {\n    let originPrefix = '';\n    if (source.startsWith(PrefixName.Hash)) {\n      originPrefix = PrefixName.Hash;\n    } else if (source.startsWith(PrefixName.ContractPackageWasm)) {\n      originPrefix = PrefixName.ContractPackageWasm;\n    } else if (source.startsWith(PrefixName.ContractPackage)) {\n      originPrefix = PrefixName.ContractPackage;\n    }\n\n    const hexBytes = Hash.fromHex(source.slice(originPrefix.length));\n    return new ContractPackageHash(hexBytes, originPrefix);\n  }\n}\n","import { jsonObject, jsonMember } from 'typedjson';\nimport { concat } from '@ethersproject/bytes';\n\nimport { Hash } from './Hash';\nimport { IResultWithBytes } from '../clvalue';\nimport { PrefixName } from './Key';\n\n/**\n * Enum representing the types of entities within the system.\n */\nexport enum EntityKindType {\n  SystemKind = 0,\n  AccountKind = 1,\n  SmartContractKind = 2\n}\n\n/** Error thrown when the EntityAddr format is invalid. */\nexport const ErrInvalidEntityAddrFormat = new Error(\n  'invalid EntityAddr format'\n);\n\n/** Error thrown when the EntityKind is invalid. */\nexport const ErrInvalidEntityKind = new Error('invalid EntityKind');\n\n/**\n * Represents an entity address in the system. This class supports addresses for three types of entities:\n * system, account, and smart contract. The address type is indicated by either the system, account, or smartContract property being set.\n */\n@jsonObject\nexport class EntityAddr {\n  /** The system hash, if this is a system entity. */\n  @jsonMember({ constructor: Hash, name: 'System' })\n  system?: Hash;\n\n  /** The account hash, if this is an account entity. */\n  @jsonMember({ constructor: Hash, name: 'Account' })\n  account?: Hash;\n\n  /** The smart contract hash, if this is a smart contract entity. */\n  @jsonMember({ constructor: Hash, name: 'SmartContract' })\n  smartContract?: Hash;\n\n  /**\n   * Creates a new EntityAddr instance.\n   * @param system - The hash representing a system entity.\n   * @param account - The hash representing an account entity.\n   * @param smartContract - The hash representing a smart contract entity.\n   */\n  constructor(system?: Hash, account?: Hash, smartContract?: Hash) {\n    this.system = system;\n    this.account = account;\n    this.smartContract = smartContract;\n  }\n\n  /**\n   * Returns a prefixed string representation of the EntityAddr, with different prefixes for each entity type.\n   * @returns The prefixed string representation, with \"entity-system-\", \"entity-account-\", or \"entity-contract-\" based on entity type.\n   */\n  toPrefixedString(): string {\n    if (this.system) {\n      return `${PrefixName.Entity}system-${this.system.toHex()}`;\n    } else if (this.account) {\n      return `${PrefixName.Entity}account-${this.account.toHex()}`;\n    } else if (this.smartContract) {\n      return `${PrefixName.Entity}contract-${this.smartContract.toHex()}`;\n    }\n    return '';\n  }\n\n  /**\n   * Creates an EntityAddr from a prefixed string representation.\n   * @param source - The prefixed string representation of the EntityAddr.\n   * @returns A new EntityAddr instance.\n   * @throws {ErrInvalidEntityAddrFormat} If the format is invalid.\n   */\n  static fromPrefixedString(source: string): EntityAddr {\n    source = source.replace(PrefixName.Entity, '');\n\n    if (source.startsWith('system-')) {\n      const hash = Hash.fromHex(source.replace('system-', ''));\n      return new EntityAddr(hash, undefined, undefined);\n    } else if (source.startsWith('account-')) {\n      const hash = Hash.fromHex(source.replace('account-', ''));\n      return new EntityAddr(undefined, hash, undefined);\n    } else if (source.startsWith('contract-')) {\n      const hash = Hash.fromHex(source.replace('contract-', ''));\n      return new EntityAddr(undefined, undefined, hash);\n    }\n    throw ErrInvalidEntityAddrFormat;\n  }\n\n  /**\n   * Converts the EntityAddr to a byte array.\n   * The first byte represents the entity type, followed by the bytes of the associated hash.\n   * @returns The byte array representation of the EntityAddr.\n   * @throws {Error} If the EntityAddr type is unexpected.\n   */\n  toBytes(): Uint8Array {\n    let prefix: number;\n    let bytes: Uint8Array;\n\n    if (this.system) {\n      prefix = EntityKindType.SystemKind;\n      bytes = this.system.toBytes();\n    } else if (this.account) {\n      prefix = EntityKindType.AccountKind;\n      bytes = this.account.toBytes();\n    } else if (this.smartContract) {\n      prefix = EntityKindType.SmartContractKind;\n      bytes = this.smartContract.toBytes();\n    } else {\n      throw new Error('Unexpected EntityAddr type');\n    }\n\n    return concat([Uint8Array.from([prefix]), bytes]);\n  }\n\n  /**\n   * Creates an EntityAddr from a byte array. The first byte indicates the entity type,\n   * and the remaining bytes represent the hash.\n   * @param bytes - The byte array.\n   * @returns A new EntityAddr instance.\n   * @throws {Error} If the buffer is empty or the format is invalid.\n   */\n  static fromBytes(bytes: Uint8Array): IResultWithBytes<EntityAddr> {\n    if (bytes.length === 0) {\n      throw new Error('Buffer is empty, cannot create EntityAddr.');\n    }\n\n    const tag = bytes[0];\n    const rem = bytes.subarray(1);\n    const entityKindTag = EntityAddr.getEntityKindFromByte(tag);\n    const { result: hash, bytes: hashBytes } = Hash.fromBytes(rem);\n\n    switch (entityKindTag) {\n      case EntityKindType.SystemKind:\n        return {\n          result: new EntityAddr(hash, undefined, undefined),\n          bytes: hashBytes\n        };\n      case EntityKindType.AccountKind:\n        return {\n          result: new EntityAddr(undefined, hash, undefined),\n          bytes: hashBytes\n        };\n      case EntityKindType.SmartContractKind:\n        return {\n          result: new EntityAddr(undefined, undefined, hash),\n          bytes: hashBytes\n        };\n      default:\n        throw new Error('Invalid EntityAddr format.');\n    }\n  }\n\n  /**\n   * Converts a byte to an EntityKind.\n   * @param tag - The byte to convert.\n   * @returns The corresponding EntityKind.\n   * @throws {Error} If the byte doesn't correspond to a valid EntityKind.\n   */\n  private static getEntityKindFromByte(tag: number): EntityKindType {\n    if (tag in EntityKindType) {\n      return tag as EntityKindType;\n    } else {\n      throw new Error('Invalid entity kind tag.');\n    }\n  }\n\n  /**\n   * Creates an EntityAddr from its JSON representation.\n   * @param json - The JSON string representation of the EntityAddr.\n   * @returns A new EntityAddr instance.\n   */\n  public static fromJSON(json: string): EntityAddr {\n    return this.fromPrefixedString(json);\n  }\n\n  /**\n   * Converts the EntityAddr to its JSON representation.\n   * @returns The JSON string representation of the EntityAddr.\n   */\n  public toJSON(): string {\n    return this.toPrefixedString();\n  }\n}\n","import { jsonMember, jsonObject } from 'typedjson';\nimport { concat } from '@ethersproject/bytes';\n\nimport { EntityAddr } from './EntityAddr';\nimport { Hash } from './Hash';\nimport { Conversions } from '../Conversions';\nimport { IResultWithBytes } from '../clvalue';\n\n/**\n * Enum representing the types of entry points in the Casper VM.\n */\nexport enum EntryPointTag {\n  V1EntryPoint = 0,\n  V2EntryPoint = 1\n}\n\n/**\n * Custom error class for EntryPoint related errors.\n */\nexport class EntryPointError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'EntryPointError';\n  }\n}\n\n/**\n * Validates and returns the EntryPointTag for a given tag number.\n * @param tag - The tag number to validate.\n * @returns The corresponding EntryPointTag.\n * @throws EntryPointError if the tag is invalid.\n */\nexport function getEntryPointTag(tag: number): EntryPointTag {\n  if (\n    tag === EntryPointTag.V1EntryPoint ||\n    tag === EntryPointTag.V2EntryPoint\n  ) {\n    return tag;\n  }\n  throw new EntryPointError('Invalid EntryPointTag');\n}\n\nconst V1Prefix = 'v1-';\nconst V2Prefix = 'v2-';\nconst SelectorBytesLen = 4;\n\n/**\n * Represents a V1 Casper VM entry point with an entity address and name bytes.\n */\n@jsonObject\nclass VmCasperV1 {\n  @jsonMember({\n    name: 'EntityAddr',\n    constructor: EntityAddr,\n    deserializer: json => EntityAddr.fromJSON(json),\n    serializer: (value: EntityAddr) => value.toJSON()\n  })\n  entityAddr: EntityAddr;\n\n  @jsonMember(Uint8Array, { name: 'NameBytes' })\n  nameBytes: Uint8Array;\n\n  constructor(entityAddr: EntityAddr, nameBytes: Uint8Array) {\n    this.entityAddr = entityAddr;\n    this.nameBytes = nameBytes;\n  }\n}\n\n/**\n * Represents a V2 Casper VM entry point with an entity address and selector.\n */\n@jsonObject\nclass VmCasperV2 {\n  @jsonMember({\n    name: 'EntityAddr',\n    constructor: EntityAddr,\n    deserializer: json => EntityAddr.fromJSON(json),\n    serializer: value => value.toJSON()\n  })\n  entityAddr: EntityAddr;\n\n  @jsonMember({ name: 'Selector', constructor: Number })\n  selector: number;\n\n  constructor(entityAddr: EntityAddr, selector: number) {\n    this.entityAddr = entityAddr;\n    this.selector = selector;\n  }\n}\n\n/**\n * Represents an entry point address in the system, which may be a V1 or V2 Casper VM entry point.\n */\n@jsonObject\nexport class EntryPointAddr {\n  @jsonMember({ name: 'VmCasperV1', constructor: VmCasperV1 })\n  vmCasperV1?: VmCasperV1;\n\n  @jsonMember({ name: 'VmCasperV2', constructor: VmCasperV2 })\n  vmCasperV2?: VmCasperV2;\n\n  /**\n   * Creates a new EntryPointAddr instance.\n   * @param vmCasperV1 - The V1 Casper VM entry point, if applicable.\n   * @param vmCasperV2 - The V2 Casper VM entry point, if applicable.\n   */\n  constructor(vmCasperV1?: VmCasperV1, vmCasperV2?: VmCasperV2) {\n    this.vmCasperV1 = vmCasperV1;\n    this.vmCasperV2 = vmCasperV2;\n  }\n\n  /**\n   * Creates an EntryPointAddr from a string representation.\n   * @param source - The string representation of the entry point address.\n   * @returns A new EntryPointAddr instance.\n   * @throws EntryPointError if the format is invalid.\n   */\n  static fromString(source: string): EntryPointAddr {\n    const lastIndex = source.lastIndexOf('-');\n    if (lastIndex === -1) {\n      throw new EntryPointError('Invalid EntryPoint format');\n    }\n\n    const prefix = source.substring(0, lastIndex);\n    const data = source.substring(lastIndex + 1);\n\n    const rawBytes = Buffer.from(data, 'hex');\n\n    if (prefix.startsWith(V1Prefix)) {\n      const entityAddr = EntityAddr.fromPrefixedString(\n        prefix.replace(V1Prefix, '')\n      );\n      const nameBytes = new Uint8Array(rawBytes);\n\n      return new EntryPointAddr(new VmCasperV1(entityAddr, nameBytes));\n    } else if (prefix.startsWith(V2Prefix)) {\n      const entityAddr = EntityAddr.fromPrefixedString(\n        prefix.replace(V2Prefix, '')\n      );\n      const selector = rawBytes.readUInt32LE(0);\n\n      return new EntryPointAddr(\n        undefined,\n        new VmCasperV2(entityAddr, selector)\n      );\n    } else {\n      throw new EntryPointError('Invalid EntryPoint format');\n    }\n  }\n\n  /**\n   * Returns a prefixed string representation of the EntryPointAddr.\n   * @returns The prefixed string representation.\n   * @throws EntryPointError if the EntryPointAddr type is unexpected.\n   */\n  toPrefixedString(): string {\n    if (this.vmCasperV1) {\n      return (\n        V1Prefix +\n        this.vmCasperV1.entityAddr.toPrefixedString() +\n        '-' +\n        Conversions.encodeBase16(this.vmCasperV1.nameBytes)\n      );\n    } else if (this.vmCasperV2) {\n      const selectorBuffer = Buffer.alloc(SelectorBytesLen);\n      selectorBuffer.writeUInt32LE(this.vmCasperV2.selector, 0);\n      return (\n        V2Prefix +\n        this.vmCasperV2.entityAddr.toPrefixedString() +\n        '-' +\n        selectorBuffer.toString('hex')\n      );\n    }\n    throw new EntryPointError('Unexpected EntryPointAddr type');\n  }\n\n  /**\n   * Converts the EntryPointAddr to a byte array.\n   * @returns The byte array representation of the EntryPointAddr.\n   * @throws EntryPointError if the EntryPointAddr type is unexpected.\n   */\n  toBytes(): Uint8Array {\n    let result: Uint8Array;\n\n    if (this.vmCasperV1) {\n      const entryPointTag = new Uint8Array([EntryPointTag.V1EntryPoint]);\n      const entityBytes = this.vmCasperV1.entityAddr.toBytes();\n      const nameBytes = this.vmCasperV1.nameBytes;\n\n      result = concat([entryPointTag, entityBytes, nameBytes]);\n    } else if (this.vmCasperV2) {\n      const entryPointTag = new Uint8Array([EntryPointTag.V2EntryPoint]);\n      const entityBytes = this.vmCasperV2.entityAddr.toBytes();\n\n      const selectorBuffer = Buffer.alloc(SelectorBytesLen);\n      selectorBuffer.writeUInt32LE(this.vmCasperV2.selector, 0);\n      const selectorBytes = new Uint8Array(selectorBuffer);\n\n      result = concat([entryPointTag, entityBytes, selectorBytes]);\n    } else {\n      throw new EntryPointError('Unexpected EntryPointAddr type');\n    }\n\n    return result;\n  }\n\n  /**\n   * Creates an EntryPointAddr from a byte array.\n   * @param array - The byte array.\n   * @returns A new EntryPointAddr instance.\n   * @throws EntryPointError if the EntryPointAddr type is unexpected.\n   */\n  static fromBytes(array: Uint8Array): IResultWithBytes<EntryPointAddr> {\n    const tag = array[0];\n    const entryPointTag = getEntryPointTag(tag);\n\n    const entityAddr = EntityAddr.fromBytes(array.slice(1));\n\n    if (entryPointTag === EntryPointTag.V1EntryPoint) {\n      const nameBytes = array.slice(\n        1 + Hash.ByteHashLen,\n        1 + Hash.ByteHashLen + 32\n      );\n      return {\n        result: new EntryPointAddr(\n          new VmCasperV1(entityAddr?.result, nameBytes)\n        ),\n        bytes: nameBytes\n      };\n    } else if (entryPointTag === EntryPointTag.V2EntryPoint) {\n      const selector = new DataView(\n        array.buffer,\n        1 + Hash.ByteHashLen\n      ).getUint32(0, true);\n\n      return {\n        result: new EntryPointAddr(\n          undefined,\n          new VmCasperV2(entityAddr?.result, selector)\n        ),\n        bytes: array.subarray(Hash.ByteHashLen)\n      };\n    } else {\n      throw new EntryPointError('Unexpected EntryPointAddr type');\n    }\n  }\n\n  /**\n   * Creates an EntryPointAddr from its JSON representation.\n   * @param json - The JSON string representation of the EntryPointAddr.\n   * @returns A new EntryPointAddr instance.\n   */\n  public static fromJSON(json: string): EntryPointAddr {\n    return this.fromString(json);\n  }\n\n  /**\n   * Converts the EntryPointAddr to its JSON representation.\n   * @returns The JSON string representation of the EntryPointAddr.\n   */\n  public toJSON(): string {\n    return this.toPrefixedString();\n  }\n}\n","import { jsonMember, jsonObject } from 'typedjson';\nimport { toBytesNumber } from '../ByteConverters';\n\n/**\n * Represents an Era in the system.\n * An Era is a distinct period in the blockchain, typically used for consensus, validator rotations, and reward distributions.\n */\n@jsonObject\nexport class Era {\n  /**\n   * The numeric identifier of the Era.\n   */\n  @jsonMember({ constructor: Number })\n  public value: number;\n\n  /**\n   * Creates a new Era instance.\n   * @param value - The numeric identifier of the Era.\n   */\n  constructor(value: number) {\n    this.value = value;\n  }\n\n  /**\n   * Converts the Era instance to its JSON representation.\n   * @returns A string representation of the Era's numeric value.\n   */\n  toJSON(): string {\n    return this.value.toString();\n  }\n\n  /**\n   * Creates an Era instance from its JSON representation.\n   * @param json - The JSON string representation of the Era.\n   * @returns A new Era instance.\n   * @throws Error if the JSON string cannot be parsed as a valid number.\n   */\n  static fromJSON(json: string): Era {\n    const value = parseInt(json, 10);\n    if (isNaN(value)) {\n      throw new Error(`Invalid Era value: ${json}`);\n    }\n    return new Era(value);\n  }\n\n  /**\n   * Creates an Era instance from a byte array.\n   * @param bytes - The byte array representing the Era value as a 32-bit unsigned integer.\n   * @returns A new Era instance.\n   */\n  static fromBytes(bytes: Uint8Array): Era {\n    const value = new DataView(bytes.buffer).getUint32(0, true);\n    return new Era(value);\n  }\n\n  /**\n   * Converts the Era instance to a byte array.\n   * @returns A Uint8Array representation of the Era value as a 32-bit unsigned integer.\n   */\n  toBytes(): Uint8Array {\n    return toBytesNumber(64, false)(this.value);\n  }\n}\n","import { jsonObject } from 'typedjson';\nimport { IResultWithBytes } from '../clvalue';\n\n/**\n * Represents a cryptographic hash.\n * This class provides methods for creating, manipulating, and comparing hash values.\n */\n@jsonObject\nexport class Hash {\n  private hashBytes: Uint8Array;\n\n  /** The fixed length of the hash in bytes. */\n  static ByteHashLen = 32;\n\n  /** The fixed length of the hash string representation in hexadecimal characters. */\n  static StringHashLen = 64;\n\n  /**\n   * Creates a new Hash instance.\n   * @param hashBytes - The byte array representing the hash.\n   * @throws Error if the byte array length does not match the expected hash length.\n   */\n  constructor(hashBytes: Uint8Array) {\n    if (hashBytes.length !== Hash.ByteHashLen) {\n      throw new Error(\n        `Invalid hash length, expected ${Hash.ByteHashLen} bytes.`\n      );\n    }\n    this.hashBytes = hashBytes;\n  }\n\n  /**\n   * Creates a Hash instance from a hexadecimal string.\n   * @param source - The hexadecimal string representation of the hash.\n   * @returns A new Hash instance.\n   * @throws Error if the string length does not match the expected hash length.\n   */\n  static fromHex(source: string): Hash {\n    if (source.length !== Hash.StringHashLen) {\n      throw new Error(\n        `Invalid string length, expected ${Hash.StringHashLen} characters.`\n      );\n    }\n    const bytes = Uint8Array.from(Buffer.from(source, 'hex'));\n    return new Hash(bytes);\n  }\n\n  /**\n   * Converts the Hash instance to a hexadecimal string.\n   * @returns The hexadecimal string representation of the hash.\n   */\n  toHex(): string {\n    return Buffer.from(this.hashBytes).toString('hex');\n  }\n\n  /**\n   * Converts the Hash instance to a byte array.\n   * @returns The byte array representation of the hash.\n   */\n  toBytes(): Uint8Array {\n    return this.hashBytes;\n  }\n\n  /**\n   * Converts the Hash instance to its JSON representation.\n   * @returns The JSON string representation of the hash.\n   */\n  toJSON(): string {\n    return this.toHex();\n  }\n\n  /**\n   * Creates a Hash instance from its JSON representation.\n   * @param json - The JSON string representation of the hash.\n   * @returns A new Hash instance.\n   */\n  static fromJSON(json: string): Hash {\n    return Hash.fromHex(json);\n  }\n\n  /**\n   * Creates a Hash instance from a byte array.\n   * @param source - The byte array representing the hash.\n   * @returns A result object containing the new Hash instance and the remaining bytes.\n   * @throws Error if the byte array length does not match the expected hash length.\n   */\n  static fromBytes(source: Uint8Array): IResultWithBytes<Hash> {\n    if (source.length < Hash.ByteHashLen) {\n      throw new Error('Key length is less than 32 bytes.');\n    }\n\n    const hashBytes = source.subarray(0, Hash.ByteHashLen);\n    return {\n      result: new Hash(hashBytes),\n      bytes: source.subarray(Hash.ByteHashLen)\n    };\n  }\n\n  /**\n   * Creates a Hash instance from a Buffer.\n   * @param buffer - The Buffer containing the hash bytes.\n   * @returns A new Hash instance.\n   * @throws Error if the buffer length is less than the required hash length.\n   */\n  static fromBuffer(buffer: Buffer): Hash {\n    if (buffer.length < Hash.ByteHashLen) {\n      throw new Error('Key length is not equal to 32 bytes.');\n    }\n    return new Hash(new Uint8Array(buffer.slice(0, Hash.ByteHashLen)));\n  }\n\n  /**\n   * Creates an array of Hash instances from a byte array.\n   * @param byteArray - The byte array containing multiple hash values.\n   * @returns An array of Hash instances created from the byte array.\n   * @throws Error if the byte array length is not a multiple of the hash length.\n   */\n  public static createHashArray(byteArray: Uint8Array): Hash[] {\n    if (byteArray.length % Hash.ByteHashLen !== 0) {\n      throw new Error(\n        `Byte array length must be a multiple of ${Hash.ByteHashLen}.`\n      );\n    }\n\n    const hashes: Hash[] = [];\n    for (let i = 0; i < byteArray.length; i += Hash.ByteHashLen) {\n      const chunk = byteArray.subarray(i, i + Hash.ByteHashLen);\n      hashes.push(new Hash(chunk));\n    }\n\n    return hashes;\n  }\n\n  /**\n   * Compares this Hash instance with another Hash instance for equality.\n   * @param other - The other Hash to compare with.\n   * @returns True if the hashes are equal, false otherwise.\n   */\n  equals(other: Hash): boolean {\n    if (this.hashBytes.length !== other.hashBytes.length) return false;\n    return this.hashBytes.every(\n      (byte, index) => byte === other.hashBytes[index]\n    );\n  }\n}\n","import { jsonObject, jsonMember } from 'typedjson';\nimport { AccountHash } from './Account';\nimport { Hash } from './Hash';\nimport { TransferHash } from './Transfer';\nimport { Era } from './Era';\nimport { EntityAddr } from './EntityAddr';\nimport { BidAddr } from './BidAddr';\nimport { ByteCode } from './ByteCode';\nimport { MessageAddr } from './MessageAddr';\nimport { NamedKeyAddr } from './NewNamedKeyAddr';\nimport { BlockGlobalAddr } from './BlockGlobalAddr';\nimport { BalanceHoldAddr } from './BalanceHoldAddr';\nimport { EntryPointAddr } from './EntryPointAddr';\nimport { URef } from './URef';\nimport { IResultWithBytes } from '../clvalue';\n\n/**\n * Enum that defines prefixes used to identify different types of blockchain entities and objects.\n */\nexport enum PrefixName {\n  Account = 'account-hash-',\n  AddressableEntity = 'addressable-entity-',\n  Hash = 'hash-',\n  ContractPackageWasm = 'contract-package-wasm',\n  ContractPackage = 'contract-package-',\n  ContractWasm = 'contract-wasm-',\n  Contract = 'contract-',\n  URef = 'uref-',\n  Transfer = 'transfer-',\n  DeployInfo = 'deploy-',\n  EraId = 'era-',\n  Bid = 'bid-',\n  Balance = 'balance-',\n  Withdraw = 'withdraw-',\n  Dictionary = 'dictionary-',\n  SystemContractRegistry = 'system-contract-registry-',\n  EraSummary = 'era-summary-',\n  Unbond = 'unbond-',\n  ChainspecRegistry = 'chainspec-registry-',\n  ChecksumRegistry = 'checksum-registry-',\n  BidAddr = 'bid-addr-',\n  Package = 'package-',\n  Entity = 'entity-',\n  ByteCode = 'byte-code-',\n  Message = 'message-',\n  NamedKey = 'named-key-',\n  BlockGlobal = 'block-',\n  BalanceHold = 'balance-hold-',\n  EntryPoint = 'entry-point-'\n}\n\n/**\n * Enum representing different types of blockchain key types used in the system.\n */\nexport enum KeyTypeID {\n  Account = 0,\n  Hash,\n  URef,\n  Transfer,\n  DeployInfo,\n  EraId,\n  Balance,\n  Bid,\n  Withdraw,\n  Dictionary,\n  SystemContractRegistry,\n  EraSummary,\n  Unbond,\n  ChainspecRegistry,\n  ChecksumRegistry,\n  BidAddr,\n  Package,\n  AddressableEntity,\n  ByteCode,\n  Message,\n  NamedKey,\n  BlockGlobal,\n  BalanceHold,\n  EntryPoint\n}\n\n/**\n * Enum for human-readable key type names, used to represent various key entities in the blockchain.\n */\nexport enum KeyTypeName {\n  Account = 'Account',\n  Hash = 'Hash',\n  URef = 'URef',\n  Transfer = 'Transfer',\n  Deploy = 'Deploy',\n  Era = 'Era',\n  Bid = 'Bid',\n  Balance = 'Balance',\n  Withdraw = 'Withdraw',\n  Dictionary = 'Dictionary',\n  SystemContractRegistry = 'SystemContractRegistry',\n  EraSummary = 'EraSummary',\n  Unbond = 'Unbond',\n  ChainspecRegistry = 'ChainspecRegistry',\n  ChecksumRegistry = 'ChecksumRegistry'\n}\n\n/**\n * Mapping of key type names to their corresponding KeyTypeID values.\n */\nexport const typeIDbyNames = new Map<KeyTypeName, KeyTypeID>([\n  [KeyTypeName.Account, KeyTypeID.Account],\n  [KeyTypeName.Hash, KeyTypeID.Hash],\n  [KeyTypeName.URef, KeyTypeID.URef],\n  [KeyTypeName.Transfer, KeyTypeID.Transfer],\n  [KeyTypeName.Deploy, KeyTypeID.DeployInfo],\n  [KeyTypeName.Era, KeyTypeID.EraId],\n  [KeyTypeName.Bid, KeyTypeID.Bid],\n  [KeyTypeName.Balance, KeyTypeID.Balance],\n  [KeyTypeName.Withdraw, KeyTypeID.Withdraw],\n  [KeyTypeName.Dictionary, KeyTypeID.Dictionary],\n  [KeyTypeName.SystemContractRegistry, KeyTypeID.SystemContractRegistry],\n  [KeyTypeName.EraSummary, KeyTypeID.EraSummary],\n  [KeyTypeName.Unbond, KeyTypeID.Unbond],\n  [KeyTypeName.ChainspecRegistry, KeyTypeID.ChainspecRegistry],\n  [KeyTypeName.ChecksumRegistry, KeyTypeID.ChecksumRegistry]\n]);\n\n/**\n * Mapping of blockchain key prefixes to their corresponding KeyKeyTypeID values.\n */\nexport const keyIDbyPrefix = new Map<PrefixName, KeyTypeID>([\n  [PrefixName.Account, KeyTypeID.Account],\n  [PrefixName.Hash, KeyTypeID.Hash],\n  [PrefixName.Transfer, KeyTypeID.Transfer],\n  [PrefixName.URef, KeyTypeID.URef],\n  [PrefixName.DeployInfo, KeyTypeID.DeployInfo],\n  [PrefixName.EraId, KeyTypeID.EraId],\n  [PrefixName.Bid, KeyTypeID.Bid],\n  [PrefixName.Balance, KeyTypeID.Balance],\n  [PrefixName.Withdraw, KeyTypeID.Withdraw],\n  [PrefixName.Dictionary, KeyTypeID.Dictionary],\n  [PrefixName.SystemContractRegistry, KeyTypeID.SystemContractRegistry],\n  [PrefixName.EraSummary, KeyTypeID.EraSummary],\n  [PrefixName.Unbond, KeyTypeID.Unbond],\n  [PrefixName.ChainspecRegistry, KeyTypeID.ChainspecRegistry],\n  [PrefixName.ChecksumRegistry, KeyTypeID.ChecksumRegistry],\n  [PrefixName.BidAddr, KeyTypeID.BidAddr],\n  [PrefixName.Package, KeyTypeID.Package],\n  [PrefixName.Entity, KeyTypeID.AddressableEntity],\n  [PrefixName.ByteCode, KeyTypeID.ByteCode],\n  [PrefixName.Message, KeyTypeID.Message],\n  [PrefixName.NamedKey, KeyTypeID.NamedKey],\n  [PrefixName.BlockGlobal, KeyTypeID.BlockGlobal],\n  [PrefixName.BalanceHold, KeyTypeID.BalanceHold],\n  [PrefixName.EntryPoint, KeyTypeID.EntryPoint]\n]);\n\n/**\n * Default byte length for keys.\n */\nexport const KEY_DEFAULT_BYTE_LENGTH = 32;\n\n/**\n * Represents a Key that can identify different types of entities in the system.\n */\n@jsonObject\nexport class Key {\n  @jsonMember({ name: 'Type', constructor: Number })\n  type: KeyTypeID;\n\n  @jsonMember(() => AccountHash, {\n    name: 'Account'\n  })\n  account?: AccountHash;\n\n  @jsonMember({\n    name: 'Hash',\n    constructor: Hash\n  })\n  hash?: Hash;\n\n  @jsonMember({\n    name: 'URef',\n    constructor: URef\n  })\n  uRef?: URef;\n\n  @jsonMember({\n    name: 'Transfer',\n    constructor: TransferHash\n  })\n  transfer?: TransferHash;\n\n  @jsonMember({\n    name: 'Deploy',\n    constructor: Hash\n  })\n  deploy?: Hash;\n\n  @jsonMember({\n    name: 'Era',\n    constructor: Era\n  })\n  era?: Era;\n\n  @jsonMember({\n    name: 'Balance',\n    constructor: Hash\n  })\n  balance?: Hash;\n\n  @jsonMember(() => AccountHash, {\n    name: 'Bid'\n  })\n  bid?: AccountHash;\n\n  @jsonMember(() => AccountHash, {\n    name: 'Withdraw'\n  })\n  withdraw?: AccountHash;\n\n  @jsonMember({\n    name: 'Dictionary',\n    constructor: Hash\n  })\n  dictionary?: Hash;\n\n  @jsonMember({\n    name: 'SystemContactRegistry',\n    constructor: Hash\n  })\n  systemContactRegistry?: Hash;\n\n  @jsonMember({\n    name: 'EraSummary',\n    constructor: Hash\n  })\n  eraSummary?: Hash;\n\n  @jsonMember(() => AccountHash, {\n    name: 'Unbond'\n  })\n  unbond?: AccountHash;\n\n  @jsonMember({\n    name: 'ChainspecRegistry',\n    constructor: Hash\n  })\n  chainspecRegistry?: Hash;\n\n  @jsonMember({\n    name: 'ChecksumRegistry',\n    constructor: Hash\n  })\n  checksumRegistry?: Hash;\n\n  @jsonMember({\n    name: 'BidAddr',\n    constructor: BidAddr\n  })\n  bidAddr?: BidAddr;\n\n  @jsonMember({\n    name: 'Package',\n    constructor: Hash\n  })\n  package?: Hash;\n\n  @jsonMember({\n    name: 'AddressableEntity',\n    constructor: EntityAddr\n  })\n  addressableEntity?: EntityAddr;\n\n  @jsonMember({\n    name: 'ByteCode',\n    constructor: ByteCode\n  })\n  byteCode?: ByteCode;\n\n  @jsonMember({\n    name: 'Message',\n    constructor: MessageAddr\n  })\n  message?: MessageAddr;\n\n  @jsonMember({\n    name: 'NamedKey',\n    constructor: NamedKeyAddr\n  })\n  namedKey?: NamedKeyAddr;\n\n  @jsonMember({\n    name: 'BlockGlobal',\n    constructor: BlockGlobalAddr\n  })\n  blockGlobal?: BlockGlobalAddr;\n\n  @jsonMember({\n    name: 'BalanceHold',\n    constructor: BalanceHoldAddr\n  })\n  balanceHold?: BalanceHoldAddr;\n\n  @jsonMember({\n    name: 'EntryPoint',\n    constructor: EntryPointAddr\n  })\n  entryPoint?: EntryPointAddr;\n\n  /**\n   * Converts the key to bytes.\n   * @returns A Uint8Array representing the serialized key.\n   */\n  bytes(withKeyTypeID = true): Uint8Array {\n    const typeBytes = withKeyTypeID ? Uint8Array.from([this.type]) : undefined;\n\n    switch (this.type) {\n      case KeyTypeID.Balance:\n        return Key.concatBytes(this.balance?.toBytes(), typeBytes);\n      case KeyTypeID.Bid:\n        return Key.concatBytes(this.bid?.toBytes(), typeBytes);\n      case KeyTypeID.Withdraw:\n        return Key.concatBytes(this.withdraw?.toBytes(), typeBytes);\n      case KeyTypeID.SystemContractRegistry:\n        return Key.concatBytes(\n          this.systemContactRegistry?.toBytes(),\n          typeBytes\n        );\n      case KeyTypeID.Unbond:\n        return Key.concatBytes(this.unbond?.toBytes(), typeBytes);\n      case KeyTypeID.ChainspecRegistry:\n        return Key.concatBytes(this.chainspecRegistry?.toBytes(), typeBytes);\n      case KeyTypeID.ChecksumRegistry:\n        return Key.concatBytes(this.checksumRegistry?.toBytes(), typeBytes);\n      case KeyTypeID.EraSummary:\n        return Key.concatBytes(this.eraSummary?.toBytes(), typeBytes);\n      case KeyTypeID.Account:\n        return Key.concatBytes(this.account?.toBytes(), typeBytes);\n      case KeyTypeID.Hash:\n        return Key.concatBytes(this.hash?.toBytes(), typeBytes);\n      case KeyTypeID.EraId:\n        return Key.concatBytes(this.era?.toBytes(), typeBytes);\n      case KeyTypeID.URef:\n        return Key.concatBytes(this.uRef?.bytes(), typeBytes);\n      case KeyTypeID.Transfer:\n        return Key.concatBytes(this.transfer?.toBytes(), typeBytes);\n      case KeyTypeID.DeployInfo:\n        return Key.concatBytes(this.deploy?.toBytes(), typeBytes);\n      case KeyTypeID.Dictionary:\n        return Key.concatBytes(this.dictionary?.toBytes(), typeBytes);\n      case KeyTypeID.BidAddr:\n        return Key.concatBytes(this.bidAddr?.toBytes(), typeBytes);\n      case KeyTypeID.Package:\n        return Key.concatBytes(this.package?.toBytes(), typeBytes);\n      case KeyTypeID.AddressableEntity:\n        return Key.concatBytes(this.addressableEntity?.toBytes(), typeBytes);\n      case KeyTypeID.ByteCode:\n        return Key.concatBytes(this.byteCode?.toBytes(), typeBytes);\n      case KeyTypeID.Message:\n        return Key.concatBytes(this.message?.toBytes(), typeBytes);\n      case KeyTypeID.NamedKey:\n        return Key.concatBytes(this.namedKey?.toBytes(), typeBytes);\n      case KeyTypeID.BlockGlobal:\n        return Key.concatBytes(this.blockGlobal?.toBytes(), typeBytes);\n      case KeyTypeID.BalanceHold:\n        return Key.concatBytes(this.balanceHold?.toBytes(), typeBytes);\n      case KeyTypeID.EntryPoint:\n        return Key.concatBytes(this.entryPoint?.toBytes(), typeBytes);\n      default:\n        return new Uint8Array();\n    }\n  }\n\n  /**\n   * Concatenates the type and field bytes.\n   * @param typeBytes - The bytes representing the type.\n   * @param fieldBytes - The bytes representing the field.\n   * @returns A Uint8Array with concatenated type and field bytes.\n   */\n  private static concatBytes(\n    fieldBytes: Uint8Array = Uint8Array.from([]),\n    typeBytes?: Uint8Array\n  ): Uint8Array {\n    if (typeBytes) {\n      const result = new Uint8Array(typeBytes.length + fieldBytes.length);\n      result.set(typeBytes);\n      result.set(fieldBytes, typeBytes.length);\n      return result;\n    }\n\n    return fieldBytes;\n  }\n\n  /**\n   * Converts the instance to a JSON-compatible hexadecimal string.\n   *\n   * @returns {string} The hex-encoded string representation of the instance.\n   */\n  public toJSON() {\n    return Buffer.from(this.bytes(false)).toString('hex');\n  }\n\n  /**\n   * Converts the key to a prefixed string representation.\n   * @returns The prefixed string of the key.\n   */\n  toPrefixedString(): string {\n    switch (this.type) {\n      case KeyTypeID.Account:\n        return this.account!.toPrefixedString();\n      case KeyTypeID.Hash:\n        return `${PrefixName.Hash}${this.hash?.toHex()}`;\n      case KeyTypeID.EraId:\n        return `${PrefixName.EraId}${this.era?.toJSON()}`;\n      case KeyTypeID.URef:\n        return this.uRef!.toPrefixedString();\n      case KeyTypeID.Transfer:\n        return this.transfer!.toPrefixedString();\n      case KeyTypeID.DeployInfo:\n        return `${PrefixName.DeployInfo}${this.deploy!.toHex()}`;\n      case KeyTypeID.Dictionary:\n        return `${PrefixName.Dictionary}${this.dictionary!.toHex()}`;\n      case KeyTypeID.Balance:\n        return `${PrefixName.Balance}${this.balance!.toHex()}`;\n      case KeyTypeID.Bid:\n        return `${PrefixName.Bid}${this.bid!.toHex()}`;\n      case KeyTypeID.Withdraw:\n        return `${PrefixName.Withdraw}${this.withdraw!.toHex()}`;\n      case KeyTypeID.SystemContractRegistry:\n        return `${\n          PrefixName.SystemContractRegistry\n        }${this.systemContactRegistry!.toHex()}`;\n      case KeyTypeID.EraSummary:\n        return `${PrefixName.EraSummary}${this.eraSummary!.toHex()}`;\n      case KeyTypeID.Unbond:\n        return `${PrefixName.Unbond}${this.unbond!.toHex()}`;\n      case KeyTypeID.ChainspecRegistry:\n        return `${\n          PrefixName.ChainspecRegistry\n        }${this.chainspecRegistry!.toHex()}`;\n      case KeyTypeID.ChecksumRegistry:\n        return `${\n          PrefixName.ChecksumRegistry\n        }${this.checksumRegistry!.toHex()}`;\n      case KeyTypeID.BidAddr:\n        return this.bidAddr!.toPrefixedString();\n      case KeyTypeID.Package:\n        return `${PrefixName.Package}${this.package!.toHex()}`;\n      case KeyTypeID.AddressableEntity:\n        return this.addressableEntity!.toPrefixedString();\n      case KeyTypeID.ByteCode:\n        return this.byteCode!.toPrefixedString();\n      case KeyTypeID.Message:\n        return this.message!.toPrefixedString();\n      case KeyTypeID.NamedKey:\n        return this.namedKey!.toPrefixedString();\n      case KeyTypeID.BlockGlobal:\n        return this.blockGlobal!.toPrefixedString();\n      case KeyTypeID.BalanceHold:\n        return this.balanceHold!.toPrefixedString();\n      case KeyTypeID.EntryPoint:\n        return this.entryPoint!.toPrefixedString();\n      default:\n        return '';\n    }\n  }\n\n  /**\n   * Converts the key to a string representation.\n   * @returns The string representation of the key.\n   */\n  toString(): string {\n    return this.toPrefixedString();\n  }\n\n  /**\n   * Creates a Key instance from a byte array.\n   * @param bytes - The byte array containing serialized key data.\n   * @returns A new Key instance.\n   * @throws Error if deserialization fails.\n   */\n  public static fromBytes(bytes: Uint8Array): IResultWithBytes<Key> {\n    const keyType = bytes[0] as KeyTypeID;\n    const contentBytes = bytes.subarray(1);\n\n    const result = new Key();\n    result.type = keyType;\n\n    switch (keyType) {\n      case KeyTypeID.Account:\n        const accountHash = Hash.fromBytes(contentBytes);\n        result.account = new AccountHash(accountHash?.result);\n        return { result, bytes: accountHash?.bytes };\n      case KeyTypeID.Hash:\n        const hashParsed = Hash.fromBytes(contentBytes);\n        result.hash = hashParsed?.result;\n        return { result, bytes: hashParsed?.bytes };\n      case KeyTypeID.URef:\n        const uref = URef.fromBytes(contentBytes);\n        result.uRef = uref?.result;\n        return { result, bytes: uref?.bytes };\n      case KeyTypeID.Transfer:\n        const [transferBytes, remainder] = splitAt(\n          KEY_DEFAULT_BYTE_LENGTH,\n          contentBytes\n        );\n        result.transfer = new TransferHash(transferBytes);\n        return { result, bytes: remainder };\n      case KeyTypeID.DeployInfo:\n        const [deployBytes, deployRemainder] = splitAt(\n          KEY_DEFAULT_BYTE_LENGTH,\n          contentBytes\n        );\n        result.deploy = Hash.fromBytes(deployBytes)?.result;\n        return { result, bytes: deployRemainder };\n      case KeyTypeID.EraId:\n        const [eraBytes, eraRemainder] = splitAt(1, contentBytes);\n        result.era = Era.fromBytes(eraBytes);\n        return { result, bytes: eraRemainder };\n      case KeyTypeID.Balance:\n        const [balanceBytes, balanceRemainder] = splitAt(\n          KEY_DEFAULT_BYTE_LENGTH,\n          contentBytes\n        );\n        result.balance = Hash.fromBytes(balanceBytes)?.result;\n\n        return { result, bytes: balanceRemainder };\n      case KeyTypeID.Bid:\n        const [bidBytes, bidRemainder] = splitAt(\n          KEY_DEFAULT_BYTE_LENGTH,\n          contentBytes\n        );\n        const bidHash = Hash.fromBytes(bidBytes)?.result;\n        result.bid = new AccountHash(bidHash);\n\n        return { result, bytes: bidRemainder };\n      case KeyTypeID.Withdraw:\n        const [withdrawBytes, withDrawRemainder] = splitAt(\n          KEY_DEFAULT_BYTE_LENGTH,\n          contentBytes\n        );\n        const withdrawHash = Hash.fromBytes(withdrawBytes)?.result;\n        result.withdraw = new AccountHash(withdrawHash);\n        return { result, bytes: withDrawRemainder };\n      case KeyTypeID.Dictionary:\n        const [dictBytes, dictRemainder] = splitAt(\n          KEY_DEFAULT_BYTE_LENGTH,\n          contentBytes\n        );\n        result.dictionary = Hash.fromBytes(dictBytes)?.result;\n        return { result, bytes: dictRemainder };\n      case KeyTypeID.SystemContractRegistry:\n        const [systemBytes, systenRemainder] = splitAt(\n          KEY_DEFAULT_BYTE_LENGTH,\n          contentBytes\n        );\n        result.systemContactRegistry = Hash.fromBytes(systemBytes)?.result;\n        return { result, bytes: systenRemainder };\n      case KeyTypeID.EraSummary:\n        const [eraSummaryBytes, eraSummaryRemainder] = splitAt(\n          KEY_DEFAULT_BYTE_LENGTH,\n          contentBytes\n        );\n        result.eraSummary = Hash.fromBytes(eraSummaryBytes)?.result;\n        return { result, bytes: eraSummaryRemainder };\n      case KeyTypeID.Unbond:\n        const { result: unbondHash, bytes: unbondBytes } = Hash.fromBytes(\n          contentBytes\n        );\n        result.unbond = new AccountHash(unbondHash);\n        return { result, bytes: unbondBytes };\n      case KeyTypeID.ChainspecRegistry:\n        const [chainBytes, chainspecRegistryBytes] = splitAt(\n          KEY_DEFAULT_BYTE_LENGTH,\n          contentBytes\n        );\n        result.chainspecRegistry = Hash.fromBytes(chainBytes)?.result;\n        return { result, bytes: chainspecRegistryBytes };\n      case KeyTypeID.ChecksumRegistry:\n        const [checksumBytes, checksumRegistry] = splitAt(\n          KEY_DEFAULT_BYTE_LENGTH,\n          contentBytes\n        );\n        result.checksumRegistry = Hash.fromBytes(checksumBytes)?.result;\n        return { result, bytes: checksumRegistry };\n      case KeyTypeID.BidAddr:\n        const { result: bidAddr, bytes: bidAddrBytes } = BidAddr.fromBytes(\n          contentBytes\n        );\n        result.bidAddr = bidAddr;\n\n        return { result, bytes: bidAddrBytes };\n      case KeyTypeID.Package:\n        const [packageBytes, packageBytesRemainder] = splitAt(\n          KEY_DEFAULT_BYTE_LENGTH,\n          contentBytes\n        );\n        result.package = Hash.fromBytes(packageBytes)?.result;\n        return { result, bytes: packageBytesRemainder };\n      case KeyTypeID.AddressableEntity:\n        const {\n          result: entityAddr,\n          bytes: entityAddrBytes\n        } = EntityAddr.fromBytes(contentBytes);\n        result.addressableEntity = entityAddr;\n        return { result, bytes: entityAddrBytes };\n      case KeyTypeID.ByteCode:\n        const { result: byteCode, bytes: byteCodeBytes } = ByteCode.fromBytes(\n          contentBytes\n        );\n        result.byteCode = byteCode;\n\n        return { result, bytes: byteCodeBytes };\n      case KeyTypeID.Message:\n        const {\n          result: messageAddr,\n          bytes: messageAddrBytes\n        } = MessageAddr.fromBytes(contentBytes);\n        result.message = messageAddr;\n        return { result, bytes: messageAddrBytes };\n      case KeyTypeID.NamedKey:\n        const {\n          result: namedKey,\n          bytes: namedKeyBytes\n        } = NamedKeyAddr.fromBytes(contentBytes);\n        result.namedKey = namedKey;\n        return { result, bytes: namedKeyBytes };\n      case KeyTypeID.BlockGlobal:\n        const {\n          result: blockGlobal,\n          bytes: blockGlobalBytes\n        } = BlockGlobalAddr.fromBytes(contentBytes);\n        result.blockGlobal = blockGlobal;\n        return { result, bytes: blockGlobalBytes };\n      case KeyTypeID.BalanceHold:\n        const {\n          result: balanceHold,\n          bytes: balanceHoldBytes\n        } = BalanceHoldAddr.fromBytes(contentBytes);\n        result.balanceHold = balanceHold;\n        return { result, bytes: balanceHoldBytes };\n      case KeyTypeID.EntryPoint:\n        const {\n          result: entryPoint,\n          bytes: entryPointBytes\n        } = EntryPointAddr.fromBytes(contentBytes);\n        result.entryPoint = entryPoint;\n        return { result, bytes: entryPointBytes };\n      default:\n        throw new Error('Missing key type');\n    }\n  }\n\n  /**\n   * Finds the prefix name by matching the source string with a map of prefixes.\n   * @param source - The string to check for a matching prefix.\n   * @param prefixes - The map of prefix names to KeyTypeID.\n   * @returns The matching PrefixName or undefined if not found.\n   */\n  static findPrefixByMap(\n    source: string,\n    prefixes: Map<PrefixName, KeyTypeID>\n  ): PrefixName {\n    let result: PrefixName = '' as PrefixName;\n\n    prefixes.forEach((_, prefix) => {\n      if (source.startsWith(prefix)) {\n        if (\n          prefix === PrefixName.EraId &&\n          source.startsWith(PrefixName.EraSummary)\n        ) {\n          result = PrefixName.EraSummary;\n        } else if (\n          prefix === PrefixName.Bid &&\n          source.startsWith(PrefixName.BidAddr)\n        ) {\n          result = PrefixName.BidAddr;\n        } else if (\n          prefix === PrefixName.Balance &&\n          source.startsWith(PrefixName.BalanceHold)\n        ) {\n          result = PrefixName.BalanceHold;\n        } else {\n          result = prefix;\n        }\n        return; // Exit early from forEach if a match is found\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Creates a Key instance based on the type ID and source string.\n   * @param source - The string containing the key data.\n   * @param typeID - The TypeID of the key.\n   * @returns A new Key instance.\n   * @throws Error if the type is not found or invalid.\n   */\n  static createByType(source: string, typeID: KeyTypeID): Key {\n    const result = new Key();\n    result.type = typeID;\n\n    switch (result.type) {\n      case KeyTypeID.EraId:\n        result.era = Era.fromJSON(source.replace(PrefixName.EraId, ''));\n\n        break;\n      case KeyTypeID.Hash:\n        result.hash = Hash.fromHex(source.replace(PrefixName.Hash, ''));\n        break;\n      case KeyTypeID.URef:\n        result.uRef = URef.fromString(source);\n        break;\n      case KeyTypeID.Account:\n        result.account = AccountHash.fromString(source);\n        break;\n      case KeyTypeID.Transfer:\n        result.transfer = TransferHash.fromJSON(source);\n        break;\n      case KeyTypeID.DeployInfo:\n        result.deploy = Hash.fromHex(source.replace(PrefixName.DeployInfo, ''));\n        break;\n      case KeyTypeID.Balance:\n        result.balance = Hash.fromHex(source.replace(PrefixName.Balance, ''));\n        break;\n      case KeyTypeID.Bid:\n        result.bid = AccountHash.fromString(source.replace(PrefixName.Bid, ''));\n        break;\n      case KeyTypeID.Withdraw:\n        result.withdraw = AccountHash.fromString(\n          source.replace(PrefixName.Withdraw, '')\n        );\n        break;\n      case KeyTypeID.Dictionary:\n        result.dictionary = Hash.fromHex(\n          source.replace(PrefixName.Dictionary, '')\n        );\n        break;\n      case KeyTypeID.SystemContractRegistry:\n        result.systemContactRegistry = Hash.fromHex(\n          source.replace(PrefixName.SystemContractRegistry, '')\n        );\n        break;\n      case KeyTypeID.EraSummary:\n        result.eraSummary = Hash.fromHex(\n          source.replace(PrefixName.EraSummary, '')\n        );\n        break;\n      case KeyTypeID.Unbond:\n        result.unbond = AccountHash.fromString(\n          source.replace(PrefixName.Unbond, '')\n        );\n        break;\n      case KeyTypeID.ChainspecRegistry:\n        result.chainspecRegistry = Hash.fromHex(\n          source.replace(PrefixName.ChainspecRegistry, '')\n        );\n        break;\n      case KeyTypeID.ChecksumRegistry:\n        result.checksumRegistry = Hash.fromHex(\n          source.replace(PrefixName.ChecksumRegistry, '')\n        );\n        break;\n      case KeyTypeID.BidAddr:\n        result.bidAddr = BidAddr.fromHex(\n          source.replace(PrefixName.BidAddr, '')\n        );\n        break;\n      case KeyTypeID.Package:\n        result.package = Hash.fromHex(source.replace(PrefixName.Package, ''));\n        break;\n      case KeyTypeID.AddressableEntity:\n        result.addressableEntity = EntityAddr.fromPrefixedString(\n          source.replace(PrefixName.AddressableEntity, '')\n        );\n        break;\n      case KeyTypeID.ByteCode:\n        result.byteCode = ByteCode.fromJSON(\n          source.replace(PrefixName.ByteCode, '')\n        );\n        break;\n      case KeyTypeID.Message:\n        result.message = MessageAddr.fromString(source);\n        break;\n      case KeyTypeID.NamedKey:\n        result.namedKey = NamedKeyAddr.fromString(\n          source.replace(PrefixName.NamedKey, '')\n        );\n        break;\n      case KeyTypeID.BlockGlobal:\n        result.blockGlobal = BlockGlobalAddr.fromString(\n          source.replace(PrefixName.BlockGlobal, '')\n        );\n        break;\n      case KeyTypeID.BalanceHold:\n        result.balanceHold = BalanceHoldAddr.fromString(\n          source.replace(PrefixName.BalanceHold, '')\n        );\n        break;\n      case KeyTypeID.EntryPoint:\n        result.entryPoint = EntryPointAddr.fromString(\n          source.replace(PrefixName.EntryPoint, '')\n        );\n        break;\n      default:\n        throw new Error(`type is not found -> source: ${source}`);\n    }\n    return result;\n  }\n\n  /**\n   * Parses a Key instance from a string representation.\n   * @param source - The string containing the key data.\n   * @returns A new Key instance.\n   * @throws Error if the format is invalid or unexpected.\n   */\n  static parseTypeByString(source: string): Key {\n    const openBracketIndex = source.indexOf('(');\n    if (openBracketIndex === -1) {\n      throw new Error('invalid key format');\n    }\n\n    const typeIndexStart = 5;\n    const keyTypeStr = source.slice(typeIndexStart, openBracketIndex);\n    const keyValue = source.slice(openBracketIndex + 1, -1);\n    const typeID = typeIDbyNames.get(keyTypeStr as KeyTypeName);\n    if (typeID === undefined) {\n      throw new Error('unexpected KeyType');\n    }\n\n    return Key.createByType(keyValue, typeID);\n  }\n\n  /**\n   * Creates a new Key instance from a source string.\n   * @param source - The string containing the key data.\n   * @returns A new Key instance.\n   * @throws Error if the prefix is not found or the source is invalid.\n   */\n  static newKey(source: string): Key {\n    if (source.length === Hash.StringHashLen) {\n      const defaultHash = Hash.fromHex(source);\n      const result = new Key();\n      result.type = KeyTypeID.Hash;\n      result.hash = defaultHash;\n      return result;\n    }\n\n    if (source.startsWith('Key::')) {\n      return Key.parseTypeByString(source);\n    }\n\n    if (source.startsWith('00') && source.length === Hash.StringHashLen + 2) {\n      return Key.createByType(source.slice(2), KeyTypeID.Account);\n    }\n\n    const prefix = Key.findPrefixByMap(source, keyIDbyPrefix);\n    if (!prefix) {\n      throw new Error(`prefix is not found, source: ${source}`);\n    }\n\n    return Key.createByType(source, keyIDbyPrefix.get(prefix)!);\n  }\n}\n\n/**\n * Splits the array at a given index.\n * @param i - The index to split the array.\n * @param arr - The Uint8Array to split.\n * @returns A new Uint8Array from the start to index i.\n * @throws Error if the index is out of bounds.\n */\nexport const splitAt = (i: number, arr: Uint8Array) => {\n  if (i > arr.length - 1) {\n    throw new Error('Early end of stream when deserializing data.');\n  }\n  const clonedArray = new Uint8Array(arr);\n  return [clonedArray.subarray(0, i), clonedArray.subarray(i)];\n};\n","import { concat } from '@ethersproject/bytes';\nimport { jsonMember, jsonObject } from 'typedjson';\n\nimport { Hash } from './Hash';\nimport { IResultWithBytes } from '../clvalue';\nimport { EntityAddr } from './EntityAddr';\n\n/** Prefix for topics in MessageAddr. */\nconst TopicPrefix = 'topic-';\n\n/** Prefix for messages in MessageAddr. */\nconst PrefixNameMessage = 'message-';\n\n/**\n * Represents an addressable message within the system. The address is composed of an associated entity address,\n * a hashed topic name, and an optional message index. It offers various utilities for serialization, deserialization,\n * and converting the address into prefixed string and byte representations.\n */\n@jsonObject\nexport class MessageAddr {\n  /** The address of the associated entity. */\n  @jsonMember({\n    name: 'EntityAddr',\n    constructor: EntityAddr,\n    deserializer: json => {\n      if (!json) return;\n      return EntityAddr.fromJSON(json);\n    },\n    serializer: value => value.toJSON()\n  })\n  public entityAddr: EntityAddr;\n\n  /** The hash of the topic name associated with this message. */\n  @jsonMember({ name: 'TopicNameHash', constructor: Hash })\n  public topicNameHash: Hash;\n\n  /** The optional index of the message within the topic. */\n  @jsonMember({ name: 'MessageIndex', constructor: Number })\n  public messageIndex?: number;\n\n  /**\n   * Creates an instance of MessageAddr.\n   * @param entityAddr - The address of the associated entity.\n   * @param topicNameHash - The hash of the topic name.\n   * @param messageIndex - Optional index of the message.\n   */\n  constructor(\n    entityAddr: EntityAddr,\n    topicNameHash: Hash,\n    messageIndex?: number\n  ) {\n    this.entityAddr = entityAddr;\n    this.topicNameHash = topicNameHash;\n    this.messageIndex = messageIndex;\n  }\n\n  /**\n   * Instantiates a `MessageAddr` from its string representation.\n   * The string should follow the prefixed format used in the system.\n   * @param source - The string representation of the MessageAddr.\n   * @returns A new MessageAddr instance.\n   * @throws Error if the provided string does not match the expected format.\n   */\n  static fromString(source: string): MessageAddr {\n    if (!source.startsWith(PrefixNameMessage)) {\n      throw new Error(\n        `Key not valid. It should start with '${PrefixNameMessage}'.`\n      );\n    }\n\n    source = source.substring(PrefixNameMessage.length);\n\n    let hashAddr: string;\n    let topicHash: string;\n    let index: number | undefined;\n\n    if (source.startsWith(TopicPrefix)) {\n      source = source.substring(TopicPrefix.length);\n      const parts = source.split('-');\n\n      if (parts.length !== 4) {\n        throw new Error(\n          'Key not valid. It should have a hash address and a topic hash.'\n        );\n      }\n\n      hashAddr = `${parts[0]}-${parts[1]}-${parts[2]}`;\n      topicHash = parts[3];\n    } else {\n      const parts = source.split('-');\n\n      if (parts.length !== 5) {\n        throw new Error(\n          'Key not valid. It should have a hash address, a topic hash, and a message index.'\n        );\n      }\n\n      hashAddr = `${parts[0]}-${parts[1]}-${parts[2]}`;\n      topicHash = parts[3];\n\n      if (parts[4].length === 0) {\n        throw new Error('Key not valid. Expected a non-empty message index.');\n      }\n\n      index = parseInt(parts[4], 16);\n    }\n\n    return new MessageAddr(\n      EntityAddr.fromPrefixedString(hashAddr),\n      Hash.fromHex(topicHash),\n      index\n    );\n  }\n\n  /**\n   * Converts the `MessageAddr` into a standardized prefixed string format.\n   * Useful for displaying or storing the address in text format.\n   * @returns A prefixed string representation of the `MessageAddr`.\n   */\n  toPrefixedString(): string {\n    let result = PrefixNameMessage;\n    if (!this.messageIndex) {\n      result += TopicPrefix;\n    }\n    result += this.entityAddr.toPrefixedString();\n    result += '-' + this.topicNameHash.toHex();\n\n    if (this.messageIndex !== undefined) {\n      result += `-${this.messageIndex}`;\n    }\n\n    return result;\n  }\n\n  /**\n   * Serializes the `MessageAddr` into a JSON-compatible string format.\n   * Primarily used for JSON-based data exchange.\n   * @returns A JSON string representation of the `MessageAddr`.\n   */\n  toJSON(): string {\n    return this.toPrefixedString();\n  }\n\n  /**\n   * Constructs a `MessageAddr` instance from a byte array.\n   * Interprets the byte array in a structured format to extract\n   * the entity address, topic name hash, and optionally, the message index.\n   * @param bytes - The byte array representing the MessageAddr.\n   * @returns A new `MessageAddr` instance wrapped in an `IResultWithBytes`.\n   */\n  static fromBytes(bytes: Uint8Array): IResultWithBytes<MessageAddr> {\n    const entityAddr = EntityAddr.fromBytes(bytes);\n    const topicNameHash = Hash.fromBytes(bytes);\n\n    let messageIndex: number | undefined;\n    if (bytes.length > 0) {\n      const messageIndexArray = bytes.slice(bytes.length - 4);\n      messageIndex = new DataView(messageIndexArray.buffer).getUint32(0, true);\n    }\n\n    return {\n      result: new MessageAddr(\n        entityAddr?.result,\n        topicNameHash?.result,\n        messageIndex\n      ),\n      bytes: concat([entityAddr.bytes, topicNameHash.bytes])\n    };\n  }\n\n  /**\n   * Converts the `MessageAddr` to a byte array, enabling binary data storage.\n   * Useful for transmission or storage where a compact format is needed.\n   * @returns A `Uint8Array` representing the `MessageAddr`.\n   */\n  toBytes(): Uint8Array {\n    const entityBytes = this.entityAddr.toBytes();\n    const topicBytes = this.topicNameHash.toBytes();\n    const result = new Uint8Array(\n      entityBytes.length +\n        topicBytes.length +\n        (this.messageIndex !== undefined ? 4 : 0)\n    );\n\n    result.set(entityBytes);\n    result.set(topicBytes, entityBytes.length);\n\n    if (this.messageIndex !== undefined) {\n      const indexBuffer = new Uint8Array(4);\n      new DataView(indexBuffer.buffer).setUint32(0, this.messageIndex, true);\n      result.set(indexBuffer, entityBytes.length + topicBytes.length);\n    }\n\n    return result;\n  }\n}\n","import { jsonMember, jsonObject } from 'typedjson';\nimport { EntityAddr } from './EntityAddr';\nimport { PrefixName } from './Key';\nimport { IResultWithBytes } from '../clvalue';\n\n/**\n * Represents a named key address, which is identified by a base entity address and a unique name.\n * The name is represented in bytes to allow for efficient encoding and decoding.\n */\n@jsonObject\nexport class NamedKeyAddr {\n  /**\n   * The base address of the entity to which this key belongs.\n   */\n  @jsonMember({ name: 'BaseAddr', constructor: EntityAddr })\n  baseAddr: EntityAddr;\n\n  /**\n   * The bytes representing the name associated with the address.\n   * Expected to be a 32-byte array for validity.\n   */\n  @jsonMember({ name: 'NameBytes', constructor: Uint8Array })\n  nameBytes: Uint8Array;\n\n  /**\n   * Creates an instance of NamedKeyAddr.\n   * @param baseAddr - The base address of the entity.\n   * @param nameBytes - The 32-byte array representing the name associated with the address.\n   */\n  constructor(baseAddr: EntityAddr, nameBytes: Uint8Array) {\n    this.baseAddr = baseAddr;\n    this.nameBytes = nameBytes;\n  }\n\n  /**\n   * Creates a NamedKeyAddr instance from a string representation, parsing the base address and name bytes.\n   * The string should follow the expected prefixed format used by the system.\n   * @param source - The string representation of the NamedKeyAddr.\n   * @returns A new NamedKeyAddr instance.\n   * @throws Error if the nameBytes length is not exactly 32 bytes.\n   */\n  static fromString(source: string): NamedKeyAddr {\n    const nameBytesData = source.substring(source.lastIndexOf('-') + 1);\n    const baseAddrSource = source\n      .substring(0, source.lastIndexOf('-'))\n      .replace(PrefixName.AddressableEntity, '');\n\n    const nameBytes = Buffer.from(nameBytesData, 'hex');\n    if (nameBytes.length !== 32) {\n      throw new Error('Invalid NameBytes length, expected 32 bytes.');\n    }\n\n    const baseAddr = EntityAddr.fromPrefixedString(baseAddrSource);\n    return new NamedKeyAddr(baseAddr, nameBytes);\n  }\n\n  /**\n   * Converts the NamedKeyAddr instance to a standardized prefixed string format.\n   * This format includes the base address and the name bytes, represented in hexadecimal.\n   * @returns A prefixed string representation of the NamedKeyAddr.\n   */\n  toPrefixedString(): string {\n    return `${\n      PrefixName.NamedKey\n    }${this.baseAddr.toPrefixedString()}-${Buffer.from(this.nameBytes).toString(\n      'hex'\n    )}`;\n  }\n\n  /**\n   * Serializes the NamedKeyAddr to a JSON-compatible string.\n   * Primarily used for exchanging data in JSON format.\n   * @returns A JSON-compatible string representation of the NamedKeyAddr.\n   */\n  toJSON(): string {\n    return this.toPrefixedString();\n  }\n\n  /**\n   * Constructs a NamedKeyAddr instance from a byte array representation.\n   * The byte array should contain the base address followed by the name bytes.\n   * @param bytes - The byte array representing the NamedKeyAddr.\n   * @returns An `IResultWithBytes` object containing the NamedKeyAddr instance and any remaining bytes.\n   * @throws Error if the byte array does not contain at least 32 bytes for the name.\n   */\n  static fromBytes(bytes: Uint8Array): IResultWithBytes<NamedKeyAddr> {\n    const baseAddr = EntityAddr.fromBytes(bytes);\n\n    if (bytes.length < 32) {\n      throw new Error('Insufficient bytes for NameBytes; expected 32 bytes.');\n    }\n    const nameBytes = bytes.slice(0, 32);\n    return {\n      result: new NamedKeyAddr(baseAddr?.result, nameBytes),\n      bytes: baseAddr?.bytes\n    };\n  }\n\n  /**\n   * Converts the NamedKeyAddr to a byte array for efficient storage or transmission.\n   * The byte array includes the base address followed by the 32-byte name.\n   * @returns A Uint8Array representing the NamedKeyAddr.\n   */\n  toBytes(): Uint8Array {\n    return Buffer.concat([this.baseAddr.toBytes(), this.nameBytes]);\n  }\n}\n","import { jsonMember, jsonObject } from 'typedjson';\nimport { Hash } from './Hash';\n\n/** Prefix for transfer hashes in TransferHash. */\nexport const PrefixNameTransfer = 'transfer-';\n\n/**\n * Represents a transfer hash, extending the `Hash` class, with an additional prefix specific to transfer entities.\n * This prefix aids in identifying transfer-related hashes within the system.\n */\n@jsonObject\nexport class TransferHash extends Hash {\n  /**\n   * The origin prefix used to identify transfer-related hashes, defaulting to `transfer-`.\n   */\n  @jsonMember({ name: 'originPrefix', constructor: String })\n  originPrefix: string = PrefixNameTransfer;\n\n  /**\n   * Creates an instance of TransferHash.\n   * Supports both hex strings (with or without the transfer prefix) and Uint8Array representations of the hash.\n   * @param source - A hex string or Uint8Array representing the hash.\n   */\n  constructor(source: string | Uint8Array) {\n    if (typeof source === 'string') {\n      const { hashBytes, originPrefix } = TransferHash.initializeFromSource(\n        source\n      );\n      // @ts-ignore\n      super(hashBytes);\n      this.originPrefix = originPrefix;\n    } else {\n      super(source);\n    }\n  }\n\n  /**\n   * Parses a source string to extract the hash bytes and verify if it includes the transfer prefix.\n   * @param source - The source string representing the transfer hash, optionally prefixed.\n   * @returns An object containing the hash bytes and the detected origin prefix.\n   */\n  private static initializeFromSource(\n    source: string\n  ): { hashBytes: Uint8Array; originPrefix: string } {\n    const originPrefix = source.startsWith(PrefixNameTransfer)\n      ? PrefixNameTransfer\n      : '';\n    const hashHex = source.replace(originPrefix, '');\n    return {\n      hashBytes: Uint8Array.from(Buffer.from(hashHex, 'hex')),\n      originPrefix\n    };\n  }\n\n  /**\n   * Converts the TransferHash to a standardized prefixed string format.\n   * This format includes the transfer-specific prefix followed by the hash in hexadecimal format.\n   * @returns A string representation of the TransferHash with its prefix.\n   */\n  toPrefixedString(): string {\n    return `${this.originPrefix}${this.toHex()}`;\n  }\n\n  /**\n   * Serializes the TransferHash to a JSON-compatible string.\n   * Primarily used for JSON-based data exchange or storage.\n   * @returns A JSON-compatible string representation of the TransferHash.\n   */\n  toJSON(): string {\n    return this.toPrefixedString();\n  }\n\n  /**\n   * Instantiates a TransferHash from a JSON-compatible string, allowing for easy deserialization.\n   * The string should represent the TransferHash in prefixed hex format.\n   * @param json - The JSON string representing the TransferHash.\n   * @returns A new TransferHash instance initialized from the JSON string.\n   */\n  static fromJSON(json: string): TransferHash {\n    return new TransferHash(json);\n  }\n}\n","import { jsonObject, jsonMember } from 'typedjson';\nimport { IResultWithBytes } from '../clvalue';\nimport { Conversions } from '../Conversions';\nimport { concat } from '@ethersproject/bytes';\n\n/**\n * Enum representing the access permissions of a URef.\n * These permissions define the allowed actions on the URef, such as read, write, or add.\n */\nexport enum UrefAccess {\n  None = 0,\n  Read,\n  Write,\n  Add,\n  ReadWrite,\n  ReadAdd,\n  AddWrite,\n  ReadAddWrite\n}\n\n/** Error thrown when the URef format is incorrect. */\nexport const ErrIncorrectUrefFormat = new Error('incorrect uref format');\n\n/** Prefix for URef strings. */\nexport const PrefixNameURef = 'uref-';\n\n/** Length of a URef hash in bytes. */\nexport const ByteHashLen = 32;\n\n/**\n * Represents an Unforgeable Reference (URef) in the system, identified by a unique hash and associated with specific access permissions.\n * A URef is used to control permissions and securely reference data in smart contracts.\n */\n@jsonObject\nexport class URef {\n  /** The unique data (hash) associated with the URef, represented as a 32-byte array. */\n  @jsonMember(Uint8Array)\n  data: Uint8Array;\n\n  /** The access permissions assigned to this URef, defined by the `UrefAccess` enum. */\n  @jsonMember({ constructor: Number })\n  access: UrefAccess;\n\n  /**\n   * Creates an instance of URef.\n   * @param data - The data (hash) of the URef, expected to be exactly 32 bytes.\n   * @param access - The access permissions for the URef, specified by the `UrefAccess` enum.\n   * @throws Error if the data length is not equal to `ByteHashLen` or if the access rights are unsupported.\n   */\n  constructor(data: Uint8Array, access: UrefAccess) {\n    if (data.length !== ByteHashLen) {\n      throw new Error(`Invalid URef data length; expected ${ByteHashLen}`);\n    }\n\n    if (!Object.values(UrefAccess).includes(access)) {\n      throw new Error('Unsupported AccessRights');\n    }\n\n    this.data = data;\n    this.access = access;\n  }\n\n  /**\n   * Converts the URef to a byte array representation.\n   * This format is useful for serialization or data transfer.\n   * @returns A Uint8Array representing the URef, combining its data and access bytes.\n   */\n  bytes(): Uint8Array {\n    const accessBytes = new Uint8Array([this.access]);\n    return concat([this.data, accessBytes]);\n  }\n\n  /**\n   * Converts the URef to a prefixed string representation, following the standard format for URef strings.\n   * @returns A string with the URef prefix, data in hex format, and access permissions in hex format.\n   */\n  toPrefixedString(): string {\n    return [PrefixNameURef.replace('-', ''), this.toString()].join('-');\n  }\n\n  /**\n   * Converts the URef to a string, displaying its data as a hexadecimal string along with the access permissions.\n   * @returns A string representation of the URef.\n   */\n  toString(): string {\n    return [\n      Conversions.encodeBase16(this.data),\n      new Array(3).join('0').slice((3 || 2) * -1) + this.access.toString(8)\n    ].join('-');\n  }\n\n  /**\n   * Sets or updates the access permissions for the URef.\n   * @param access - The new access permission to set, defined by the `UrefAccess` enum.\n   */\n  setAccess(access: UrefAccess) {\n    this.access = access;\n  }\n\n  /**\n   * Serializes the URef to a JSON-compatible string format.\n   * @returns A JSON string representation of the URef.\n   */\n  toJSON(): string {\n    return this.toPrefixedString();\n  }\n\n  /**\n   * Creates a URef from a JSON-compatible string representation.\n   * @param data - The JSON string representing the URef.\n   * @returns A new URef instance.\n   */\n  static fromJSON(data: string): URef {\n    return URef.fromString(data);\n  }\n\n  /**\n   * Parses a URef from a prefixed string format, which includes its data and access permissions.\n   * @param source - The string containing the URef data, starting with the URef prefix.\n   * @returns A new URef instance.\n   * @throws ErrIncorrectUrefFormat if the string format does not match the expected URef format.\n   */\n  static fromString(source: string): URef {\n    if (!source.startsWith(`${PrefixNameURef}`)) {\n      throw new Error(\"Prefix is not 'uref-'\");\n    }\n\n    const parts = source.substring(`${PrefixNameURef}`.length).split('-', 2);\n\n    if (parts.length !== 2) {\n      throw ErrIncorrectUrefFormat;\n    }\n    const data = Conversions.decodeBase16(parts[0]);\n    const access = parseInt(parts[1], 8);\n    return new URef(data, access as UrefAccess);\n  }\n\n  /**\n   * Creates a URef from a byte array representation, expecting the hash data and access byte.\n   * @param bytes - The byte array containing the URef data and access byte.\n   * @returns A new URef instance wrapped in an `IResultWithBytes` object.\n   * @throws Error if the byte array length does not match the expected URef structure.\n   */\n  static fromBytes(bytes: Uint8Array): IResultWithBytes<URef> {\n    if (bytes.length !== ByteHashLen + 1) {\n      throw new Error('Invalid URef bytes length');\n    }\n    const data = bytes.subarray(0, ByteHashLen);\n    const access = bytes[ByteHashLen];\n    return {\n      result: new URef(data, access as UrefAccess),\n      bytes: bytes.subarray(ByteHashLen + 1)\n    };\n  }\n\n  /**\n   * Returns the byte array representation of the URef, often used for driving values in other contexts.\n   * @returns A Uint8Array representing the URef.\n   */\n  toDriverValue(): Uint8Array {\n    return this.bytes();\n  }\n\n  /**\n   * Creates a URef instance from an ArrayBuffer, extracting the hash data and access byte.\n   * @param arrayBuffer - The ArrayBuffer containing the URef data.\n   * @returns A new URef instance.\n   * @throws Error if the ArrayBuffer size is smaller than expected.\n   */\n  public static fromBuffer(arrayBuffer: ArrayBuffer): URef {\n    const dataView = new DataView(arrayBuffer);\n\n    if (dataView.byteLength < ByteHashLen + 1) {\n      throw new Error('ArrayBuffer size is too small');\n    }\n\n    const data = new Uint8Array(arrayBuffer.slice(0, ByteHashLen));\n    const access = dataView.getUint8(ByteHashLen);\n\n    return new URef(data, access);\n  }\n}\n","export * from './Account';\nexport * from './AddressableEntity';\nexport * from './BalanceHoldAddr';\nexport * from './BidAddr';\nexport * from './BlockGlobalAddr';\nexport * from './EntityAddr';\nexport * from './EntryPointAddr';\nexport * from './Era';\nexport * from './Hash';\nexport * from './Key';\nexport * from './MessageAddr';\nexport * from './NewNamedKeyAddr';\nexport * from './Transfer';\nexport * from './URef';\nexport * from './ByteCode';\nexport * from './Contract';\nexport * from './ContractPackage';\n","/**\n * Enum representing supported cryptographic key algorithms.\n * Each value corresponds to a specific cryptographic algorithm used in digital signatures.\n */\nexport enum KeyAlgorithm {\n  /** ED25519 digital signature algorithm */\n  ED25519 = 1,\n\n  /** SECP256K1 elliptic curve digital signature algorithm */\n  SECP256K1 = 2\n}\n\n/**\n * Settings for each key algorithm, providing additional metadata.\n * Maps `KeyAlgorithm` enum values to their corresponding name.\n */\nexport const KeySettings: Record<KeyAlgorithm, { name: string }> = {\n  [KeyAlgorithm.ED25519]: { name: 'ED25519' },\n  [KeyAlgorithm.SECP256K1]: { name: 'SECP256K1' }\n};\n\n/**\n * Utility class for working with key algorithms, allowing conversion to string and byte formats.\n * Provides convenient methods to retrieve the algorithm name and numeric representation.\n */\nexport class KeyAlgorithmUtils {\n  /**\n   * Creates an instance of KeyAlgorithmUtils.\n   * @param algorithm - The key algorithm to manage, specified by the `KeyAlgorithm` enum.\n   */\n  constructor(private algorithm: KeyAlgorithm) {}\n\n  /**\n   * Returns the name of the key algorithm as a string.\n   * @returns The name of the key algorithm, as defined in `KeySettings`.\n   */\n  toString(): string {\n    return KeySettings[this.algorithm].name;\n  }\n\n  /**\n   * Returns the numeric byte representation of the key algorithm.\n   * @returns The numeric value of the key algorithm.\n   */\n  toByte(): number {\n    return this.algorithm;\n  }\n}\n","import { concat } from '@ethersproject/bytes';\n\nimport { PublicKey } from './PublicKey';\nimport { PrivateKey as Ed25519PrivateKey } from './ed25519/PrivateKey';\nimport { PrivateKey as Secp256k1PrivateKey } from './secp256k1/PrivateKey';\nimport { KeyAlgorithm } from './Algorithm';\n\n/**\n * Interface representing the structure and methods of a private key, including\n * functions to retrieve public key bytes, sign messages, and export to PEM format.\n */\nexport interface PrivateKeyInternal {\n  /** Retrieves the public key bytes. */\n  publicKeyBytes(): Uint8Array;\n  toBytes(): Uint8Array;\n\n  /**\n   * Signs a message using the private key.\n   * @param message - The message to sign.\n   * @returns A promise resolving to the signature bytes.\n   */\n  sign(message: Uint8Array): Uint8Array;\n\n  /** Converts the private key to PEM format. */\n  toPem(): string;\n}\n\n/**\n * Represents a private key with associated public key and cryptographic algorithm.\n * Provides methods for signing messages, exporting to PEM, and generating public keys.\n */\nexport class PrivateKey {\n  /** The cryptographic algorithm used for the key. */\n  private alg: KeyAlgorithm;\n\n  /** The public key associated with this private key. */\n  private pub: PublicKey;\n\n  /** The internal private key implementation. */\n  private priv: PrivateKeyInternal;\n\n  /**\n   * Creates an instance of PrivateKey.\n   * @param alg - The cryptographic algorithm.\n   * @param pub - The associated public key.\n   * @param priv - The private key implementation.\n   */\n  constructor(alg: KeyAlgorithm, pub: PublicKey, priv: PrivateKeyInternal) {\n    this.alg = alg;\n    this.pub = pub;\n    this.priv = priv;\n  }\n\n  toBytes(): Uint8Array {\n    return this.priv.toBytes();\n  }\n\n  /**\n   * Gets the public key associated with this private key.\n   * @returns The associated PublicKey instance.\n   */\n  public get publicKey(): PublicKey {\n    return this.pub;\n  }\n\n  /**\n   * Exports the private key to PEM format.\n   * @returns A PEM-encoded string of the private key.\n   */\n  public toPem(): string {\n    return this.priv.toPem();\n  }\n\n  /**\n   * Signs a message using the private key.\n   * @param msg - The message to sign.\n   * @returns A promise resolving to the signature bytes.\n   */\n  public sign(msg: Uint8Array): Uint8Array {\n    return this.priv.sign(msg);\n  }\n\n  /**\n   * Signs a message using the private key and includes the algorithm byte in the signature.\n   * @param msg - The message to sign.\n   * @returns A promise resolving to the signature bytes with the algorithm byte.\n   */\n  public signAndAddAlgorithmBytes(msg: Uint8Array): Uint8Array {\n    const signature = this.priv.sign(msg);\n    const algBytes = Uint8Array.of(this.alg);\n    return concat([algBytes, signature]);\n  }\n\n  /**\n   * Signs a message without including the algorithm byte.\n   * @param msg - The message to sign.\n   * @returns A promise resolving to the raw signature bytes.\n   */\n  public async rawSign(msg: Uint8Array): Promise<Uint8Array> {\n    return this.priv.sign(msg);\n  }\n\n  /**\n   * Generates a new private key with the specified algorithm.\n   * @param algorithm - The cryptographic algorithm to use.\n   * @returns A promise resolving to a new PrivateKey instance.\n   */\n  public static generate(algorithm: KeyAlgorithm): PrivateKey {\n    const priv = PrivateKeyFactory.createPrivateKey(algorithm);\n    const pubBytes = priv.publicKeyBytes();\n    const algBytes = Uint8Array.of(algorithm);\n    const pub = PublicKey.fromBuffer(concat([algBytes, pubBytes]));\n    return new PrivateKey(algorithm, pub, priv);\n  }\n\n  /**\n   * Creates a private key from a PEM-encoded string.\n   * @param content - The PEM-encoded string.\n   * @param algorithm - The cryptographic algorithm to use.\n   * @returns A promise resolving to a PrivateKey instance.\n   */\n  public static fromPem(\n    content: string,\n    algorithm: KeyAlgorithm\n  ): PrivateKey {\n    const priv = PrivateKeyFactory.createPrivateKeyFromPem(\n      content,\n      algorithm\n    );\n    const pubBytes = priv.publicKeyBytes();\n    const algBytes = Uint8Array.of(algorithm);\n    const pub = PublicKey.fromBuffer(concat([algBytes, pubBytes]));\n    return new PrivateKey(algorithm, pub, priv);\n  }\n\n  /**\n   * Creates a private key from a hexadecimal string.\n   * @param key - The hexadecimal string of the private key.\n   * @param algorithm - The cryptographic algorithm to use.\n   * @returns A promise resolving to a PrivateKey instance.\n   */\n  public static fromHex(\n    key: string,\n    algorithm: KeyAlgorithm\n  ): PrivateKey {\n    const priv = PrivateKeyFactory.createPrivateKeyFromHex(\n      key,\n      algorithm\n    );\n    const pubBytes = priv.publicKeyBytes();\n    const algBytes = Uint8Array.of(algorithm);\n    const pub = PublicKey.fromBuffer(concat([algBytes, pubBytes]));\n    return new PrivateKey(algorithm, pub, priv);\n  }\n}\n\n/**\n * Factory class for creating instances of PrivateKeyInternal using different formats and algorithms.\n * This utility class allows generating, importing, and creating private keys with specific cryptographic algorithms.\n */\nclass PrivateKeyFactory {\n  /**\n   * Creates a new private key using the specified algorithm.\n   * @param algorithm - The cryptographic algorithm to use.\n   * @returns A promise resolving to a PrivateKeyInternal instance.\n   * @throws Error if the algorithm is unsupported.\n   */\n  public static createPrivateKey(\n    algorithm: KeyAlgorithm\n  ): PrivateKeyInternal {\n    switch (algorithm) {\n      case KeyAlgorithm.ED25519:\n        return Ed25519PrivateKey.generate();\n      case KeyAlgorithm.SECP256K1:\n        return Secp256k1PrivateKey.generate();\n      default:\n        throw new Error(`Unsupported key algorithm: ${algorithm}`);\n    }\n  }\n\n  /**\n   * Creates a PrivateKeyInternal instance from a PEM-encoded string.\n   * @param content - The PEM-encoded string.\n   * @param algorithm - The cryptographic algorithm to use.\n   * @returns A promise resolving to a PrivateKeyInternal instance.\n   * @throws Error if the algorithm is unsupported.\n   */\n  public static createPrivateKeyFromPem(\n    content: string,\n    algorithm: KeyAlgorithm\n  ): PrivateKeyInternal {\n    switch (algorithm) {\n      case KeyAlgorithm.ED25519:\n        return Ed25519PrivateKey.fromPem(content);\n      case KeyAlgorithm.SECP256K1:\n        return Secp256k1PrivateKey.fromPem(content);\n      default:\n        throw new Error(`Unsupported key algorithm: ${algorithm}`);\n    }\n  }\n\n  /**\n   * Creates a PrivateKeyInternal instance from a hexadecimal string.\n   * @param key - The hexadecimal string of the private key.\n   * @param algorithm - The cryptographic algorithm to use.\n   * @returns A promise resolving to a PrivateKeyInternal instance.\n   * @throws Error if the algorithm is unsupported.\n   */\n  public static createPrivateKeyFromHex(\n    key: string,\n    algorithm: KeyAlgorithm\n  ): PrivateKeyInternal {\n    switch (algorithm) {\n      case KeyAlgorithm.ED25519:\n        return Ed25519PrivateKey.fromHex(key);\n      case KeyAlgorithm.SECP256K1:\n        return Secp256k1PrivateKey.fromHex(key);\n      default:\n        throw new Error(`Unsupported key algorithm: ${algorithm}`);\n    }\n  }\n}\n","import { jsonObject, jsonMember } from 'typedjson';\nimport { concat } from '@ethersproject/bytes';\n\nimport { PublicKey as Ed25519PublicKey } from './ed25519/PublicKey';\nimport { PublicKey as Secp256k1PublicKey } from './secp256k1/PublicKey';\nimport { Hash, AccountHash } from '../key';\nimport { Conversions } from '../Conversions';\nimport { IResultWithBytes } from '../clvalue';\nimport { byteHash } from '../ByteConverters';\n\n/** Error thrown when the signature is empty. */\nconst ErrEmptySignature = new Error('empty signature');\n\n/** Error thrown when the public key algorithm is invalid. */\nconst ErrInvalidPublicKeyAlgo = new Error('invalid public key algorithm');\n\n/** Error thrown when the signature is invalid. */\nconst ErrInvalidSignature = new Error('invalid signature');\n\n/** Error thrown when the public key is empty. */\nconst ErrEmptyPublicKey = new Error('empty public key');\n\n/**\n * Enum representing the supported cryptographic algorithms for public keys.\n */\nenum KeyAlgorithm {\n  ED25519 = 1,\n  SECP256K1 = 2\n}\n\nconst SMALL_BYTES_COUNT = 75;\n// prettier-ignore\nconst HEX_CHARS = [\n  '0', '1', '2', '3', '4', '5', '6', '7',\n  '8', '9', 'a', 'b', 'c', 'd', 'e', 'f',\n  'A', 'B', 'C', 'D', 'E', 'F'\n];\n\n/**\n * Interface representing the internal structure of a public key, which includes\n * methods for obtaining bytes and verifying signatures.\n */\ninterface PublicKeyInternal {\n  /** Returns the bytes of the public key. */\n  bytes(): Uint8Array;\n\n  /**\n   * Verifies a signature for a given message.\n   * @param message - The message to verify.\n   * @param sig - The signature to verify.\n   * @returns A promise that resolves to a boolean indicating the validity of the signature.\n   */\n  verifySignature(message: Uint8Array, sig: Uint8Array): boolean;\n\n  /**\n   * Convert this instance's public key to PEM format\n   * @returns A PEM compliant string containing this instance's public key\n   */\n  toPem(): string;\n}\n\n/**\n * Represents a public key with a cryptographic algorithm and key data.\n * Provides utilities for serialization, verification, and obtaining an associated account hash.\n */\n@jsonObject\nexport class PublicKey {\n  /** The cryptographic algorithm used for the key. */\n  @jsonMember({ constructor: Number })\n  cryptoAlg: KeyAlgorithm;\n\n  /** The key data associated with the public key. */\n  key: PublicKeyInternal | null;\n\n  /**\n   * Creates an instance of PublicKey.\n   * @param cryptoAlg - The cryptographic algorithm used by the key.\n   * @param key - The actual key data.\n   */\n  constructor(cryptoAlg: KeyAlgorithm, key: PublicKeyInternal) {\n    this.cryptoAlg = cryptoAlg;\n    this.key = key;\n  }\n\n  /**\n   * Returns the byte representation of the public key.\n   * @returns A Uint8Array of the public key bytes.\n   */\n  bytes(): Uint8Array {\n    if (!this.key) {\n      return new Uint8Array();\n    }\n\n    const cryptoAlgBytes = new Uint8Array([this.cryptoAlg]);\n    const keyBytes = this.key.bytes();\n\n    return concat([cryptoAlgBytes, keyBytes]);\n  }\n\n  /**\n   * Converts the public key to a hexadecimal string representation.\n   *\n   * @param checksummed - A boolean indicating whether to return a checksummed version of the hex string.\n   *   - `true`: Includes a checksum in the output.\n   *   - `false` (default): Returns the raw hexadecimal string without a checksum.\n   * @returns The hexadecimal string representation of the public key.\n   *   - If `checksummed` is `true`, the result includes a checksum.\n   *   - If `checksummed` is `false`, the raw hex string is returned.\n   * @throws {Error} If the public key is not initialized properly (i.e., `this.key` is missing).\n   */\n  toHex(checksummed = false): string {\n    if (!this.key) {\n      throw new Error('Public key initialised incorrectly. Missing key');\n    }\n\n    const rawHex = `0${this.cryptoAlg}${Conversions.encodeBase16(\n      this.key.bytes()\n    )}`;\n\n    if (checksummed) {\n      const bytes = Conversions.decodeBase16(rawHex);\n      return (\n        PublicKey.encode(bytes.slice(0, 1)) + PublicKey.encode(bytes.slice(1))\n      );\n    }\n\n    return rawHex;\n  }\n\n  /**\n   * Serializes the public key to a JSON-compatible string.\n   * @returns A JSON string representation of the public key.\n   */\n  toJSON(): string {\n    return this.toHex();\n  }\n\n  /**\n   * Converts the public key to a string representation.\n   * @returns A string representation of the public key in hexadecimal.\n   */\n  toString(): string {\n    return this.toHex();\n  }\n\n  /**\n   * Creates a PublicKey instance from a JSON string.\n   * @param json - The JSON string.\n   * @returns A new PublicKey instance.\n   */\n  static fromJSON(json: string): PublicKey {\n    return PublicKey.fromHex(json);\n  }\n\n  /**\n   * Creates a PublicKey instance from a hexadecimal string.\n   * @param source - The hexadecimal string.\n   * @returns A new PublicKey instance.\n   */\n  // static fromHex(source: string): PublicKey {\n  //   const publicKeyHexBytes = Conversions.decodeBase16(source);\n  //\n  //   return PublicKey.fromBuffer(publicKeyHexBytes);\n  // }\n\n  /**\n   * Tries to decode PublicKey from its hex-representation.\n   * The hex format should be as produced by PublicKey.toHex\n   * @param publicKeyHex public key hex string contains key tag\n   * @param checksummed throws an Error if true and given string is not checksummed\n   */\n  static fromHex(publicKeyHex: string, checksummed = false): PublicKey {\n    if (publicKeyHex.length < 2) {\n      throw new Error('Public key error: too short');\n    }\n\n    if (!/^0(1[0-9a-fA-F]{64}|2[0-9a-fA-F]{66})$/.test(publicKeyHex)) {\n      throw new Error('Invalid public key');\n    }\n\n    if (checksummed && !PublicKey.isChecksummed(publicKeyHex)) {\n      throw Error('Provided public key is not checksummed.');\n    }\n\n    return PublicKey.fromBuffer(Conversions.decodeBase16(publicKeyHex));\n  }\n\n  /**\n   * Creates a PublicKey instance from an ArrayBuffer.\n   * @param buffer - The ArrayBuffer.\n   * @returns A new PublicKey instance.\n   * @throws Error if the public key algorithm is invalid.\n   */\n  public static fromBuffer(buffer: ArrayBuffer): PublicKey {\n    const byteArray = new Uint8Array(buffer);\n    const alg = byteArray[0] as KeyAlgorithm;\n    const keyData = byteArray.slice(1);\n\n    let key: PublicKeyInternal;\n    switch (alg) {\n      case KeyAlgorithm.ED25519:\n        key = new Ed25519PublicKey(keyData);\n        break;\n      case KeyAlgorithm.SECP256K1:\n        key = new Secp256k1PublicKey(keyData);\n        break;\n      default:\n        throw ErrInvalidPublicKeyAlgo;\n    }\n\n    return new PublicKey(alg, key);\n  }\n\n  /**\n   * Generates an account hash for the public key, used to uniquely identify an account.\n   * @returns An AccountHash representing the account associated with this public key.\n   */\n  accountHash(): AccountHash {\n    if (!this.key) {\n      return new AccountHash(new Hash(new Uint8Array(0)));\n    }\n\n    const algString = KeyAlgorithm[this.cryptoAlg].toLowerCase();\n    const algBytes = new TextEncoder().encode(algString);\n    const separatorByte = new Uint8Array([0]);\n    const keyBytes = this.key.bytes();\n\n    const bytesToHash = concat([algBytes, separatorByte, keyBytes]);\n\n    const blakeHash = byteHash(bytesToHash);\n    const hash = Hash.fromBuffer(Buffer.from(blakeHash));\n    return new AccountHash(hash, 'account-hash');\n  }\n\n  /**\n   * Verifies a signature for a given message.\n   * @param message - The message to verify.\n   * @param sig - The signature to verify.\n   * @returns A promise that resolves to a boolean indicating the validity of the signature.\n   * @throws Error if the signature or public key is empty, or if the signature is invalid.\n   */\n  verifySignature(message: Uint8Array, sig: Uint8Array): boolean {\n    if (sig.length <= 1) throw ErrEmptySignature;\n    if (!this.key) throw ErrEmptyPublicKey;\n\n    const sigWithoutAlgByte = sig.slice(1);\n    const signature = this.key.verifySignature(message, sigWithoutAlgByte);\n\n    if (!signature) throw ErrInvalidSignature;\n\n    return signature;\n  }\n\n  public toPem(): string {\n    return this.key!.toPem();\n  }\n\n  /**\n   * Creates a PublicKey instance from a PEM-encoded string.\n   * @param content - The PEM string representing the private key.\n   * @param algorithm - The KeyAlgorithm of PEM\n   * @returns A new PublicKey instance.\n   * @throws Error if the content cannot be properly parsed.\n   */\n  public static fromPem(content: string, algorithm: KeyAlgorithm) {\n    let key: PublicKeyInternal | null = null;\n\n    switch (algorithm) {\n      case KeyAlgorithm.ED25519:\n        key = Ed25519PublicKey.fromPem(content);\n        break;\n      case KeyAlgorithm.SECP256K1:\n        key = Secp256k1PublicKey.fromPem(content);\n        break;\n      default:\n        throw ErrInvalidPublicKeyAlgo;\n    }\n\n    return new PublicKey(algorithm, key);\n  }\n\n  /**\n   * Checks equality between two PublicKey instances.\n   * @param other - The other PublicKey instance to compare.\n   * @returns True if the two PublicKey instances are equal; otherwise, false.\n   */\n  equals(other: PublicKey): boolean {\n    return this.toHex() === other.toHex();\n  }\n\n  /**\n   * Creates a new PublicKey instance from a hex string.\n   * @param source - The hex string.\n   * @returns A new PublicKey instance.\n   */\n  static newPublicKey(source: string): PublicKey {\n    const data = Buffer.from(source, 'hex');\n    return this.fromBytes(data)?.result;\n  }\n\n  /**\n   * Creates a PublicKey instance from a byte array.\n   * @param source - The byte array.\n   * @returns A new PublicKey instance.\n   * @throws Error if the public key algorithm is invalid.\n   */\n  static fromBytes(source: Uint8Array): IResultWithBytes<PublicKey> {\n    const alg = source[0];\n    let key: PublicKeyInternal | null = null;\n    let expectedPublicKeySize;\n\n    switch (alg) {\n      case KeyAlgorithm.ED25519:\n        expectedPublicKeySize = 32;\n        key = new Ed25519PublicKey(\n          source.subarray(1, expectedPublicKeySize + 1)\n        );\n        break;\n      case KeyAlgorithm.SECP256K1:\n        expectedPublicKeySize = 33;\n        key = new Secp256k1PublicKey(\n          source.subarray(1, expectedPublicKeySize + 1)\n        );\n        break;\n      default:\n        throw ErrInvalidPublicKeyAlgo;\n    }\n\n    return {\n      result: new PublicKey(alg, key),\n      bytes: source.subarray(expectedPublicKeySize + 1)\n    };\n  }\n\n  /**\n   * Verify a mixed-case hexadecimal string that it conforms to the checksum scheme\n   * similar to scheme in [EIP-55](https://eips.ethereum.org/EIPS/eip-55).\n   * Key differences:\n   * - Works on any length of (decoded) data up to `SMALL_BYTES_COUNT`, not just 20-byte addresses\n   * - Uses Blake2b hashes rather than Keccak\n   * - Uses hash bits rather than nibbles\n   * For backward compatibility: if the hex string is all uppercase or all lowercase, the check is\n   * skipped.\n   * @param input string to check if it is checksummed\n   * @returns true if input is checksummed\n   */\n  static isChecksummed = (input: string): boolean => {\n    const bytes = new Uint8Array(Buffer.from(input, 'hex'));\n\n    if (bytes.length > SMALL_BYTES_COUNT || isSameCase(input)) return true;\n\n    if (isValidPublicKey(input)) {\n      return (\n        input ===\n        PublicKey.encode(bytes.slice(0, 1)) + PublicKey.encode(bytes.slice(1))\n      );\n    }\n\n    return input === PublicKey.encode(bytes);\n  };\n\n  /**\n   * Returns the bytes encoded as hexadecimal with mixed-case based checksums following a scheme\n   * similar to [EIP-55](https://eips.ethereum.org/EIPS/eip-55).\n   * Key differences:\n   * - Works on any length of data, not just 20-byte addresses\n   * - Uses Blake2b hashes rather than Keccak\n   * - Uses hash bits rather than nibbles\n   * @param input Uint8Array to generate checksummed hex string\n   * @returns checksummed hex presentation string of input\n   */\n  static encode = (input: Uint8Array): string => {\n    const inputNibbles = bytesToNibbles(input);\n    const hashBits = bytesToBitsCycle(byteHash(input)).values();\n\n    const hexOutputString = inputNibbles.reduce((accum, nibble) => {\n      const c = HEX_CHARS[nibble];\n\n      if (/^[a-zA-Z()]+$/.test(c) && hashBits.next().value) {\n        return accum + c.toUpperCase();\n      } else {\n        return accum + c.toLowerCase();\n      }\n    }, '');\n\n    return hexOutputString;\n  };\n}\n\n/**\n * Represents a list of public keys, with utility methods for checking membership and managing keys.\n */\nexport class PublicKeyList {\n  private keys: PublicKey[];\n\n  /**\n   * Creates an instance of PublicKeyList.\n   * @param keys - An optional array of PublicKey instances.\n   */\n  constructor(keys: PublicKey[] = []) {\n    this.keys = keys;\n  }\n\n  /**\n   * Checks if a given PublicKey is present in the list.\n   * @param target - The PublicKey to check for.\n   * @returns True if the target PublicKey is in the list; otherwise, false.\n   */\n  contains(target: PublicKey): boolean {\n    return this.keys.some(key => key.equals(target));\n  }\n}\n\nexport function isSameCase(value: string) {\n  return /^[a-z0-9]+$|^[A-Z0-9]+$/.test(value);\n}\n\nexport function isValidPublicKey(key: string) {\n  return /^0(1[0-9a-fA-F]{64}|2[0-9a-fA-F]{66})$/.test(key);\n}\n\nfunction bytesToNibbles(bytes: Uint8Array): Uint8Array {\n  const outputNibbles = bytes.reduce((accum, byte) => {\n    return concat([accum, Uint8Array.of(byte >>> 4, byte & 0x0f)]);\n  }, new Uint8Array());\n\n  return outputNibbles;\n}\n\nfunction bytesToBitsCycle(bytes: Uint8Array) {\n  const output: boolean[] = [];\n\n  for (let i = 0, k = 0; i < bytes.length; i++)\n    for (let j = 0; j < 8; j++)\n      output[k++] = ((bytes[i] >>> j) & 0x01) === 0x01;\n\n  return output;\n}\n","import * as ed25519 from '@noble/ed25519';\nimport { PrivateKeyInternal } from '../PrivateKey';\nimport { sha512 } from '@noble/hashes/sha512';\nimport { Conversions } from '../../Conversions';\nimport { parseKey, readBase64WithPEM } from '../utils';\n\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\n\nconst ED25519_PEM_SECRET_KEY_TAG = 'PRIVATE KEY';\n\n/**\n * Represents an Ed25519 private key, supporting key generation, signing, and PEM encoding.\n * Provides methods for creating instances from byte arrays, hexadecimal strings, and PEM format.\n */\nexport class PrivateKey implements PrivateKeyInternal {\n  /** Size of the PEM prefix for Ed25519 private keys. */\n  static PemFramePrivateKeyPrefixSize = 16;\n\n  /** The raw bytes of the private key. */\n  private key: Uint8Array;\n\n  /**\n   * Creates an instance of PrivateKey.\n   * @param key - The private key bytes.\n   */\n  constructor(key: Uint8Array) {\n    this.key = key;\n  }\n\n  /**\n   * Generates a new random Ed25519 private key.\n   * @returns A promise that resolves to a new PrivateKey instance.\n   */\n  static generate(): PrivateKey {\n    const keyPair = ed25519.utils.randomPrivateKey();\n    return new PrivateKey(keyPair);\n  }\n\n  /**\n   * Retrieves the byte array of the associated public key.\n   * @returns A promise that resolves to the public key bytes.\n   */\n  publicKeyBytes(): Uint8Array {\n    return ed25519.sync.getPublicKey(this.key);\n  }\n\n  toBytes(): Uint8Array {\n    return this.key;\n  }\n\n  /**\n   * Signs a message using the private key.\n   * @param message - The message to sign.\n   * @returns A promise that resolves to the signature bytes.\n   */\n  sign(message: Uint8Array): Uint8Array {\n    return ed25519.sync.sign(message, this.key);\n  }\n\n  /**\n   * Creates a PrivateKey instance from a byte array.\n   * Validates that the byte array matches the expected length for an Ed25519 private key.\n   * @param key - The byte array representing the private key.\n   * @returns A new PrivateKey instance.\n   * @throws Error if the byte array length is not 64.\n   */\n  static fromBytes(key: Uint8Array): PrivateKey {\n    if (key.length !== 32) {\n      throw new Error(`Invalid key size: expected 64 bytes, got ${key.length}`);\n    }\n    return new PrivateKey(key);\n  }\n\n  /**\n   * Creates a PrivateKey instance from a hexadecimal string.\n   * Converts the hexadecimal string to bytes and validates the length.\n   * @param keyHex - The hexadecimal string representing the private key.\n   * @returns A new PrivateKey instance.\n   * @throws Error if the hex string length is not 128 characters.\n   */\n  static fromHex(keyHex: string): PrivateKey {\n    if (keyHex.length !== 64) {\n      throw new Error(\n        `Invalid hex string length: expected 64 characters, got ${keyHex.length}`\n      );\n    }\n    const keyBytes = Buffer.from(keyHex, 'hex');\n    return PrivateKey.fromBytes(keyBytes);\n  }\n\n  /**\n   * Exports the private key to PEM format, with a standardized prefix and suffix.\n   * @returns A PEM-encoded string of the private key.\n   */\n  toPem(): string {\n    const derPrefix = Buffer.from([\n      48,\n      46,\n      2,\n      1,\n      0,\n      48,\n      5,\n      6,\n      3,\n      43,\n      101,\n      112,\n      4,\n      34,\n      4,\n      32\n    ]);\n    const encoded = Conversions.encodeBase64(\n      Buffer.concat([derPrefix, Buffer.from(this.key)])\n    );\n\n    return (\n      `-----BEGIN ${ED25519_PEM_SECRET_KEY_TAG}-----\\n` +\n      `${encoded}\\n` +\n      `-----END ${ED25519_PEM_SECRET_KEY_TAG}-----\\n`\n    );\n  }\n\n  /**\n   * Creates a PrivateKey instance from a PEM-encoded string.\n   * Parses the PEM content to extract the private key bytes.\n   * @param content - The PEM string representing the private key.\n   * @returns A new PrivateKey instance.\n   * @throws Error if the content cannot be properly parsed.\n   */\n  static fromPem(content: string): PrivateKey {\n    const privateKeyBytes = readBase64WithPEM(content);\n\n    return new PrivateKey(\n      new Uint8Array(Buffer.from(parseKey(privateKeyBytes, 0, 32)))\n    );\n  }\n}\n","import * as ed25519 from '@noble/ed25519';\nimport { Conversions } from '../../Conversions';\nimport { parseKey, readBase64WithPEM } from '../utils';\n\n/** Expected size of an Ed25519 public key in bytes. */\nconst PublicKeySize = 32;\nconst ED25519_PEM_PUBLIC_KEY_TAG = 'PUBLIC KEY';\n\n/**\n * Represents an Ed25519 public key, supporting signature verification\n * and loading from byte arrays.\n */\nexport class PublicKey {\n  /** The raw bytes of the public key. */\n  private key: Uint8Array;\n\n  /**\n   * Creates an instance of PublicKey.\n   * @param key - The public key bytes.\n   */\n  constructor(key: Uint8Array) {\n    this.key = key;\n  }\n\n  /**\n   * Retrieves the byte array of the public key.\n   * @returns A `Uint8Array` representing the public key.\n   */\n  bytes(): Uint8Array {\n    return this.key;\n  }\n\n  /**\n   * Convert this instance's public key to PEM format\n   * @returns A PEM compliant string containing this instance's public key\n   */\n  public toPem(): string {\n    const derPrefix = Buffer.from([\n      48,\n      42,\n      48,\n      5,\n      6,\n      3,\n      43,\n      101,\n      112,\n      3,\n      33,\n      0\n    ]);\n    const encoded = Conversions.encodeBase64(\n      Buffer.concat([derPrefix, Buffer.from(this.key)])\n    );\n\n    return (\n      `-----BEGIN ${ED25519_PEM_PUBLIC_KEY_TAG}-----\\n` +\n      `${encoded}\\n` +\n      `-----END ${ED25519_PEM_PUBLIC_KEY_TAG}-----\\n`\n    );\n  }\n\n  /**\n   * Creates a PublicKey instance from a PEM-encoded string.\n   * @param content - The PEM string representing the private key.\n   * @returns A new PublicKey instance.\n   * @throws Error if the content cannot be properly parsed.\n   */\n  static fromPem(content: string): PublicKey {\n    const publicKeyBytes = readBase64WithPEM(content);\n\n    return new PublicKey(\n      new Uint8Array(Buffer.from(parseKey(publicKeyBytes, 32, 64)))\n    );\n  }\n\n  /**\n   * Verifies a signature for a given message.\n   * Utilizes the Ed25519 algorithm to check if the signature is valid\n   * for the given message and public key.\n   * @param message - The original message that was signed.\n   * @param signature - The signature to verify.\n   * @returns A promise that resolves to `true` if the signature is valid, or `false` otherwise.\n   */\n  verifySignature(message: Uint8Array, signature: Uint8Array): boolean {\n    return ed25519.sync.verify(signature, message, this.key);\n  }\n\n  /**\n   * Creates a PublicKey instance from a byte array.\n   * Validates the size of the byte array to ensure it matches the expected\n   * size of an Ed25519 public key.\n   * @param data - The byte array representing the public key.\n   * @returns A new PublicKey instance.\n   * @throws Error if the byte array length is not equal to `PublicKeySize`.\n   */\n  static fromBytes(data: Uint8Array): PublicKey {\n    if (data.length !== PublicKeySize) {\n      throw new Error(`Can't parse wrong size of public key: ${data.length}`);\n    }\n    return new PublicKey(data);\n  }\n}\n","export * from './PublicKey';\nexport * from './PrivateKey';\nexport * from './Algorithm';\n","import * as secp256k1 from '@noble/secp256k1';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { hmac } from '@noble/hashes/hmac';\nimport { PrivateKeyInternal } from '../PrivateKey';\nimport KeyEncoder from 'key-encoder';\nimport { Conversions } from '../../Conversions';\nimport { readBase64WithPEM } from '../utils';\n\nsecp256k1.utils.hmacSha256Sync = (k, ...m) =>\n  hmac(sha256, k, secp256k1.utils.concatBytes(...m));\n\nexport const keyEncoder = new KeyEncoder('secp256k1');\n\n/**\n * Represents a secp256k1 private key, supporting key generation, signing, and PEM encoding.\n * The class offers static methods to create instances from bytes, hex, and PEM formats.\n */\nexport class PrivateKey implements PrivateKeyInternal {\n  /** The raw bytes of the private key. */\n  private key: Uint8Array;\n\n  /**\n   * Creates an instance of PrivateKey.\n   * @param key - The private key bytes.\n   */\n  constructor(key: Uint8Array) {\n    this.key = key;\n  }\n\n  /**\n   * Generates a new random secp256k1 private key.\n   * @returns A promise that resolves to a new PrivateKey instance.\n   */\n  static generate(): PrivateKey {\n    const privateKey = secp256k1.utils.randomPrivateKey();\n    return new PrivateKey(privateKey);\n  }\n\n  /**\n   * Retrieves the byte array of the public key in compressed format.\n   * @returns A promise that resolves to the compressed public key bytes.\n   */\n  publicKeyBytes(): Uint8Array {\n    return secp256k1.getPublicKey(this.key, true);\n  }\n\n  /**\n   * Retrieves the byte array of the public key in compressed format.\n   * @returns A promise that resolves to the compressed public key bytes.\n   */\n  async getPublicKeyBytes(): Promise<Uint8Array> {\n    return secp256k1.getPublicKey(this.key, true);\n  }\n\n  toBytes(): Uint8Array {\n    return this.key;\n  }\n\n  /**\n   * Signs a message using the private key.\n   * The message is first hashed with SHA-256 before signing.\n   * @param message - The message to sign.\n   * @returns A promise that resolves to the signature bytes in compact format.\n   */\n  sign(message: Uint8Array): Uint8Array {\n    const hash = sha256(message);\n    return secp256k1.signSync(hash, this.key, { der: false });\n  }\n\n  /**\n   * Creates a PrivateKey instance from a byte array.\n   * @param key - The byte array representing the private key.\n   * @returns A new PrivateKey instance.\n   * @throws Error if the byte array length is not 32.\n   */\n  static fromBytes(key: Uint8Array): PrivateKey {\n    if (key.length !== 32) {\n      throw new Error(\n        `Invalid private key length: expected 32 bytes, got ${key.length}`\n      );\n    }\n    return new PrivateKey(key);\n  }\n\n  /**\n   * Creates a PrivateKey instance from a hexadecimal string.\n   * @param key - The hexadecimal string representing the private key.\n   * @returns A new PrivateKey instance.\n   * @throws Error if the hex length is not 64 characters or if decoding fails.\n   */\n  static fromHex(key: string): PrivateKey {\n    if (key.length !== 64) {\n      throw new Error(\n        `Invalid private key hex length: expected 64 characters, got ${key.length}`\n      );\n    }\n\n    let decoded;\n    try {\n      decoded = secp256k1.utils.hexToBytes(key);\n    } catch (err) {\n      throw new Error(`Failed to decode hex: ${err}`);\n    }\n\n    return PrivateKey.fromBytes(decoded);\n  }\n\n  /**\n   * Exports the private key to PEM format, which can be used for secure storage or sharing.\n   * @returns A PEM-encoded string of the private key.\n   */\n  toPem(): string {\n    return keyEncoder.encodePrivate(\n      Conversions.encodeBase16(this.key),\n      'raw',\n      'pem'\n    );\n  }\n\n  /**\n   * Creates a PrivateKey instance from a PEM-encoded string.\n   * @param content - The PEM string representing the private key.\n   * @returns A new PrivateKey instance.\n   * @throws Error if the content cannot be properly parsed.\n   */\n  static fromPem(content: string): PrivateKey {\n    const privateKeyBytes = readBase64WithPEM(content);\n\n    const rawKeyHex = keyEncoder.encodePrivate(\n      Buffer.from(privateKeyBytes),\n      'der',\n      'raw'\n    );\n\n    return new PrivateKey(new Uint8Array(Buffer.from(rawKeyHex, 'hex')));\n  }\n}\n","import * as secp256k1 from '@noble/secp256k1';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { keyEncoder } from './PrivateKey';\nimport { Conversions } from '../../Conversions';\nimport { readBase64WithPEM } from '../utils';\n\n/** The expected size of a secp256k1 public key in bytes. */\nconst PublicKeySize = 33;\n\n/**\n * Represents a secp256k1 public key, providing methods to retrieve the compressed\n * public key bytes and verify digital signatures.\n */\nexport class PublicKey {\n  /** The raw bytes of the public key in compressed format. */\n  private key: Uint8Array;\n\n  /**\n   * Creates an instance of PublicKey.\n   * @param key - The public key bytes in compressed format.\n   */\n  constructor(key: Uint8Array) {\n    this.key = key;\n  }\n\n  /**\n   * Retrieves the byte array of the public key in compressed format.\n   * @returns A compressed `Uint8Array` representation of the public key.\n   */\n  bytes(): Uint8Array {\n    return this.key;\n  }\n\n  /**\n   * Convert this instance's public key to PEM format\n   * @returns A PEM compliant string containing this instance's public key\n   */\n  public toPem(): string {\n    return keyEncoder.encodePublic(\n      Conversions.encodeBase16(this.key),\n      'raw',\n      'pem'\n    );\n  }\n\n  /**\n   * Verifies a signature for a given message.\n   * Uses the secp256k1 algorithm to validate if the provided signature matches\n   * the public key for the given message.\n   * @param message - The original message that was signed.\n   * @param signature - The signature to verify. Supports both raw (64-byte R || S) and DER formats.\n   * @returns A promise that resolves to `true` if the signature is valid, or `false` otherwise.\n   */\n  verifySignature(message: Uint8Array, signature: Uint8Array): boolean {\n    let compactSignature: Uint8Array;\n\n    if (signature.length === 64) {\n      // Use raw (R || S) format\n      compactSignature = signature;\n    } else {\n      try {\n        const parsedSig = secp256k1.Signature.fromDER(signature);\n        compactSignature = parsedSig.toCompactRawBytes();\n      } catch (error) {\n        console.error('Failed to parse DER signature:', error);\n        return false;\n      }\n    }\n\n    const hash = sha256(message);\n\n    return secp256k1.verify(compactSignature, hash, this.key);\n  }\n\n  /**\n   * Creates a PublicKey instance from a PEM-encoded string.\n   * @param content - The PEM string representing the private key.\n   * @returns A new PublicKey instance.\n   * @throws Error if the content cannot be properly parsed.\n   */\n  static fromPem(content: string): PublicKey {\n    const publicKeyBytes = readBase64WithPEM(content);\n\n    const rawKeyHex = keyEncoder.encodePublic(\n      Buffer.from(publicKeyBytes),\n      'der',\n      'raw'\n    );\n\n    return new PublicKey(new Uint8Array(Buffer.from(rawKeyHex, 'hex')));\n  }\n\n  /**\n   * Creates a PublicKey instance from a byte array, validating the size and format.\n   * @param data - The byte array representing the public key in compressed format.\n   * @returns A promise that resolves to a new PublicKey instance.\n   * @throws Error if the public key size is incorrect or if the key is invalid.\n   */\n  static async fromBytes(data: Uint8Array): Promise<PublicKey> {\n    if (data.length !== PublicKeySize) {\n      throw new Error(`Can't parse public key with wrong size: ${data.length}`);\n    }\n\n    let key;\n    try {\n      const point = secp256k1.Point.fromHex(data);\n      const compressedKey = point.toRawBytes(true);\n      key = compressedKey;\n    } catch (error) {\n      throw new Error('Invalid public key');\n    }\n\n    return new PublicKey(key);\n  }\n}\n","import { Conversions } from '../Conversions';\n\n/**\n * Reads in a base64 private key, ignoring the header: `-----BEGIN PUBLIC KEY-----`\n * and footer: `-----END PUBLIC KEY-----`\n * @param {string} content A .pem private key string with a header and footer\n * @returns A base64 private key as a `Uint8Array`\n * @remarks\n * If the provided base64 `content` string does not include a header/footer,\n * it will pass through this function unaffected\n * @example\n * Example PEM:\n *\n * ```\n * -----BEGIN PUBLIC KEY-----\\r\\n\n * MFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAEj1fgdbpNbt06EY/8C+wbBXq6VvG+vCVD\\r\\n\n * Nl74LvVAmXfpdzCWFKbdrnIlX3EFDxkd9qpk35F/kLcqV3rDn/u3dg==\\r\\n\n * -----END PUBLIC KEY-----\\r\\n\n * ```\n */\nexport function readBase64WithPEM(content: string): Uint8Array {\n  const base64 = content\n    // there are two kinks of line-endings, CRLF(\\r\\n) and LF(\\n)\n    // we need handle both\n    .split(/\\r?\\n/)\n    .filter(x => !x.startsWith('---'))\n    .join('')\n    // remove the line-endings in the end of content\n    .trim();\n  return Conversions.decodeBase64(base64);\n}\n\n/**\n * Parses and validates a key in a certain range \"from\" to \"to\"\n * @param {Uint8Array} bytes The key to be parsed and validated\n * @param {number} from The starting index from which to parse the key\n * @param {number} to The ending index from which to parse the key\n * @returns The parsed key\n * @throws `Error` if the key is of an unexpected length\n */\nexport const parseKey = (bytes: Uint8Array, from: number, to: number) => {\n  const len = bytes.length;\n\n  const key =\n    len === 32\n      ? bytes\n      : len === 64\n      ? Buffer.from(bytes).slice(from, to)\n      : len > 32 && len < 64\n      ? Buffer.from(bytes).slice(len % 32)\n      : null;\n  if (key == null || key.length !== 32) {\n    throw Error(`Unexpected key length: ${len}`);\n  }\n  return key;\n};\n","import {\n  Args,\n  CLValue,\n  ContractHash,\n  DEFAULT_DEPLOY_TTL,\n  Deploy,\n  DeployHeader,\n  Duration,\n  ExecutableDeployItem,\n  NativeDelegateBuilder,\n  NativeRedelegateBuilder,\n  NativeUndelegateBuilder,\n  PublicKey,\n  StoredContractByHash,\n  Timestamp,\n  Transaction\n} from '../types';\nimport { AuctionManagerEntryPoint, CasperNetworkName } from '../@types';\nimport { AuctionManagerContractHashMap } from './constants';\n\nexport interface IMakeAuctionManagerDeployParams {\n  contractEntryPoint:\n    | AuctionManagerEntryPoint.delegate\n    | AuctionManagerEntryPoint.undelegate\n    | AuctionManagerEntryPoint.redelegate;\n  delegatorPublicKeyHex: string;\n  validatorPublicKeyHex: string;\n  newValidatorPublicKeyHex?: string;\n  amount: string;\n  paymentAmount?: string;\n  chainName?: CasperNetworkName;\n  ttl?: number;\n  contractHash?: string;\n  timestamp?: string;\n  gasPrice?: number;\n}\n\n/**\n * Creates a `Deploy` for the Auction Manager contract.\n *\n * This function generates a `Deploy` that interacts with the Auction Manager\n * contract on the Casper network. It supports operations such as delegation,\n * un-delegation, and validator change management.\n *\n * @param params - The parameters required to create the Auction Manager deploy.\n * @param params.contractEntryPoint - The entry point to invoke in the Auction Manager contract.\n * @param params.delegatorPublicKeyHex - The delegator's public key in hexadecimal format.\n * @param params.validatorPublicKeyHex - The validator's public key in hexadecimal format.\n * @param params.newValidatorPublicKeyHex - (Optional) The new validator's public key in hexadecimal format (used in validator change operations).\n * @param params.amount - The amount of CSPR to delegate/undelegate/redelegate.\n *                        This value must be represented in its smallest unit (motes).\n *                        For example, to transfer 2.5 CSPR, provide the value `2500000000` (2.5 * 10^9 motes).\n * @param params.paymentAmount - The amount of CSPR to pay a network fee.\n *                        This value must be represented in its smallest unit (motes).\n *                        For example, to transfer 2.5 CSPR, provide the value `2500000000` (2.5 * 10^9 motes).\n * @param params.chainName - (Optional) The name of the Casper network chain - {CasperNetworkName}.\n *                           Must be either `'casper'` (mainnet) or `'casper-test'` (testnet).\n *                           Defaults to `'CasperNetworkName.Mainnet'` if not specified.\n * @param params.ttl - (Optional) The time-to-live (TTL) for the `Deploy` in milliseconds.\n *                      Specifies how long the `Deploy` is valid before it expires.\n *                      Defaults 1800000 (30 minutes)\n * @param params.timestamp - (Optional) The timestamp in ISO 8601 format\n * @param params.contractHash - (Optional) The custom contract hash\n *\n * @returns A deploy object that can be signed and sent to the network.\n *\n * @throws {Error} Throws an error if required parameters are missing or invalid.\n *\n * @example\n * ```ts\n * import { makeAuctionManagerDeploy, AuctionManagerEntryPoint } from 'casper-js-sdk';\n *\n * const deploy = makeAuctionManagerDeploy({\n *   contractEntryPoint: AuctionManagerEntryPoint.delegate,\n *   delegatorPublicKeyHex: \"0123456789abcdef...\",\n *   validatorPublicKeyHex: \"0123456789awedef...\",\n *   amount: \"500000000000\",\n * });\n * ```\n */\nexport const makeAuctionManagerDeploy = ({\n  delegatorPublicKeyHex,\n  validatorPublicKeyHex,\n  contractEntryPoint,\n  amount,\n  paymentAmount = '2500000000',\n  chainName = CasperNetworkName.Mainnet,\n  newValidatorPublicKeyHex,\n  ttl = DEFAULT_DEPLOY_TTL,\n  contractHash,\n  timestamp,\n  gasPrice = 1\n}: IMakeAuctionManagerDeployParams) => {\n  const delegatorPublicKey = PublicKey.newPublicKey(delegatorPublicKeyHex);\n  const validatorPublicKey = PublicKey.newPublicKey(validatorPublicKeyHex);\n  const newValidatorValidatorPublicKey = newValidatorPublicKeyHex\n    ? PublicKey.newPublicKey(newValidatorPublicKeyHex)\n    : null;\n  const auctionContractHash =\n    contractHash ?? AuctionManagerContractHashMap[chainName];\n\n  if (!auctionContractHash) {\n    throw new Error(\n      `Auction contract hash is undefined for chain: ${chainName}`\n    );\n  }\n\n  const session = new ExecutableDeployItem();\n  session.storedContractByHash = new StoredContractByHash(\n    ContractHash.newContract(auctionContractHash),\n    contractEntryPoint,\n    Args.fromMap({\n      validator: CLValue.newCLPublicKey(validatorPublicKey),\n      delegator: CLValue.newCLPublicKey(delegatorPublicKey),\n      amount: CLValue.newCLUInt512(amount),\n      ...(newValidatorValidatorPublicKey\n        ? {\n            new_validator: CLValue.newCLPublicKey(\n              newValidatorValidatorPublicKey\n            )\n          }\n        : {})\n    })\n  );\n\n  const payment = ExecutableDeployItem.standardPayment(paymentAmount);\n\n  const deployHeader = DeployHeader.default();\n  deployHeader.account = delegatorPublicKey;\n  deployHeader.chainName = chainName;\n  deployHeader.ttl = new Duration(ttl);\n  deployHeader.gasPrice = gasPrice;\n\n  if (timestamp) {\n    deployHeader.timestamp = Timestamp.fromJSON(timestamp);\n  }\n\n  return Deploy.makeDeploy(deployHeader, payment, session);\n};\n\ninterface IMakeAuctionManagerTransactionParams\n  extends IMakeAuctionManagerDeployParams {\n  casperNetworkApiVersion: string;\n}\n\nexport const makeAuctionManagerTransaction = ({\n  delegatorPublicKeyHex,\n  validatorPublicKeyHex,\n  contractEntryPoint,\n  amount,\n  paymentAmount = '2500000000',\n  chainName = CasperNetworkName.Mainnet,\n  newValidatorPublicKeyHex,\n  ttl = DEFAULT_DEPLOY_TTL,\n  contractHash,\n  timestamp,\n  casperNetworkApiVersion,\n  gasPrice = 1\n}: IMakeAuctionManagerTransactionParams): Transaction => {\n  if (casperNetworkApiVersion.startsWith('2.')) {\n    switch (contractEntryPoint) {\n      case AuctionManagerEntryPoint.delegate: {\n        let txBuilder = new NativeDelegateBuilder()\n          .validator(PublicKey.fromHex(validatorPublicKeyHex))\n          .from(PublicKey.fromHex(delegatorPublicKeyHex))\n          .amount(amount)\n          .chainName(chainName)\n          .payment(Number(paymentAmount), gasPrice)\n          .ttl(ttl);\n\n        if (timestamp) {\n          txBuilder = txBuilder.timestamp(Timestamp.fromJSON(timestamp));\n        }\n\n        return txBuilder.build();\n      }\n      case AuctionManagerEntryPoint.undelegate: {\n        let txBuilder = new NativeUndelegateBuilder()\n          .validator(PublicKey.fromHex(validatorPublicKeyHex))\n          .from(PublicKey.fromHex(delegatorPublicKeyHex))\n          .amount(amount)\n          .chainName(chainName)\n          .payment(Number(paymentAmount), gasPrice)\n          .ttl(ttl);\n\n        if (timestamp) {\n          txBuilder = txBuilder.timestamp(Timestamp.fromJSON(timestamp));\n        }\n\n        return txBuilder.build();\n      }\n      case AuctionManagerEntryPoint.redelegate: {\n        if (!newValidatorPublicKeyHex) {\n          throw new Error('Missing newValidatorPublicKeyHex param');\n        }\n\n        let txBuilder = new NativeRedelegateBuilder()\n          .validator(PublicKey.fromHex(validatorPublicKeyHex))\n          .newValidator(PublicKey.fromHex(newValidatorPublicKeyHex))\n          .from(PublicKey.fromHex(delegatorPublicKeyHex))\n          .amount(amount)\n          .chainName(chainName)\n          .payment(Number(paymentAmount), gasPrice)\n          .ttl(ttl);\n\n        if (timestamp) {\n          txBuilder = txBuilder.timestamp(Timestamp.fromJSON(timestamp));\n        }\n\n        return txBuilder.build();\n      }\n    }\n  } else {\n    return Transaction.fromDeploy(\n      makeAuctionManagerDeploy({\n        delegatorPublicKeyHex,\n        validatorPublicKeyHex,\n        contractEntryPoint,\n        amount,\n        paymentAmount,\n        chainName,\n        newValidatorPublicKeyHex,\n        ttl,\n        contractHash,\n        timestamp\n      })\n    );\n  }\n};\n","import { BigNumber } from '@ethersproject/bignumber';\n\nimport {\n  InfoGetTransactionResult,\n  PutDeployResult,\n  PutTransactionResult,\n  RpcClient\n} from '../rpc';\nimport {\n  Args,\n  CLValue,\n  ContractCallBuilder,\n  NativeDelegateBuilder,\n  NativeRedelegateBuilder,\n  NativeTransferBuilder,\n  NativeUndelegateBuilder,\n  PublicKey,\n  SessionBuilder,\n  Transaction,\n  TransactionHash\n} from '../types';\n\nexport class CasperNetwork {\n  private rpcClient: RpcClient;\n  private apiVersion: number;\n\n  constructor(rpcClient: RpcClient, apiVersion: number) {\n    this.rpcClient = rpcClient;\n    this.apiVersion = apiVersion;\n  }\n\n  public static async create(\n    rpcClient: RpcClient,\n    apiVersion?: number\n  ): Promise<CasperNetwork> {\n    if (!apiVersion) {\n      const status = await rpcClient.getStatus();\n\n      apiVersion = status.apiVersion.startsWith('2.') ? 2 : 1;\n    }\n\n    return new CasperNetwork(rpcClient, apiVersion);\n  }\n\n  public createDelegateTransaction(\n    delegatorPublicKey: PublicKey,\n    validatorPublicKey: PublicKey,\n    networkName: string,\n    amountMotes: string | BigNumber,\n    deployCost: number,\n    ttl: number,\n    auctionContractHash?: string,\n    gasPriceTolerance?: number\n  ): Transaction {\n    if (this.apiVersion === 2) {\n      return new NativeDelegateBuilder()\n        .validator(validatorPublicKey)\n        .from(delegatorPublicKey)\n        .amount(amountMotes)\n        .chainName(networkName)\n        .payment(deployCost, gasPriceTolerance)\n        .ttl(ttl)\n        .build();\n    }\n\n    if (auctionContractHash) {\n      return new ContractCallBuilder()\n        .from(delegatorPublicKey)\n        .byHash(auctionContractHash)\n        .entryPoint('delegate')\n        .payment(deployCost, gasPriceTolerance)\n        .chainName(networkName)\n        .runtimeArgs(\n          Args.fromMap({\n            validator: CLValue.newCLPublicKey(validatorPublicKey),\n            delegator: CLValue.newCLPublicKey(delegatorPublicKey),\n            amount: CLValue.newCLUInt512(amountMotes)\n          })\n        )\n        .ttl(ttl)\n        .buildFor1_5();\n    }\n\n    throw new Error(\n      'Auction contract hash is required when creating a transaction on Casper Network 1.5.x'\n    );\n  }\n\n  public createUndelegateTransaction(\n    delegatorPublicKey: PublicKey,\n    validatorPublicKey: PublicKey,\n    networkName: string,\n    amountMotes: string | BigNumber,\n    deployCost: number,\n    ttl: number,\n    auctionContractHash?: string,\n    gasPriceTolerance?: number\n  ): Transaction {\n    if (this.apiVersion === 2) {\n      return new NativeUndelegateBuilder()\n        .validator(validatorPublicKey)\n        .from(delegatorPublicKey)\n        .amount(amountMotes)\n        .chainName(networkName)\n        .payment(deployCost, gasPriceTolerance)\n        .ttl(ttl)\n        .build();\n    }\n\n    if (auctionContractHash) {\n      return new ContractCallBuilder()\n        .from(delegatorPublicKey)\n        .byHash(auctionContractHash)\n        .entryPoint('undelegate')\n        .chainName(networkName)\n        .payment(deployCost, gasPriceTolerance)\n        .ttl(ttl)\n        .runtimeArgs(\n          Args.fromMap({\n            validator: CLValue.newCLPublicKey(validatorPublicKey),\n            delegator: CLValue.newCLPublicKey(delegatorPublicKey),\n            amount: CLValue.newCLUInt512(amountMotes)\n          })\n        )\n        .buildFor1_5();\n    }\n\n    throw new Error(\n      'Auction contract hash is required when creating a transaction on Casper Network 1.5.x'\n    );\n  }\n\n  public createRedelegateTransaction(\n    delegatorPublicKey: PublicKey,\n    validatorPublicKey: PublicKey,\n    newValidatorPublicKey: PublicKey,\n    networkName: string,\n    amountMotes: string | BigNumber,\n    deployCost: number,\n    ttl: number,\n    auctionContractHash?: string,\n    gasPriceTolerance?: number\n  ): Transaction {\n    if (this.apiVersion === 2) {\n      return new NativeRedelegateBuilder()\n        .validator(validatorPublicKey)\n        .newValidator(newValidatorPublicKey)\n        .from(delegatorPublicKey)\n        .amount(amountMotes)\n        .chainName(networkName)\n        .payment(deployCost, gasPriceTolerance)\n        .ttl(ttl)\n        .build();\n    }\n\n    if (auctionContractHash) {\n      return new ContractCallBuilder()\n        .from(delegatorPublicKey)\n        .byHash(auctionContractHash)\n        .entryPoint('redelegate')\n        .chainName(networkName)\n        .payment(deployCost, gasPriceTolerance)\n        .runtimeArgs(\n          Args.fromMap({\n            validator: CLValue.newCLPublicKey(validatorPublicKey),\n            delegator: CLValue.newCLPublicKey(delegatorPublicKey),\n            amount: CLValue.newCLUInt512(amountMotes),\n            ...(newValidatorPublicKey\n              ? {\n                  new_validator: CLValue.newCLPublicKey(newValidatorPublicKey)\n                }\n              : {})\n          })\n        )\n        .ttl(ttl)\n        .buildFor1_5();\n    }\n\n    throw new Error(\n      'Auction contract hash is required when creating a transaction on Casper Network 1.5.x'\n    );\n  }\n\n  public createTransferTransaction(\n    senderPublicKey: PublicKey,\n    recipientPublicKey: PublicKey,\n    networkName: string,\n    amountMotes: string,\n    deployCost: number,\n    ttl: number,\n    id: number,\n    gasPriceTolerance?: number\n  ): Transaction {\n    const transferBuilder = new NativeTransferBuilder()\n      .from(senderPublicKey)\n      .target(recipientPublicKey)\n      .amount(amountMotes)\n      .chainName(networkName)\n      .payment(deployCost, gasPriceTolerance)\n      .ttl(ttl)\n      .id(id);\n    if (this.apiVersion === 2) {\n      return transferBuilder.build();\n    }\n\n    return transferBuilder.buildFor1_5();\n  }\n\n  public createContractCallTransaction(\n    senderPublicKey: PublicKey,\n    contractHash: string,\n    entryPoint: string,\n    networkName: string,\n    deployCost: number,\n    ttl: number,\n    args: Args,\n    gasPriceTolerance?: number\n  ): Transaction {\n    const contractCall = new ContractCallBuilder()\n      .byHash(contractHash)\n      .from(senderPublicKey)\n      .entryPoint(entryPoint)\n      .chainName(networkName)\n      .runtimeArgs(args)\n      .ttl(ttl)\n      .payment(deployCost, gasPriceTolerance);\n\n    if (this.apiVersion === 2) {\n      return contractCall.build();\n    }\n\n    return contractCall.buildFor1_5();\n  }\n\n  public createContractPackageCallTransaction(\n    senderPublicKey: PublicKey,\n    contractPackageHash: string,\n    entryPoint: string,\n    networkName: string,\n    deployCost: number,\n    args: Args,\n    ttl: number,\n    contractVersion?: number,\n    gasPriceTolerance?: number\n  ): Transaction {\n    const contractCall = new ContractCallBuilder()\n      .byPackageHash(contractPackageHash, contractVersion)\n      .from(senderPublicKey)\n      .entryPoint(entryPoint)\n      .chainName(networkName)\n      .runtimeArgs(args)\n      .ttl(ttl)\n      .payment(deployCost, gasPriceTolerance);\n\n    if (this.apiVersion === 2) {\n      return contractCall.build();\n    }\n\n    return contractCall.buildFor1_5();\n  }\n\n  public createSessionWasmTransaction(\n    senderPublicKey: PublicKey,\n    networkName: string,\n    deployCost: number,\n    ttl: number,\n    bytes: Uint8Array,\n    args: Args,\n    gasPriceTolerance?: number\n  ): Transaction {\n    const sessionWasm = new SessionBuilder()\n      .from(senderPublicKey)\n      .chainName(networkName)\n      .payment(deployCost, gasPriceTolerance)\n      .ttl(ttl)\n      .wasm(bytes)\n      .runtimeArgs(args);\n\n    if (this.apiVersion === 2) {\n      return sessionWasm.build();\n    }\n\n    return sessionWasm.buildFor1_5();\n  }\n\n  public async putTransaction(\n    transaction: Transaction\n  ): Promise<PutTransactionResult | PutDeployResult> {\n    if (this.apiVersion == 2) {\n      return await this.rpcClient.putTransaction(transaction);\n    }\n\n    const deploy = transaction.getDeploy();\n    if (deploy) {\n      return await this.rpcClient.putDeploy(deploy);\n    }\n\n    return Promise.reject(\n      'Legacy deploy transaction is required when submitting to Casper Network 1.5'\n    );\n  }\n\n  public async getTransaction(\n    hash: TransactionHash\n  ): Promise<InfoGetTransactionResult> {\n    if (this.apiVersion == 2) {\n      if (hash.transactionV1) {\n        return await this.rpcClient.getTransactionByTransactionHash(\n          hash.transactionV1?.toHex()\n        );\n      }\n\n      if (hash.deploy) {\n        return await this.rpcClient.getTransactionByDeployHash(\n          hash.deploy.toHex()\n        );\n      }\n    }\n\n    if (hash.deploy) {\n      const getDeployResult = await this.rpcClient.getDeploy(\n        hash.deploy.toHex()\n      );\n      return getDeployResult.toInfoGetTransactionResult();\n    }\n\n    return Promise.reject('Hash is not valid');\n  }\n}\n","import {\n  Args,\n  CLValue,\n  ContractCallBuilder,\n  ContractHash,\n  DEFAULT_DEPLOY_TTL,\n  Deploy,\n  DeployHeader,\n  Duration,\n  ExecutableDeployItem,\n  Key,\n  KeyTypeID,\n  PublicKey,\n  StoredVersionedContractByHash,\n  Timestamp,\n  Transaction\n} from '../types';\nimport { CasperNetworkName } from '../@types';\n\nexport interface IMakeCep18TransferDeployParams {\n  contractPackageHash: string;\n  senderPublicKeyHex: string;\n  recipientPublicKeyHex: string;\n  transferAmount: string;\n  paymentAmount: string;\n  chainName?: string;\n  ttl?: number;\n  timestamp?: string;\n  gasPrice?: number;\n}\n\n/**\n * This function generates a `Deploy` for transferring CEP-18 from one account to another.\n *\n * @param params - The parameters required to create the CEP-18 transfer deploy.\n * @param params.contractPackageHash - The hash of the contract package to interact with.\n *                              This is a 64-character hexadecimal string representing the contract package.\n * @param params.senderPublicKeyHex - The sender's public key in hexadecimal format.\n * @param params.recipientPublicKeyHex - The recipient's public key in hexadecimal format.\n * @param params.transferAmount - The amount of CSPR to transfer.\n *                                This value must be represented in its smallest unit (motes).\n *                                For example, to transfer 2.5 CSPR, provide the value `2500000000` (2.5 * 10^9 motes).\n * @param params.paymentAmount - The amount of CSPR to pay a network fee.\n *                               This value must be represented in its smallest unit (motes).\n * @param params.chainName - (Optional) The name of the Casper network chain.\n *                           Defaults to `'CasperNetworkName.Mainnet'` if not specified.\n * @param params.ttl - (Optional) The time-to-live (TTL) for the `Deploy` in milliseconds.\n *                      Specifies how long the `Deploy` is valid before it expires.\n *                      Defaults 1800000 (30 minutes)\n * @param params.timestamp - (Optional) The timestamp in ISO 8601 format\n *\n * @returns A promise that resolves to the created Deploy instance, ready to be sent to the Casper network.\n *\n * @example\n * ```ts\n * import { makeCsprTransferDeploy } from 'casper-js-sdk';\n *\n * const deploy = await makeCep18TransferDeploy({\n *   contractHash: '0123456789asdfbcdef...',\n *   senderPublicKeyHex: '0123456789asdfbcdef...',\n *   recipientPublicKeyHex: '0123456789abcdef...',\n *   transferAmount: '25000000000', // 25 CEP-18 with 9 decimals\n *   paymentAmount: '3000000000', // 3 CSPR\n * });\n *\n * console.log('Created Deploy:', deploy);\n * ```\n */\n\nexport const makeCep18TransferDeploy = ({\n  contractPackageHash,\n  senderPublicKeyHex,\n  recipientPublicKeyHex,\n  transferAmount,\n  paymentAmount,\n  chainName = CasperNetworkName.Mainnet,\n  ttl = DEFAULT_DEPLOY_TTL,\n  timestamp,\n  gasPrice = 1\n}: IMakeCep18TransferDeployParams): Deploy => {\n  const senderPublicKey = PublicKey.newPublicKey(senderPublicKeyHex);\n  const recipientPublicKey = PublicKey.newPublicKey(recipientPublicKeyHex);\n\n  const session = new ExecutableDeployItem();\n\n  session.storedVersionedContractByHash = new StoredVersionedContractByHash(\n    ContractHash.newContract(contractPackageHash),\n    'transfer',\n    Args.fromMap({\n      recipient: CLValue.newCLKey(\n        Key.createByType(\n          recipientPublicKey.accountHash().toPrefixedString(),\n          KeyTypeID.Account\n        )\n      ),\n      amount: CLValue.newCLUInt256(transferAmount)\n    })\n  );\n\n  const payment = ExecutableDeployItem.standardPayment(paymentAmount);\n\n  const deployHeader = DeployHeader.default();\n  deployHeader.account = senderPublicKey;\n  deployHeader.chainName = chainName;\n  deployHeader.ttl = new Duration(ttl);\n  deployHeader.gasPrice = gasPrice;\n\n  if (timestamp) {\n    deployHeader.timestamp = Timestamp.fromJSON(timestamp);\n  }\n\n  return Deploy.makeDeploy(deployHeader, payment, session);\n};\n\ninterface IMakeCep18TransferTransactionParams\n  extends IMakeCep18TransferDeployParams {\n  casperNetworkApiVersion: string;\n}\n\nexport const makeCep18TransferTransaction = ({\n  contractPackageHash,\n  senderPublicKeyHex,\n  recipientPublicKeyHex,\n  transferAmount,\n  paymentAmount,\n  chainName = CasperNetworkName.Mainnet,\n  ttl = DEFAULT_DEPLOY_TTL,\n  timestamp,\n  casperNetworkApiVersion,\n  gasPrice = 1\n}: IMakeCep18TransferTransactionParams): Transaction => {\n  if (casperNetworkApiVersion.startsWith('2.')) {\n    let txBuilder = new ContractCallBuilder()\n      .byPackageHash(contractPackageHash)\n      .entryPoint('transfer')\n      .from(PublicKey.fromHex(senderPublicKeyHex))\n      .chainName(chainName)\n      .payment(Number(paymentAmount), gasPrice)\n      .ttl(ttl)\n      .runtimeArgs(\n        Args.fromMap({\n          recipient: CLValue.newCLKey(\n            Key.createByType(\n              PublicKey.fromHex(recipientPublicKeyHex)\n                .accountHash()\n                .toPrefixedString(),\n              KeyTypeID.Account\n            )\n          ),\n          amount: CLValue.newCLUInt256(transferAmount)\n        })\n      );\n\n    if (timestamp) {\n      txBuilder = txBuilder.timestamp(Timestamp.fromJSON(timestamp));\n    }\n\n    return txBuilder.build();\n  } else {\n    return Transaction.fromDeploy(\n      makeCep18TransferDeploy({\n        contractPackageHash,\n        senderPublicKeyHex,\n        recipientPublicKeyHex,\n        transferAmount,\n        paymentAmount,\n        chainName,\n        ttl,\n        timestamp\n      })\n    );\n  }\n};\n","import {\n  Args,\n  CLTypeUInt256,\n  CLValue,\n  ContractCallBuilder,\n  ContractHash,\n  DEFAULT_DEPLOY_TTL,\n  Deploy,\n  DeployHeader,\n  Duration,\n  ExecutableDeployItem,\n  Key,\n  KeyTypeID,\n  PublicKey,\n  StoredVersionedContractByHash,\n  Timestamp,\n  Transaction\n} from '../types';\nimport { CasperNetworkName, NFTTokenStandard } from '../@types';\n\nexport interface IMakeNftTransferDeployParams {\n  nftStandard: NFTTokenStandard;\n  contractPackageHash: string;\n  senderPublicKeyHex: string;\n  recipientPublicKeyHex: string;\n  paymentAmount: string;\n  chainName?: string;\n  ttl?: number;\n  tokenId?: string;\n  tokenHash?: string;\n  timestamp?: string;\n  gasPrice?: number;\n}\n\n/**\n * Creates a `Deploy` for transferring an NFT (Non-Fungible Token).\n * This function constructs and returns a `Deploy` for transferring NFTs according to the specified parameters.\n *\n * @param params - The parameters required to create the NFT transfer deploy.\n * @param params.nftStandard - The NFT standard being used (e.g., CEP-78, CEP-47).\n * @param params.contractPackageHash - The hash of the contract package to interact with.\n * @param params.senderPublicKeyHex - The sender's public key in hexadecimal format.\n * @param params.recipientPublicKeyHex - The recipient's public key in hexadecimal format.\n * @param params.paymentAmount - The payment amount for the transaction, specified in motes.\n * @param params.chainName - The name of the Casper network chain (e.g., \"casper\", \"casper-test\"). Defaults to Mainnet.\n * @param params.ttl - The time-to-live (TTL) for the deploy in milliseconds. Defaults to the constant `DEFAULT_DEPLOY_TTL`.\n * @param params.tokenId - The ID of the token to transfer. Optional and used if the standard requires it.\n * @param params.tokenHash - The hash of the token to transfer. Optional and used if the standard requires it.\n * @param params.timestamp - (Optional) The timestamp in ISO 8601 format\n *\n * @returns A deploy object representing the NFT transfer operation.\n *\n * @example\n * ```ts\n * import { makeNftTransferDeploy, NFTTokenStandard } from 'casper-js-sdk';\n *\n * const deploy = await makeNftTransferDeploy({\n *   nftStandard: NFTTokenStandard.CEP47,\n *   contractPackageHash: '0123456789asdfbcdef...',\n *   senderPublicKeyHex: '0123456789asdfbcdef...',\n *   recipientPublicKeyHex: '0123456789abcdef...',\n *   paymentAmount: '3000000000', // 3 CSPR\n *   tokenId: 234,\n * });\n *\n * console.log('Created Deploy:', deploy);\n * ```\n */\nexport const makeNftTransferDeploy = ({\n  nftStandard,\n  contractPackageHash,\n  senderPublicKeyHex,\n  recipientPublicKeyHex,\n  paymentAmount,\n  chainName = CasperNetworkName.Mainnet,\n  ttl = DEFAULT_DEPLOY_TTL,\n  tokenId,\n  tokenHash,\n  timestamp,\n  gasPrice = 1\n}: IMakeNftTransferDeployParams): Deploy => {\n  const senderPublicKey = PublicKey.newPublicKey(senderPublicKeyHex);\n\n  const args = getRuntimeArgsForNftTransfer({\n    nftStandard,\n    recipientPublicKeyHex,\n    senderPublicKeyHex,\n    tokenHash,\n    tokenId\n  });\n\n  const session = new ExecutableDeployItem();\n\n  session.storedVersionedContractByHash = new StoredVersionedContractByHash(\n    ContractHash.newContract(contractPackageHash),\n    'transfer',\n    args\n  );\n\n  const payment = ExecutableDeployItem.standardPayment(paymentAmount);\n\n  const deployHeader = DeployHeader.default();\n  deployHeader.account = senderPublicKey;\n  deployHeader.chainName = chainName;\n  deployHeader.ttl = new Duration(ttl);\n  deployHeader.gasPrice = gasPrice;\n\n  if (timestamp) {\n    deployHeader.timestamp = Timestamp.fromJSON(timestamp);\n  }\n\n  return Deploy.makeDeploy(deployHeader, payment, session);\n};\n\ninterface IMakeNftTransferTransactionParams\n  extends IMakeNftTransferDeployParams {\n  casperNetworkApiVersion: string;\n}\n\nexport const makeNftTransferTransaction = ({\n  nftStandard,\n  contractPackageHash,\n  senderPublicKeyHex,\n  recipientPublicKeyHex,\n  paymentAmount,\n  chainName = CasperNetworkName.Mainnet,\n  ttl = DEFAULT_DEPLOY_TTL,\n  tokenId,\n  tokenHash,\n  timestamp,\n  casperNetworkApiVersion,\n  gasPrice = 1\n}: IMakeNftTransferTransactionParams): Transaction => {\n  if (casperNetworkApiVersion.startsWith('2.')) {\n    let txBuilder = new ContractCallBuilder()\n      .byPackageHash(contractPackageHash)\n      .entryPoint('transfer')\n      .from(PublicKey.fromHex(senderPublicKeyHex))\n      .chainName(chainName)\n      .ttl(ttl)\n      .payment(Number(paymentAmount), gasPrice)\n      .runtimeArgs(\n        getRuntimeArgsForNftTransfer({\n          nftStandard,\n          recipientPublicKeyHex,\n          senderPublicKeyHex,\n          tokenHash,\n          tokenId\n        })\n      );\n\n    if (timestamp) {\n      txBuilder = txBuilder.timestamp(Timestamp.fromJSON(timestamp));\n    }\n\n    return txBuilder.build();\n  } else {\n    return Transaction.fromDeploy(\n      makeNftTransferDeploy({\n        nftStandard,\n        contractPackageHash,\n        senderPublicKeyHex,\n        recipientPublicKeyHex,\n        paymentAmount,\n        chainName,\n        ttl,\n        tokenId,\n        tokenHash,\n        timestamp\n      })\n    );\n  }\n};\n\nexport const getRuntimeArgsForNftTransfer = ({\n  nftStandard,\n  senderPublicKeyHex,\n  recipientPublicKeyHex,\n  tokenId,\n  tokenHash\n}: Pick<\n  IMakeNftTransferDeployParams,\n  | 'nftStandard'\n  | 'senderPublicKeyHex'\n  | 'recipientPublicKeyHex'\n  | 'tokenId'\n  | 'tokenHash'\n>): Args => {\n  if (!(tokenId || tokenHash)) {\n    throw new Error('Specify either tokenId or tokenHash to make a transfer');\n  }\n\n  let args: Args | null = null;\n\n  if (nftStandard === NFTTokenStandard.CEP47) {\n    if (!tokenId) {\n      throw new Error('TokenId is required for CEP-47 transfer');\n    }\n\n    args = getRuntimeArgsForCep47Transfer({ tokenId, recipientPublicKeyHex });\n  }\n\n  if (nftStandard === NFTTokenStandard.CEP78) {\n    args = getRuntimeArgsForCep78Transfer({\n      tokenId,\n      tokenHash,\n      senderPublicKeyHex,\n      recipientPublicKeyHex\n    });\n  }\n\n  if (!args) {\n    throw new Error('Arguments error. Check provided token data');\n  }\n\n  return args;\n};\n\nexport const getRuntimeArgsForCep78Transfer = ({\n  tokenHash,\n  tokenId,\n  recipientPublicKeyHex,\n  senderPublicKeyHex\n}: Pick<\n  IMakeNftTransferDeployParams,\n  'tokenId' | 'recipientPublicKeyHex' | 'tokenHash' | 'senderPublicKeyHex'\n>) => {\n  const runtimeArgs = Args.fromMap({\n    target_key: CLValue.newCLKey(\n      Key.createByType(\n        PublicKey.fromHex(recipientPublicKeyHex)\n          .accountHash()\n          .toPrefixedString(),\n        KeyTypeID.Account\n      )\n    ),\n    source_key: CLValue.newCLKey(\n      Key.createByType(\n        PublicKey.fromHex(senderPublicKeyHex)\n          .accountHash()\n          .toPrefixedString(),\n        KeyTypeID.Account\n      )\n    )\n  });\n\n  if (tokenId) {\n    runtimeArgs.insert(\n      'is_hash_identifier_mode',\n      CLValue.newCLValueBool(false)\n    );\n    runtimeArgs.insert('token_id', CLValue.newCLUint64(tokenId));\n  }\n\n  if (tokenHash) {\n    runtimeArgs.insert('is_hash_identifier_mode', CLValue.newCLValueBool(true));\n    runtimeArgs.insert('token_id', CLValue.newCLUint64(tokenHash));\n  }\n\n  return runtimeArgs;\n};\n\nexport function getRuntimeArgsForCep47Transfer({\n  tokenId,\n  recipientPublicKeyHex\n}: Required<\n  Pick<IMakeNftTransferDeployParams, 'tokenId' | 'recipientPublicKeyHex'>\n>) {\n  return Args.fromMap({\n    recipient: CLValue.newCLKey(\n      Key.createByType(\n        PublicKey.fromHex(recipientPublicKeyHex)\n          .accountHash()\n          .toPrefixedString(),\n        KeyTypeID.Account\n      )\n    ),\n    token_ids: CLValue.newCLList(CLTypeUInt256, [CLValue.newCLUInt256(tokenId)])\n  });\n}\n","export function getEnumKeyByValue<T extends object>(\n  enumObj: T,\n  value: T[keyof T]\n): string | undefined {\n  return Object.keys(enumObj).find(key => enumObj[key as keyof T] === value);\n}\n\n/**\n * Compares two `Uint8Array`s\n * @param a The first `Uint8Array`\n * @param b The second `Uint8Array`\n * @returns `true` if the two `Uint8Array`s match, and `false` otherwise\n */\nexport const arrayEquals = (a: Uint8Array, b: Uint8Array): boolean => {\n  return a.length === b.length && a.every((val, index) => val === b[index]);\n};\n\n/**\n * Utility function to sleep for a given duration.\n * @param ms - Duration in milliseconds.\n * @returns A promise that resolves after the given duration.\n */\nexport const sleep = (ms: number): Promise<void> =>\n  new Promise(resolve => setTimeout(resolve, ms));\n","import { CasperNetworkName } from '../@types';\n\nexport const AuctionManagerContractHashMap: Record<\n  CasperNetworkName,\n  string\n> = {\n  [CasperNetworkName.Mainnet]:\n    'ccb576d6ce6dec84a551e48f0d0b7af89ddba44c7390b690036257a04a3ae9ea',\n  [CasperNetworkName.Testnet]:\n    '93d923e336b20a4c4ca14d592b60e5bd3fe330775618290104f9beb326db7ae2',\n  [CasperNetworkName.Integration]:\n    'e22d38bcf3454a93face78a353feaccbf1d637d1ef9ef2e061a655728ff59bbe',\n  [CasperNetworkName.DevNet]:\n    '93d923e336b20a4c4ca14d592b60e5bd3fe330775618290104f9beb326db7ae2'\n};\n\nexport const DEFAULT_MINIMUM_DELEGATION_AMOUNT =\n  BigInt(500) * BigInt(1_000_000_000);\nexport const DEFAULT_MAXIMUM_DELEGATION_AMOUNT =\n  BigInt(1_000_000_000) * BigInt(1_000_000_000);\n","import {\n  DEFAULT_DEPLOY_TTL,\n  Deploy,\n  DeployHeader,\n  Duration,\n  ExecutableDeployItem,\n  NativeTransferBuilder,\n  PublicKey,\n  Timestamp,\n  Transaction,\n  TransferDeployItem\n} from '../types';\nimport { CasperNetworkName } from '../@types';\n\nexport interface IMakeCsprTransferDeployParams {\n  senderPublicKeyHex: string;\n  recipientPublicKeyHex: string;\n  transferAmount: string;\n  chainName?: string;\n  memo?: string;\n  ttl?: number;\n  timestamp?: string;\n  gasPrice?: number;\n  paymentAmount?: string;\n}\n\n/**\n * Creates a CSPR transfer `Deploy`.\n *\n * This function generates a `Deploy` for transferring CSPR from one account to another.\n *\n * @param params - The parameters required to create the transfer deploy.\n * @param params.senderPublicKeyHex - The sender's public key in hexadecimal format.\n * @param params.recipientPublicKeyHex - The recipient's public key in hexadecimal format.\n * @param params.transferAmount - The amount of CSPR to transfer.\n *                                This value must be represented in its smallest unit (motes).\n *                                For example, to transfer 2.5 CSPR, provide the value `2500000000` (2.5 * 10^9 motes).\n * @param params.chainName - (Optional) The name of the Casper network chain.\n *                           Defaults to `'CasperNetworkName.Mainnet'` if not specified.\n * @param params.memo - (Optional) Tag/Memo (Comment/Note/Remark)\n *                      Most exchanges require a Tag/Memo for CSPR deposits to be credited correctly.\n *                      Make sure to provide the Tag/Memo if required.\n * @param params.ttl - (Optional) The time-to-live (TTL) for the `Deploy` in milliseconds.\n *                      Specifies how long the `Deploy` is valid before it expires.\n *                      Defaults 1800000 (30 minutes)\n * @param params.timestamp - (Optional) The timestamp in ISO 8601 format\n *\n * @returns A promise that resolves to the created Deploy instance, ready to be sent to the Casper network.\n *\n * @example\n * ```ts\n * import { makeCsprTransferDeploy } from 'casper-js-sdk';\n *\n * const deploy = await makeCsprTransferDeploy({\n *   senderPublicKeyHex: '0123456789asdfbcdef...',\n *   recipientPublicKeyHex: '0123456789abcdef...',\n *   transferAmount: '2500000000', // 2.5 CSPR\n * });\n *\n * console.log('Created Deploy:', deploy);\n * ```\n */\nexport const makeCsprTransferDeploy = ({\n  senderPublicKeyHex,\n  recipientPublicKeyHex,\n  transferAmount,\n  chainName = CasperNetworkName.Mainnet,\n  memo,\n  ttl = DEFAULT_DEPLOY_TTL,\n  timestamp,\n  gasPrice = 1,\n  paymentAmount = '100000000'\n}: IMakeCsprTransferDeployParams) => {\n  const recipientKey = PublicKey.newPublicKey(recipientPublicKeyHex);\n  const senderKey = PublicKey.newPublicKey(senderPublicKeyHex);\n\n  const session = new ExecutableDeployItem();\n  session.transfer = TransferDeployItem.newTransfer(\n    transferAmount,\n    recipientKey,\n    undefined,\n    memo\n  );\n\n  const payment = ExecutableDeployItem.standardPayment(paymentAmount);\n\n  const deployHeader = DeployHeader.default();\n  deployHeader.account = senderKey;\n  deployHeader.chainName = chainName;\n  deployHeader.ttl = new Duration(ttl);\n  deployHeader.gasPrice = gasPrice;\n\n  if (timestamp) {\n    deployHeader.timestamp = Timestamp.fromJSON(timestamp);\n  }\n\n  return Deploy.makeDeploy(deployHeader, payment, session);\n};\n\ninterface IMakeCsprTransferTransactionParams\n  extends IMakeCsprTransferDeployParams {\n  casperNetworkApiVersion: string;\n}\n\nexport const makeCsprTransferTransaction = ({\n  senderPublicKeyHex,\n  recipientPublicKeyHex,\n  transferAmount,\n  chainName = CasperNetworkName.Mainnet,\n  memo,\n  ttl = DEFAULT_DEPLOY_TTL,\n  timestamp,\n  casperNetworkApiVersion,\n  gasPrice = 1,\n  paymentAmount = '100000000'\n}: IMakeCsprTransferTransactionParams): Transaction => {\n  if (casperNetworkApiVersion.startsWith('2')) {\n    let txBuilder = new NativeTransferBuilder()\n      .from(PublicKey.fromHex(senderPublicKeyHex))\n      .target(PublicKey.fromHex(recipientPublicKeyHex))\n      .amount(transferAmount)\n      .chainName(chainName)\n      .payment(Number(paymentAmount), gasPrice)\n      .ttl(ttl);\n\n    if (timestamp) {\n      txBuilder = txBuilder.timestamp(Timestamp.fromJSON(timestamp));\n    }\n\n    if (memo) {\n      txBuilder = txBuilder.id(Number(memo));\n    }\n\n    return txBuilder.build();\n  } else {\n    return Transaction.fromDeploy(\n      makeCsprTransferDeploy({\n        senderPublicKeyHex,\n        recipientPublicKeyHex,\n        transferAmount,\n        chainName,\n        memo,\n        ttl,\n        timestamp\n      })\n    );\n  }\n};\n","export * from './cspr-transfer';\nexport * from './casper-network';\nexport * from './auction-manager';\nexport * from './constants';\nexport * from './cep-18-transfer';\nexport * from './cep-nft-transfer';\nexport * from './common';\n","module.exports = require(\"@ethersproject/bignumber\");","module.exports = require(\"@ethersproject/bytes\");","module.exports = require(\"@ethersproject/constants\");","module.exports = require(\"@noble/ed25519\");","module.exports = require(\"@noble/hashes/blake2b\");","module.exports = require(\"@noble/hashes/hmac\");","module.exports = require(\"@noble/hashes/sha256\");","module.exports = require(\"@noble/hashes/sha512\");","module.exports = require(\"@noble/secp256k1\");","module.exports = require(\"axios\");","module.exports = require(\"eventsource\");","module.exports = require(\"humanize-duration\");","module.exports = require(\"key-encoder\");","module.exports = require(\"lodash/isNull\");","module.exports = require(\"ts-results\");","module.exports = require(\"typedjson\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(887);\n"],"names":["root","factory","exports","module","define","amd","a","i","global","NFTTokenStandard","AuctionManagerEntryPoint","CasperNetworkName","code","message","data","toString","this","JSON","stringify","jsonMember","constructor","Number","isRequired","AnyT","jsonObject","RpcError","Error","statusCode","sourceErr","unwrap","isNotFound","isHttpError","err","HttpError","ErrParamsJsonStringifyHandler","ErrProcessHttpRequest","ErrReadHttpResponseBody","ErrRpcResponseUnmarshal","endpoint","client","customHeaders","httpClient","create","setCustomHeaders","headers","setReferrer","url","referrer","processCall","params","serializer","TypedJSON","RpcRequest","body","processAxiosRequest","processFetchRequest","config","method","request","response","status","statusText","isAxiosError","fetch","json","HttpHandler","value","intValue","strValue","isIntValue","IDValue","fromString","fromInt","toInt","val","parseInt","isNaN","toJSON","fromJSON","preserveNull","String","Boolean","Method","ApiVersion","version","id","defaultRpcRequest","name","deserializer","stateRootHash","key","path","jsonArrayMember","ParamStateRootHash","hash","height","BlockIdentifier","blockHash","blockHeight","ParamQueryGlobalStateID","stateIdentifier","ParamQueryGlobalState","newQueryGlobalStateParam","transactionHash","finalizedApprovals","TransactionHash","ParamTransactionHash","deployHash","ParamDeployHash","blockIdentifier","ParamBlockIdentifier","byHeight","undefined","byHash","accountIdentifier","paramBlockIdentifier","Object","assign","account_identifier","toPlainJson","ParamGetAccountInfoBalance","accountHash","publicKey","entityAddr","EntityIdentifier","fromAccountHash","fromPublicKey","pubKey","fromEntityAddr","AccountHash","PublicKey","EntityAddr","entityIdentifier","ParamGetStateEntity","AccountIdentifier","deploy","Deploy","PutDeployRequest","transaction","TransactionWrapper","PutTransactionRequest","stateRoot","GlobalStateIdentifier","block","era","EraIdentifier","dictionaryItemKey","seedUref","ParamDictionaryIdentifierURef","dictionaryName","AccountNamedKey","ParamDictionaryIdentifierContractNamedKey","accountNamedKey","contractNamedKey","uRef","dictionary","ParamDictionaryIdentifier","SpeculativeExecParams","mainPurseUnderPublicKey","mainPurseUnderAccountHash","mainPurseUnderEntityAddr","purseUref","PurseIdentifier","fromUref","uref","URef","purseIdentifier","QueryBalanceRequest","QueryBalanceDetailsRequest","validator","delegator","eraIdentifier","InfoGetRewardRequest","purseURef","StateGetBalanceRequest","dictionaryIdentifier","StateGetDictionaryRequest","RpcResponse","AuctionState","StateGetAuctionInfoResult","AuctionStateV1","StateGetAuctionInfoV1Result","AuctionStateV2","StateGetAuctionInfoV2Result","CLValueUInt512","StateGetBalanceResult","Account","StateGetAccountInfo","AddressableEntity","NamedKey","EntryPointValue","RpcAddressableEntity","EntityOrAccount","StateGetEntityResult","BlockWithSignatures","BlockV1","ChainGetBlockResultV1Compatible","ChainGetBlockResult","parsedResult","parse","rawJSON","newChainGetBlockResultFromV1Compatible","result","chainGetBlockResult","apiVersion","blockV1","Block","newBlockFromBlockV1","blockWithSignatures","newBlockFromBlockWrapper","proofs","Transfer","map","it","ChainGetBlockTransfersResult","EraSummary","ChainGetEraSummaryResult","toInfoGetTransactionResult","executionInfo","ExecutionInfo","executionResult","executionResultsV1","length","fromV1","InfoGetTransactionResult","newTransactionFromDeploy","DeployExecutionInfo","DeployExecutionResult","InfoGetDeployResult","temp","InfoGetTransactionResultV1Compatible","newInfoGetTransactionResultFromV1Compatible","Transaction","InfoGetDeployResultV1Compatible","Hash","executionResults","transactionV1","fromTransactionV1","info","initiator","InitiatorAddr","header","account","ChainGetEraInfoResult","StoredValue","StateGetItemResult","StateGetDictionaryResult","BlockHeader","QueryGlobalStateResult","NodePeer","InfoGetPeerResult","ValidatorState","ChainGetStateRootHashResult","StatusChanges","ValidatorChanges","InfoGetValidatorChangesResult","NodeNextUpgrade","BlockSyncStatus","BlockSynchronizerStatus","MinimalBlockInfo","Timestamp","low","high","InfoGetStatusResult","PutDeployResult","PutTransactionResult","ExecutionResult","SpeculativeExecResult","QueryBalanceResult","BalanceHoldWithProof","QueryBalanceDetailsResult","InfoGetRewardResult","ChainspecBytes","InfoGetChainspecResult","BlockHeaderV1","QueryGlobalStateResultV1Compatible","handler","getDeploy","paramDeployHash","processRequest","GetDeploy","resp","parseResponse","getDeployFinalizedApproval","getTransactionByTransactionHash","fromHex","transactionHashParam","GetTransaction","txResult","getTransactionByDeployHash","getTransactionFinalizedApprovalByTransactionHash","getTransactionFinalizedApprovalByDeployHash","getStateItem","rootHash","getStateRootHashLatest","latestHashResult","toHex","stateRootHashParam","GetStateItem","queryLatestGlobalState","queryGlobalStateParam","QueryGlobalState","queryGlobalStateByBlockHash","queryGlobalStateByBlockHeight","queryGlobalStateByStateHash","queryGlobalStateParamWithoutRootHash","queryGlobalState","getLatestEntity","getStateEntityParam","GetStateEntity","getEntityByBlockHash","getEntityByBlockHeight","getAccountInfoByBlockHash","pub","accountInfoBalance","GetStateAccount","getAccountInfoByBlockHeight","getAccountInfo","identifier","accountParam","toPrefixedString","getDictionaryItem","getDictionaryItemByIdentifier","stateDictionaryParam","GetDictionaryItem","getLatestBalance","stateBalance","GetStateBalance","getBalanceByStateRootHash","getEraInfoLatest","GetEraInfo","getEraInfoByBlockHeight","blockIdentifierParam","getEraInfoByBlockHash","getLatestBlock","GetBlock","blockResult","getBlockByHash","getBlockByHeight","getLatestBlockTransfers","GetBlockTransfers","getBlockTransfersByHash","getBlockTransfersByHeight","getEraSummaryLatest","GetEraSummary","getEraSummaryByHash","getEraSummaryByHeight","getLatestAuctionInfo","getLatestAuctionInfoV2","auctionInfoV2","auctionInfoResult","auctionState","fromV2","includes","getLatestAuctionInfoV1","auctionInfoV1","GetAuctionInfo","GetAuctionInfoV2","getAuctionInfoByHash","getAuctionInfoV2ByHash","resV2","getAuctionInfoV1ByHash","resV1","getAuctionInfoByHeight","getAuctionInfoV2ByHeight","getAuctionInfoV1ByHeight","GetStateRootHash","getStateRootHashByHash","getStateRootHashByHeight","getValidatorChangesInfo","GetValidatorChanges","getStatus","GetStatus","getPeers","GetPeers","putDeploy","deployRequestParam","PutDeploy","putTransaction","transactionRequestParam","getTransactionWrapper","PutTransaction","queryLatestBalance","queryBalanceParam","QueryBalance","queryBalanceByBlockHeight","queryBalanceByBlockHash","queryBalanceByStateRootHash","queryLatestBalanceDetails","QueryBalanceDetails","queryBalanceDetailsByStateRootHash","queryBalanceDetailsByBlockHeight","queryBalanceDetailsByBlockHash","getChainspec","InfoGetChainspec","getValidatorRewardByEraID","eraID","rewardParam","GetReward","getValidatorRewardByBlockHash","getValidatorRewardByBlockHeight","getDelegatorRewardByEraID","getDelegatorRewardByBlockHash","getDelegatorRewardByBlockHeight","getLatestValidatorReward","getLatestDelegatorReward","waitForConfirmation","getInfo","timeout","maxRetries","retryDelay","timer","setTimeout","attempts","clearTimeout","console","warn","sleep","waitForTransaction","bind","waitForDeploy","type","parsed","reqID","error","RpcClient","newSpeculativeClient","SpeculativeClient","speculativeExec","speculativeParams","SpeculativeExec","eventStreamUrl","subscribedTo","parser","EventParser","subscribe","eventName","eventHandlerFn","some","e","Err","push","Ok","unsubscribe","filter","runEventsLoop","event","forEach","sub","shouldHandleEvent","rawEvent","parseEvent","lastEventId","start","eventId","separator","requestUrl","eventSource","onmessage","onerror","stop","close","SseClient","EventName","eventType","parseAsAPIVersionEvent","APIVersionEvent","parseAsDeployProcessedEvent","DeployProcessedEvent","parseAsBlockAddedEvent","BlockAddedEvent","parseAsDeployAcceptedEvent","DeployAcceptedEvent","parseAsFinalitySignatureEvent","FinalitySignatureEvent","parseAsTransactionExpiredEvent","TransactionExpiredEvent","parseAsTransactionProcessedEvent","TransactionProcessedEvent","parseAsTransactionAcceptedEvent","TransactionAcceptedEvent","parseAsFaultEvent","FaultEvent","parseAsStepEvent","StepEvent","RawEvent","BlockAdded","blockAdded","parsedData","blockWrapper","BlockAddedWrapper","blockV2","parsedV1Event","BlockAddedV1","BlockAddedEventV1","BlockWrapper","BlockAddedEventWrapper","ExecutionResultV1","DeployProcessedPayload","DeployExpiredPayload","DeployExpiredEvent","TransactionAcceptedPayload","TransactionAccepted","transactionEvent","wrapper","transactionAcceptedPayload","deployEvent","deployAccepted","TransactionExpiredPayload","transactionExpiredPayload","TransactionExpired","payload","deployExpired","Message","TransactionProcessedPayload","TransactionProcessed","parsedTransactionPayload","transactionProcessedPayload","deployProcessed","initiatorAddr","timestamp","ttl","messages","HexBytes","FinalitySignatureV1","FinalitySignatureV2","FinalitySignatureWrapper","FinalitySignature","finalitySignature","wrapped","v1","signature","originFinalitySignatureV1","v2","chainNameHash","v1Event","FaultPayload","Effect","Transform","StepPayload","prototype","hasOwnProperty","call","AssociatedKey","ActionThresholds","NamedKeys","TransactionRuntime","EntityKind","EntityActionThresholds","NamedEntryPoint","normalizedJSON","entry_point","EntryPointV1","toBytes","toBytesString","CLValueParser","toBytesWithType","concat","toBytesWithNamedArg","source","buffer","ArrayBuffer","view","DataView","offset","nameBytes","TextEncoder","encode","byteLength","expandBuffer","writeInteger","Uint8Array","set","valueBytes","fromBytes","bytes","nameLength","getUint32","slice","TextDecoder","decode","NamedArg","fromBytesWithType","desRA","_arr","Map","Array","from","size","args","Args","getByName","argName","get","fromMap","keys","k","fromNamedArgs","namedArgs","reduce","pre","cur","insert","vec","entries","valueByteList","splice","toBytesU32","numArgs","namedArgBytes","namedArg","jsonMapMember","CLValue","serRA","Bid","PublicKeyAndBid","ValidatorWeightAuction","EraValidators","bid","BidKind","BidKindWrapper","bids","pkAndBid","ValidatorBid","bondingPurse","delegationRate","inactive","stakedAmount","vestingSchedule","reservedSlots","validatorPublicKey","maximumDelegationAmount","DEFAULT_MAXIMUM_DELEGATION_AMOUNT","minimumDelegationAmount","DEFAULT_MINIMUM_DELEGATION_AMOUNT","bidKind","delegators","delegatorBid","Delegator","delegatorKind","state","eraValidators","bidWrapper","UnbondEra","UnbondKind","Unbond","DelegationKind","hasPublicKey","hasPurse","purse","Purse","urefBytes","bytesWithAccess","VestingSchedule","BigInt","newDelegatorFromDelegatorV1","delegationKind","delegatee","isArray","delegator_public_key","item","delegatorJson","delegatorV1","DelegatorV1","Credit","Bridge","Reservation","unified","bridge","credit","reservation","unbond","Proof","lastSwitchBlockHash","parentHash","accumulatedSeed","randomBit","currentGasPrice","proposer","protocolVersion","eraEnd","transactions","rewardedSignatures","originBlockV1","originBlockV2","getBlockV1","getBlockV2","EraEnd","blockTransactions","transferHashes","transferHash","BlockTransaction","TransactionCategory","Mint","TransactionVersion","deployHashes","Large","Proposer","dimensions","BlockV2","category","Auction","InstallUpgrade","Medium","Small","getBlockTransactionsFromTransactionHashes","getEnumKeyByValue","hashes","V1","EraEndV1","BlockBodyV1","EraEndV2","BlockHeaderV2","acc","tx","BlockBodyV2","BlockHeaderWrapper","getBlockHeaderV1","originBlockHeaderV1","getBlockHeaderV2","originBlockHeaderV2","newBlockHeaderFromV1","blockHeader","bodyHash","newBlockHeaderFromV2","isSystem","src","keypair","isSystemProposer","getPublicKey","getPublicKeyOptional","kind","isEmpty","isV1CasperWasm","SystemByteCode","toBytesNumber","bitSize","signed","BigNumber","maxUintValue","MaxUint256","mask","bounds","gt","lt","add","One","mul","NegativeOne","Zero","valTwos","toTwos","arrayify","gte","eq","reverse","toBytesU8","toBytesU16","toBytesI32","toBytesU64","toBytesI64","toBytesU128","toBytesU256","toBytesU512","str","arr","Buffer","fromBytesString","byte","x","blake2b","dkLen","fromBytesU64","setInt32","writeUShort","setUint16","writeBytes","setUint8","currentBuffer","requiredSize","newSize","newBuffer","index","serializedVecSize","Field","fields","currentOffset","addField","field","calltableBytes","payloadBytes","getField","find","f","instance","CalltableSerialization","fieldCount","parseU32","parseU16","fieldOffset","payloadSize","end","contractPackageHash","contractWasmHash","entryPoints","namedKeys","ContractPackageHash","ContractHash","Contract","ContractGroup","contractGroup","groupUsers","group","groupName","contractHash","contractVersion","protocolVersionMajor","ContractVersion","accessKey","disabledVersions","groups","versions","lockStatus","deserializeDisabledVersions","ContractPackage","ContractWasm","encodeBase64","decodeBase64","base64String","base64to16","base64","Conversions","encodeBase16","decodeBase16","base16String","csprToMotes","cspr","test","split","integerPart","decimalPart","motesToCSPR","motes","motesBigNumber","resultStr","toBigInt","padStart","replace","chainName","dependencies","gasPrice","Date","Duration","DEFAULT_DEPLOY_TTL","DeployHeader","dependenciesBytes","duration","default","payment","session","approvals","validate","paymentBytes","sessionBytes","concatenatedBytes","calculatedBodyHash","byteHash","headerBytes","calculatedHash","equals","approval","signer","verifySignature","sign","signatureBytes","signAndAddAlgorithmBytes","Approval","serializeApprovals","setSignature","hex","createNew","addArgToDeploy","setArg","makeDeploy","deployHeader","serializedBody","transactionEntryPoint","paymentAmount","transfer","TransactionEntryPoint","TransactionEntryPointEnum","moduleBytes","Call","entryPoint","storedContractByHash","storedContractByName","storedVersionedContractByHash","storedVersionedContractByName","Custom","amountArgument","getArgs","standardPayment","pricingMode","PricingMode","paymentLimitedMode","PaymentLimitedMode","gasPriceTolerance","paymentLimited","TransactionTarget","newTransactionTargetFromSession","TransactionScheduling","deployJson","isTransfer","isStandardPayment","isModuleBytes","asModuleBytes","getDeploySizeInBytes","hashSize","bodySize","b","ExecutableDeployItem","len","TransferHash","DeployInfo","EntryPointPayment","EntryPointType","clType","CLTypeRaw","parseCLType","EntryPointArg","access","entryPointType","entryPointPayment","ret","flags","functionIndex","EntryPointV2","v1CasperVm","v2CasperVm","amount","EraReward","equivocators","inactiveValidators","rewards","EraReport","nextEraValidatorWeights","nextEraGasPrice","ValidatorWeightEraEnd","serializeRewards","deserializeRewards","eraReport","rewardsMap","reward","validatorHex","has","DelegatorAllocation","ValidatorAllocation","DelegatorData","TempSeigniorageAllocation","SeigniorageAllocation","allocation","delegatorPublicKey","seigniorageAllocations","EraInfo","storedValue","merkleProof","ExecutableDeployItemType","lengthBytes","newCLUInt32","bytesArrayBytes","newCLByteArray","argBytes","byteArrayJsonSerializer","byteArrayJsonDeserializer","deserializeArgs","serializeArgs","ModuleBytes","hashBytes","entryPointBytes","newCLString","StoredContractByHash","StoredContractByName","optionBytes","CLValueOption","StoredVersionedContractByHash","StoredVersionedContractByName","TransferDeployItem","newTransfer","target","sourcePurse","runtimeArgs","newCLUInt512","newCLUref","newCLPublicKey","optionType","CLTypeOption","CLTypeUInt64","defaultClValue","option","newCLOption","newCLUint64","getArgByName","of","executableDeployItem","isStoredVersionContractByHash","isStoredVersionContractByName","isStoredContractByName","isStoredContractByHash","newModuleBytes","Key","newKey","Operation","operations","transforms","TransformKey","transfers","toNumber","ExecutionResultStatusData","effects","ExecutionResultV2","Version2","executionResultV2","errorMessage","limit","consumed","cost","sizeEstimate","currentPrice","refund","originExecutionResultV2","Version1","executionResultV1","success","effect","transform","isWriteTransfer","writeTransfer","parseAsWriteTransfer","gas","to","originExecutionResultV1","failure","results","deployExecutionInfo","join","hexString","match","calltableSerialization","jsonPubKey","jsonAccountHash","MessageTopicSummary","MessageTopic","MessagePayload","ErrNamedKeyNotFound","namedKey","NamedKeyValue","toMap","nk","entityVersion","EntityVersionKey","addressableEntity","entityVersionKey","EntityVersionAndHash","Package","NamedUserGroup","PrepaymentKind","calltableSerializer","newCLUint8","newCLValueBool","additionalComputationFactor","FixedMode","receipt","PrepaidMode","fixed","prepaid","undefinedSafeByteArrayJsonSerializer","undefinedSafeByteArrayJsonDeserializer","shortEnglishHumanizer","humanizer","spacer","serialComma","conjunction","delimiter","language","languages","shortEn","d","h","m","s","ms","humanizerTTL","dehumanizerTTL","raSerializer","Named","ra","asNamed","argsArray","values","protocol_version_major","UnbondingPurse","date","toMilliseconds","getTime","toISOString","toDate","toDurationString","substring","parseDurationString","durationStr","parts","totalMs","part","TransactionError","ErrInvalidTransactionHash","ErrInvalidApprovalSignature","ErrTransactionV1FromJson","TransactionV1","HASH_FIELD_INDEX","PAYLOAD_FIELD_INDEX","APPROVALS_FIELD_INDEX","newTransactionV1","makeTransactionV1","txData","initiator_addr","TransactionV1Payload","scheduling","originTransactionV1","originDeployV1","getTransactionV1","fromDeploy","txV1","_timestamp","_ttl","_scheduling","_initiatorAddr","accountHashKey","_chainName","_contractHash","_pricingMode","_getDefaultDeployHeader","_getStandardPayment","build","transactionPayload","_runtimeArgs","transactionTarget","_invocationTarget","_entryPoint","_amount","_amountRow","_publicKey","_target","targetAccountHash","_idTransfer","buildFor1_5","TransactionBuilder","NativeTransferBuilder","AddBid","_validator","_delegationRate","_minimumDelegationAmount","_maximumDelegationAmount","_reservedSlots","AuctionManagerContractHashMap","casper","newContract","addBid","NativeAddBidBuilder","WithdrawBid","public_key","withdrawBid","NativeWithdrawBidBuilder","Delegate","delegate","NativeDelegateBuilder","Undelegate","undelegate","NativeUndelegateBuilder","Redelegate","newValidator","_newValidator","new_validator","redelegate","NativeRedelegateBuilder","ActivateBid","activateBid","NativeActivateBidBuilder","ChangeBidPublicKey","previousPublicKey","_public_key","newPublicKey","_new_public_key","new_public_key","NativeChangeBidPublicKeyBuilder","invocationTarget","TransactionInvocationTarget","_transactionInvocationTarget","storedTarget","StoredTarget","runtime","vmCasperV1","byName","byPackageHash","packageHashInvocationTarget","ByPackageHashInvocationTarget","addr","transactionInvocationTarget","byPackageName","packageNameInvocationTarget","ByPackageNameInvocationTarget","customEntryPoint","ContractCallBuilder","_isInstallOrUpgrade","wasm","wasmBytes","sessionTarget","SessionTarget","isInstallUpgrade","installOrUpgrade","SessionBuilder","TransactionEntryPointTag","tag","AddReservations","CancelReservations","tagBytes","customBytes","customSerialization","customFlag","customEntryPointBytes","CLValueString","TransactionSchedulingTag","FutureEraScheduling","FutureTimestampScheduling","standard","futureEra","futureTimestamp","Native","FutureEra","FutureTimestamp","calltable","eraIDBytes","timestampBytes","timestampMs","_tag","VM_CASPER_V1_TAG","vmCasperV2","VM_CASPER_V2_TAG","TAG_FIELD_INDEX","versionBytes","CLTypeUInt32","packageHashBytes","packageHash","moduleBytesLength","Uint32Array","native","stored","Stored","Session","versionNum","PayloadFields","transactionScheduling","missingFields","payloadFields","getFieldValue","fieldIndex","fieldsBytes","runtimeArgsBuffer","runtimeArgsView","setUint32","runtimeArgsBytes","runtimeArgsWithLength","targetBytes","targetWithLength","entryPointWithLength","schedulingBytes","schedulingWithLength","TransferV1","TransferV2","TransferVersioned","getTransferV1","originTransferV1","getTransferV2","originTransferV2","versioned","fromTransferV1","v1Compatible","transferV1","TransformKind","isTransformation","isWriteAccount","isCLValueWrite","isWriteContract","jsonRes","RawWriteContract","Write","isWriteWithdraw","isWriteUnbonding","isWriteCLValue","isWritePackage","isWriteAddressableEntity","isWriteBidKind","isWriteNamedKey","isWriteMessage","isWriteMessageTopic","isWriteBid","isAddUint512","isWriteDeployInfo","isWriteContractPackage","RawWriteContractPackage","RawWriteTransferTransform","WriteTransfer","parseAsWriteWithdraws","RawWriteWithdrawals","UnbondingPurses","parseAsWriteAddressableEntity","TranformAddressableEntityRawData","parseAsWritePackage","PackageRawData","parseAsWriteBidKind","BidKindRawData","parseAsWriteNamedKey","RawDataNamedKey","parseAsWriteMessage","RawDataMessage","parseAsWriteMessageTopic","RawDataMessageTopic","parseAsWriteUnbondings","RawWriteUnbonding","parseAsUInt512","RawUInt512","UInt512","parseAsWriteAccount","parsed2x","RawWriteAccount2XTransform","parsed1x","RawWriteAccount1XTransform","WriteAccount","parseAsWriteDeployInfo","RawWriteDeployInfo","WriteDeployInfo","parseAsWriteCLValue","RawWriteCLValue","WriteCLValue","jsonRes2","RawWriteCLValueV2","parseAsWriteContract","parseAsWriteContractPackage","containsKeyRecursive","obj","NamedKeyKind","TranformAddressableEntity","TranformPackageData","TranformBidKindData","WriteNamedKey","WriteMessage","WriteMessageTopic","WriteContract","WriteContractPackage","RawWriteAccount2XTransformAccount","RawWriteAccount2XTransformWrite","CLValueAny","getValue","CLValueBool","subarray","CLValueByteArray","getType","CLTypeDynamic","inner","getValueByType","getTypeID","TypeID","Bool","bool","I32","i32","I64","i64","U8","ui8","U32","ui32","U64","ui64","U128","ui128","U256","ui256","U512","ui512","Unit","unit","stringVal","Option","List","list","ByteArray","byteArray","Result","Tuple1","tuple1","Tuple2","tuple2","Tuple3","tuple3","Any","any","getKey","newCLKey","clValue","CLTypeKey","CLTypeUref","CLTypePublicKey","newCLAny","res","CLTypeAny","CLTypeBool","clValueByteArray","CLTypeByteArray","newCLList","elementType","elements","listType","CLTypeList","CLValueList","newCLMap","keyType","valType","mapType","CLTypeMap","CLValueMap","clTypeForOption","newCLResult","innerOk","innerErr","isSuccess","resultType","CLTypeResult","CLValueResult","CLTypeString","newCLTuple1","tupleType","CLTypeTuple1","CLValueTuple1","newCLTuple2","val1","val2","CLTypeTuple2","CLValueTuple2","newCLTuple3","val3","CLTypeTuple3","CLValueTuple3","newCLUnit","CLTypeUnit","CLValueUnit","newCLInt32","CLTypeInt32","CLValueInt32","newCLInt64","CLTypeInt64","CLValueInt64","CLTypeUInt8","CLValueUInt8","CLValueUInt32","CLValueUInt64","newCLUInt128","CLTypeUInt128","CLValueUInt128","newCLUInt256","CLTypeUInt256","CLValueUInt256","CLTypeUInt512","elementsType","strData","one","append","remove","pop","u32","u32Bytes","remainder","fromBytesByType","innerBytes","indexedData","kvBytes","element","byteKey","inner1","byteVal","inner2","getMap","v","getData","findAny","keyString","tuple","mapResult","keyVal","valVal","originalBytes","CLValueNumeric","Int32ByteSize","i32Bytes","fromTwos","Int64ByteSize","resultBytes","arrayEquals","fromBytesUInt128","fromBytesUInt256","num","mod","isZero","isNegative","fromBytesUInt512","u64Bytes","u8","u8Bytes","ErrUnsupportedCLType","CLTypeParser","fromInterface","cl_type","clEntity","rawBytes","clTypeBytes","toBytesArrayU8","sourceType","matchBytesToCLType","boolValue","u64","u128","u256","u512","stringValue","anyType","byteArrayType","typeBytes","expectedTypeName","getName","actualTypeName","successByte","innerType","sizeBytes","sizeToBytes","uint32Value","innerVal","inner1Bytes","inner2Bytes","inner3","inner3Bytes","bigToBytes","toHexString","numberLen","bigFromBuffer","getUint8","fromBytesBigIntBase","byteSize","n","bigIntBytes","uintBytes","TypeName","getSize","typeID","typeName","SimpleType","rawMessage","fromRawJson","MapJsonParsingError","getSimpleTypeByName","simpleTypeByName","simpleTypeByID","optionInner","listInner","listBytes","byteArraySize","byteArrayBytes","errBytes","keyBytes","valBytes","innerTypeRes","tuple1Bytes","innerType1Res","innerType1Bytes","innerType2Res","innerType2Bytes","innerType1","innerType1Byte","innerType2","innerType2Byte","innerType3","innerType3Byte","BufferConstructorNotDetectedError","rawData","fromComplexStruct","ComplexTypeFormatInvalidError","ErrJsonConstructorNotFound","ErrComplexTypeFormatNotDetected","ErrInvalidResultJsonFormat","ok","okData","errData","originPrefix","startsWith","PrefixName","AddressableEntityHash","hexBytes","BalanceHoldAddrTag","getBalanceHoldAddrTag","Gas","Processing","BalanceHoldAddrTagError","purseAddr","blockTime","Hold","processing","BalanceHoldAddr","decoded","BalanceHold","hold","holdType","ByteHashLen","blockTimeMillis","blockTimeBuffer","alloc","writeBigUInt64LE","balanceHoldAddrTag","getBigUint64","BidAddrTag","ErrInvalidBidAddrTag","ErrUnexpectedBidAddrTagInBidAddr","ErrInvalidBidAddrFormat","BidAddr","bidAddrTag","addrTag","getTag","bidAddr","UnifiedTag","ValidatorTag","DelegatedAccountTag","ReservedDelegationAccountTag","UnbondAccountTag","delegatorAccount","DelegatedPurseTag","ReservedDelegationPurseTag","UnbondPurseTag","delegatorPurseAddress","CreditTag","eraId","readUInt32LE","rem","parseHashPair","input","nextBytes","parseHexBytesPair","unifiedHash","validatorHash","eraIdBytes","tagHex","eraIdHex","writeUInt32LE","typeByte","createBuffer","buffers","eraIdBuffer","BlockGlobalAddrTag","getBlockGlobalAddrTag","BlockTime","MessageCount","BlockGlobalAddrTagError","BlockTimePrefix","MessageCountPrefix","messageCount","BlockGlobalAddr","prefix","emptyHash","repeat","ByteCodeKind","EmptyPrefix","V1WasmPrefix","ErrInvalidByteCodeFormat","ByteCodeError","ErrInvalidByteCodeKind","V1CasperWasm","ByteCode","isEmptyCode","fill","newByteCodeKindFromByte","EmptyKind","V1CasperWasmKind","wasmHash","kindBytes","toPrefixedWasmString","newContractPackage","ContractPackageWasm","EntityKindType","ErrInvalidEntityAddrFormat","ErrInvalidEntityKind","system","smartContract","Entity","fromPrefixedString","SystemKind","AccountKind","SmartContractKind","entityKindTag","getEntityKindFromByte","EntryPointTag","getEntryPointTag","V1EntryPoint","V2EntryPoint","EntryPointError","V1Prefix","V2Prefix","VmCasperV1","selector","VmCasperV2","EntryPointAddr","lastIndex","lastIndexOf","selectorBuffer","entryPointTag","entityBytes","selectorBytes","array","Era","StringHashLen","fromBuffer","createHashArray","chunk","other","every","KeyTypeID","KeyTypeName","typeIDbyNames","EraId","Balance","Withdraw","Dictionary","SystemContractRegistry","ChainspecRegistry","ChecksumRegistry","keyIDbyPrefix","BlockGlobal","EntryPoint","KEY_DEFAULT_BYTE_LENGTH","withKeyTypeID","concatBytes","balance","withdraw","systemContactRegistry","chainspecRegistry","checksumRegistry","eraSummary","package","byteCode","blockGlobal","balanceHold","fieldBytes","contentBytes","hashParsed","splitAt","transferBytes","deployBytes","deployRemainder","eraBytes","eraRemainder","balanceBytes","balanceRemainder","bidBytes","bidRemainder","bidHash","withdrawBytes","withDrawRemainder","withdrawHash","dictBytes","dictRemainder","systemBytes","systenRemainder","eraSummaryBytes","eraSummaryRemainder","unbondHash","unbondBytes","chainBytes","chainspecRegistryBytes","checksumBytes","bidAddrBytes","packageBytes","packageBytesRemainder","entityAddrBytes","byteCodeBytes","MessageAddr","messageAddr","messageAddrBytes","NamedKeyAddr","namedKeyBytes","blockGlobalBytes","balanceHoldBytes","findPrefixByMap","prefixes","_","createByType","parseTypeByString","openBracketIndex","indexOf","keyTypeStr","keyValue","defaultHash","clonedArray","TopicPrefix","PrefixNameMessage","topicNameHash","messageIndex","hashAddr","topicHash","messageIndexArray","topicBytes","indexBuffer","baseAddr","nameBytesData","baseAddrSource","PrefixNameTransfer","initializeFromSource","hashHex","UrefAccess","ErrIncorrectUrefFormat","PrefixNameURef","accessBytes","setAccess","toDriverValue","arrayBuffer","dataView","KeyAlgorithm","KeySettings","ED25519","SECP256K1","algorithm","toByte","KeyAlgorithmUtils","alg","priv","toPem","msg","algBytes","rawSign","generate","PrivateKeyFactory","createPrivateKey","pubBytes","publicKeyBytes","PrivateKey","fromPem","content","createPrivateKeyFromPem","createPrivateKeyFromHex","ErrEmptySignature","ErrInvalidPublicKeyAlgo","ErrInvalidSignature","ErrEmptyPublicKey","HEX_CHARS","cryptoAlg","cryptoAlgBytes","checksummed","rawHex","publicKeyHex","isChecksummed","keyData","algString","toLowerCase","separatorByte","bytesToHash","blakeHash","sig","sigWithoutAlgByte","expectedPublicKeySize","isSameCase","isValidPublicKey","inputNibbles","accum","hashBits","output","j","bytesToBitsCycle","nibble","c","next","toUpperCase","contains","PublicKeyList","ed25519","utils","sha512Sync","sha512","ED25519_PEM_SECRET_KEY_TAG","randomPrivateKey","sync","keyHex","derPrefix","encoded","privateKeyBytes","readBase64WithPEM","parseKey","PemFramePrivateKeyPrefixSize","ED25519_PEM_PUBLIC_KEY_TAG","verify","secp256k1","hmacSha256Sync","hmac","sha256","keyEncoder","getPublicKeyBytes","signSync","der","hexToBytes","encodePrivate","rawKeyHex","encodePublic","compactSignature","Signature","fromDER","toCompactRawBytes","point","Point","compressedKey","toRawBytes","trim","makeAuctionManagerDeploy","delegatorPublicKeyHex","validatorPublicKeyHex","contractEntryPoint","Mainnet","newValidatorPublicKeyHex","newValidatorValidatorPublicKey","auctionContractHash","makeAuctionManagerTransaction","casperNetworkApiVersion","txBuilder","rpcClient","CasperNetwork","createDelegateTransaction","networkName","amountMotes","deployCost","createUndelegateTransaction","createRedelegateTransaction","newValidatorPublicKey","createTransferTransaction","senderPublicKey","recipientPublicKey","transferBuilder","createContractCallTransaction","contractCall","createContractPackageCallTransaction","createSessionWasmTransaction","sessionWasm","Promise","reject","getTransaction","makeCep18TransferDeploy","senderPublicKeyHex","recipientPublicKeyHex","transferAmount","recipient","makeCep18TransferTransaction","getRuntimeArgsForCep47Transfer","tokenId","token_ids","makeNftTransferDeploy","nftStandard","tokenHash","getRuntimeArgsForNftTransfer","makeNftTransferTransaction","CEP47","CEP78","getRuntimeArgsForCep78Transfer","target_key","source_key","enumObj","resolve","Testnet","Integration","DevNet","makeCsprTransferDeploy","memo","recipientKey","senderKey","makeCsprTransferTransaction","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}